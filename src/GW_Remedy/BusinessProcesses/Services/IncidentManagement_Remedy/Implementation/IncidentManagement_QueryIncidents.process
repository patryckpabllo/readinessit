<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns5="http://www.ericsson.com/BusinessSchemas/Services/Common/JMSSchema/JMSHeader.xsd" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:ns6="http://www.ericsson.com/BusinessSchemas/Common/JMSHeader/Header.xsd" xmlns:pfx="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://www.tibco.com/pe/EngineTypes" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:ns3="http://www.zain.com/ZESB/Services/IncidentManagement/Types" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://www.zain.com/ZESB/Types/Common" xmlns:pfx3="http://www.zain.com/ZESB/Services/IncidentManagement" xmlns:pfx2="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd">
    <wsdl:import namespace="http://www.zain.com/ZESB/Services/IncidentManagement" location="/BusinessWSDLS/Services/WSDLS/IncidentManagement_Inbound/IncidentManagement-Northbound.wsdl"/>
    <pd:name>BusinessProcesses/Services/IncidentManagement_Remedy/Implementation/IncidentManagement_QueryIncidents.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType wsMsgRef="pfx3:QueryIncidentsRequest"/>
    <pd:startX>46</pd:startX>
    <pd:startY>131</pd:startY>
    <pd:returnBindings>
        <pfx3:QueryIncidentsResponse>
            <QueryIncidentsResponse>
                <ns3:QueryIncidentsResponse>
                    <ns3:Incidents>
                        <xsl:for-each select="$Call_BPI_IncidentManagement_QueryIncidents/ns3:QueryIncidentsResponse/ns3:Incidents/ns3:Incident">
                            <ns3:Incident>
                                <ns3:Customer>
                                    <xsl:if test="exists(ns3:Customer/ns3:First) and string-length(ns3:Customer/ns3:First)>0">
                                        <xsl:if test="ns3:Customer/ns3:First">
                                            <ns3:First>
                                                <xsl:value-of select="ns3:Customer/ns3:First"/>
                                            </ns3:First>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:Customer/ns3:MiddleInitial) and string-length(ns3:Customer/ns3:MiddleInitial)>0">
                                        <xsl:if test="ns3:Customer/ns3:MiddleInitial">
                                            <ns3:MiddleInitial>
                                                <xsl:value-of select="ns3:Customer/ns3:MiddleInitial"/>
                                            </ns3:MiddleInitial>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:Customer/ns3:Last) and string-length(ns3:Customer/ns3:Last)>0">
                                        <xsl:if test="ns3:Customer/ns3:Last">
                                            <ns3:Last>
                                                <xsl:value-of select="ns3:Customer/ns3:Last"/>
                                            </ns3:Last>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:Customer/ns3:LoginID) and string-length(ns3:Customer/ns3:LoginID)>0">
                                        <xsl:if test="ns3:Customer/ns3:LoginID">
                                            <ns3:LoginID>
                                                <xsl:value-of select="ns3:Customer/ns3:LoginID"/>
                                            </ns3:LoginID>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:Customer/ns3:PhoneNumber) and string-length(ns3:Customer/ns3:PhoneNumber)>0">
                                        <xsl:if test="ns3:Customer/ns3:PhoneNumber">
                                            <ns3:PhoneNumber>
                                                <xsl:value-of select="ns3:Customer/ns3:PhoneNumber"/>
                                            </ns3:PhoneNumber>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:Customer/ns3:Company) and string-length(ns3:Customer/ns3:Company)>0">
                                        <xsl:if test="ns3:Customer/ns3:Company">
                                            <ns3:Company>
                                                <xsl:value-of select="ns3:Customer/ns3:Company"/>
                                            </ns3:Company>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:Customer/ns3:CorporateID) and string-length(ns3:Customer/ns3:CorporateID)>0">
                                        <xsl:if test="ns3:Customer/ns3:CorporateID">
                                            <ns3:CorporateID>
                                                <xsl:value-of select="ns3:Customer/ns3:CorporateID"/>
                                            </ns3:CorporateID>
                                        </xsl:if>
                                    </xsl:if>
                                </ns3:Customer>
                                <ns3:AssignedTo>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:First) and string-length(ns3:AssignedTo/ns3:First)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:First">
                                            <ns3:First>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:First"/>
                                            </ns3:First>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:MiddleInitial) and string-length(ns3:AssignedTo/ns3:MiddleInitial)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:MiddleInitial">
                                            <ns3:MiddleInitial>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:MiddleInitial"/>
                                            </ns3:MiddleInitial>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:Last) and string-length(ns3:AssignedTo/ns3:Last)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:Last">
                                            <ns3:Last>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:Last"/>
                                            </ns3:Last>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:LoginID) and string-length(ns3:AssignedTo/ns3:LoginID)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:LoginID">
                                            <ns3:LoginID>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:LoginID"/>
                                            </ns3:LoginID>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:PhoneNumber) and string-length(ns3:AssignedTo/ns3:PhoneNumber)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:PhoneNumber">
                                            <ns3:PhoneNumber>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:PhoneNumber"/>
                                            </ns3:PhoneNumber>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:Company) and string-length(ns3:AssignedTo/ns3:Company)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:Company">
                                            <ns3:Company>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:Company"/>
                                            </ns3:Company>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:CorporateID) and string-length(ns3:AssignedTo/ns3:CorporateID)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:CorporateID">
                                            <ns3:CorporateID>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:CorporateID"/>
                                            </ns3:CorporateID>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:Organization) and string-length(ns3:AssignedTo/ns3:Organization)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:Organization">
                                            <ns3:Organization>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:Organization"/>
                                            </ns3:Organization>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:Group) and string-length(ns3:AssignedTo/ns3:Group)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:Group">
                                            <ns3:Group>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:Group"/>
                                            </ns3:Group>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:AssignedTo/ns3:ShiftName) and string-length(ns3:AssignedTo/ns3:ShiftName)>0">
                                        <xsl:if test="ns3:AssignedTo/ns3:ShiftName">
                                            <ns3:ShiftName>
                                                <xsl:value-of select="ns3:AssignedTo/ns3:ShiftName"/>
                                            </ns3:ShiftName>
                                        </xsl:if>
                                    </xsl:if>
                                </ns3:AssignedTo>
                                <xsl:copy-of select="ns3:Categorization"/>
                                <ns3:Status>
                                    <xsl:value-of select="ns3:Status"/>
                                </ns3:Status>
                                <ns3:Summary>
                                    <xsl:value-of select="ns3:Summary"/>
                                </ns3:Summary>
                                <xsl:if test="exists(ns3:Description) and string-length(ns3:Description)>0">
                                    <xsl:if test="ns3:Description">
                                        <ns3:Description>
                                            <xsl:value-of select="ns3:Description"/>
                                        </ns3:Description>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:Impact) and string-length(ns3:Impact)>0">
                                    <xsl:if test="ns3:Impact">
                                        <ns3:Impact>
                                            <xsl:value-of select="ns3:Impact"/>
                                        </ns3:Impact>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:Urgency) and string-length(ns3:Urgency)>0">
                                    <xsl:if test="ns3:Urgency">
                                        <ns3:Urgency>
                                            <xsl:value-of select="ns3:Urgency"/>
                                        </ns3:Urgency>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:ServiceType) and string-length(ns3:ServiceType)>0">
                                    <xsl:if test="ns3:ServiceType">
                                        <ns3:ServiceType>
                                            <xsl:value-of select="ns3:ServiceType"/>
                                        </ns3:ServiceType>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:ReportedSource) and string-length(ns3:ReportedSource)>0">
                                    <xsl:if test="ns3:ReportedSource">
                                        <ns3:ReportedSource>
                                            <xsl:value-of select="ns3:ReportedSource"/>
                                        </ns3:ReportedSource>
                                    </xsl:if>
                                </xsl:if>
                                <ns3:DirectContact>
                                    <xsl:if test="exists(ns3:DirectContact/ns3:First) and string-length(ns3:DirectContact/ns3:First)>0">
                                        <xsl:if test="ns3:DirectContact/ns3:First">
                                            <ns3:First>
                                                <xsl:value-of select="ns3:DirectContact/ns3:First"/>
                                            </ns3:First>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:DirectContact/ns3:MiddleInitial) and string-length(ns3:DirectContact/ns3:MiddleInitial)>0">
                                        <xsl:if test="ns3:DirectContact/ns3:MiddleInitial">
                                            <ns3:MiddleInitial>
                                                <xsl:value-of select="ns3:DirectContact/ns3:MiddleInitial"/>
                                            </ns3:MiddleInitial>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:DirectContact/ns3:Last) and string-length(ns3:DirectContact/ns3:Last)>0">
                                        <xsl:if test="ns3:DirectContact/ns3:Last">
                                            <ns3:Last>
                                                <xsl:value-of select="ns3:DirectContact/ns3:Last"/>
                                            </ns3:Last>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:DirectContact/ns3:LoginID) and string-length(ns3:DirectContact/ns3:LoginID)>0">
                                        <xsl:if test="ns3:DirectContact/ns3:LoginID">
                                            <ns3:LoginID>
                                                <xsl:value-of select="ns3:DirectContact/ns3:LoginID"/>
                                            </ns3:LoginID>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:DirectContact/ns3:PhoneNumber) and string-length(ns3:DirectContact/ns3:PhoneNumber)>0">
                                        <xsl:if test="ns3:DirectContact/ns3:PhoneNumber">
                                            <ns3:PhoneNumber>
                                                <xsl:value-of select="ns3:DirectContact/ns3:PhoneNumber"/>
                                            </ns3:PhoneNumber>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:DirectContact/ns3:Company) and string-length(ns3:DirectContact/ns3:Company)>0">
                                        <xsl:if test="ns3:DirectContact/ns3:Company">
                                            <ns3:Company>
                                                <xsl:value-of select="ns3:DirectContact/ns3:Company"/>
                                            </ns3:Company>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:DirectContact/ns3:CorporateID) and string-length(ns3:DirectContact/ns3:CorporateID)>0">
                                        <xsl:if test="ns3:DirectContact/ns3:CorporateID">
                                            <ns3:CorporateID>
                                                <xsl:value-of select="ns3:DirectContact/ns3:CorporateID"/>
                                            </ns3:CorporateID>
                                        </xsl:if>
                                    </xsl:if>
                                </ns3:DirectContact>
                                <xsl:if test="exists(ns3:ProductInfo/ns3:Name) and string-length(ns3:ProductInfo/ns3:Name)>0">
                                    <ns3:ProductInfo>
                                        <xsl:if test="exists(ns3:ProductInfo/ns3:Name) and string-length(ns3:ProductInfo/ns3:Name)>0">
                                            <xsl:if test="ns3:ProductInfo/ns3:Name">
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:ProductInfo/ns3:Name"/>
                                                </ns3:Name>
                                            </xsl:if>
                                        </xsl:if>
                                        <xsl:if test="exists(ns3:ProductInfo/ns3:Manufacturer) and string-length(ns3:ProductInfo/ns3:Manufacturer)>0">
                                            <xsl:if test="ns3:ProductInfo/ns3:Manufacturer">
                                                <ns3:Manufacturer>
                                                    <xsl:value-of select="ns3:ProductInfo/ns3:Manufacturer"/>
                                                </ns3:Manufacturer>
                                            </xsl:if>
                                        </xsl:if>
                                        <ns3:Categorization>
                                            <xsl:for-each select="ns3:ProductInfo/ns3:Categorization/ns3:Category">
                                                <ns3:Category>
                                                    <xsl:attribute name="Tier">
                                                        <xsl:value-of select="@Tier"/>
                                                    </xsl:attribute>
                                                    <xsl:value-of select="."/>
                                                </ns3:Category>
                                            </xsl:for-each>
                                        </ns3:Categorization>
                                        <xsl:if test="exists(ns3:ProductInfo/ns3:ModelVersion) and string-length(ns3:ProductInfo/ns3:ModelVersion)>0">
                                            <xsl:if test="ns3:ProductInfo/ns3:ModelVersion">
                                                <ns3:ModelVersion>
                                                    <xsl:value-of select="ns3:ProductInfo/ns3:ModelVersion"/>
                                                </ns3:ModelVersion>
                                            </xsl:if>
                                        </xsl:if>
                                    </ns3:ProductInfo>
                                </xsl:if>
                                <xsl:if test="ns3:IncidentID">
                                    <ns3:IncidentID>
                                        <xsl:value-of select="ns3:IncidentID"/>
                                    </ns3:IncidentID>
                                </xsl:if>
                                <xsl:if test="exists(ns3:StatusReason) and string-length(ns3:StatusReason)>0">
                                    <xsl:if test="ns3:StatusReason">
                                        <ns3:StatusReason>
                                            <xsl:value-of select="ns3:StatusReason"/>
                                        </ns3:StatusReason>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:VIP) and string-length(ns3:VIP)>0">
                                    <xsl:if test="ns3:VIP">
                                        <ns3:VIP>
                                            <xsl:value-of select="ns3:VIP"/>
                                        </ns3:VIP>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:Priority) and string-length(ns3:Priority)>0">
                                    <xsl:if test="ns3:Priority">
                                        <ns3:Priority>
                                            <xsl:value-of select="ns3:Priority"/>
                                        </ns3:Priority>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:PriorityWeight) and string-length(ns3:PriorityWeight)>0">
                                    <xsl:if test="ns3:PriorityWeight">
                                        <ns3:PriorityWeight>
                                            <xsl:value-of select="ns3:PriorityWeight"/>
                                        </ns3:PriorityWeight>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:TargetDate) and string-length(ns3:TargetDate)>0">
                                    <xsl:if test="ns3:TargetDate">
                                        <ns3:TargetDate>
                                            <xsl:value-of select="ns3:TargetDate"/>
                                        </ns3:TargetDate>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:Resolution) and string-length(ns3:Resolution)>0">
                                    <xsl:if test="ns3:Resolution">
                                        <ns3:Resolution>
                                            <xsl:value-of select="ns3:Resolution"/>
                                        </ns3:Resolution>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:copy-of select="ns3:ResolutionCategorization"/>
                                <ns3:StatusDates>
                                    <xsl:if test="exists(ns3:StatusDates/ns3:Created) and string-length(ns3:StatusDates/ns3:Created)>0">
                                        <xsl:if test="ns3:StatusDates/ns3:Created">
                                            <ns3:Created>
                                                <xsl:value-of select="ns3:StatusDates/ns3:Created"/>
                                            </ns3:Created>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:StatusDates/ns3:Resolved) and string-length(ns3:StatusDates/ns3:Resolved)>0">
                                        <xsl:if test="ns3:StatusDates/ns3:Resolved">
                                            <ns3:Resolved>
                                                <xsl:value-of select="ns3:StatusDates/ns3:Resolved"/>
                                            </ns3:Resolved>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:StatusDates/ns3:Closed) and string-length(ns3:StatusDates/ns3:Closed)>0">
                                        <xsl:if test="ns3:StatusDates/ns3:Closed">
                                            <ns3:Closed>
                                                <xsl:value-of select="ns3:StatusDates/ns3:Closed"/>
                                            </ns3:Closed>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="exists(ns3:StatusDates/ns3:Cancelled) and string-length(ns3:StatusDates/ns3:Cancelled)>0">
                                        <xsl:if test="ns3:StatusDates/ns3:Cancelled">
                                            <ns3:Cancelled>
                                                <xsl:value-of select="ns3:StatusDates/ns3:Cancelled"/>
                                            </ns3:Cancelled>
                                        </xsl:if>
                                    </xsl:if>
                                </ns3:StatusDates>
                                <xsl:if test="exists(ns3:LastUpdatedBy) and string-length(ns3:LastUpdatedBy)>0">
                                    <xsl:if test="ns3:LastUpdatedBy">
                                        <ns3:LastUpdatedBy>
                                            <xsl:value-of select="ns3:LastUpdatedBy"/>
                                        </ns3:LastUpdatedBy>
                                    </xsl:if>
                                </xsl:if>
                                <xsl:if test="exists(ns3:ClosureProductInfo/ns3:Name) and string-length(ns3:ClosureProductInfo/ns3:Name)>0">
                                    <ns3:ClosureProductInfo>
                                        <xsl:if test="exists(ns3:ClosureProductInfo/ns3:Name) and string-length(ns3:ClosureProductInfo/ns3:Name)>0">
                                            <xsl:if test="ns3:ClosureProductInfo/ns3:Name">
                                                <ns3:Name>
                                                    <xsl:value-of select="ns3:ClosureProductInfo/ns3:Name"/>
                                                </ns3:Name>
                                            </xsl:if>
                                        </xsl:if>
                                        <xsl:if test="exists(ns3:ClosureProductInfo/ns3:Manufacturer) and string-length(ns3:ClosureProductInfo/ns3:Manufacturer)>0">
                                            <xsl:if test="ns3:ClosureProductInfo/ns3:Manufacturer">
                                                <ns3:Manufacturer>
                                                    <xsl:value-of select="ns3:ClosureProductInfo/ns3:Manufacturer"/>
                                                </ns3:Manufacturer>
                                            </xsl:if>
                                        </xsl:if>
                                        <ns3:Categorization>
                                            <xsl:for-each select="ns3:ClosureProductInfo/ns3:Categorization/ns3:Category">
                                                <ns3:Category>
                                                    <xsl:attribute name="Tier">
                                                        <xsl:value-of select="@Tier"/>
                                                    </xsl:attribute>
                                                    <xsl:value-of select="."/>
                                                </ns3:Category>
                                            </xsl:for-each>
                                        </ns3:Categorization>
                                        <xsl:if test="exists(ns3:ClosureProductInfo/ns3:ModelVersion) and string-length(ns3:ClosureProductInfo/ns3:ModelVersion)>0">
                                            <xsl:if test="ns3:ClosureProductInfo/ns3:ModelVersion">
                                                <ns3:ModelVersion>
                                                    <xsl:value-of select="ns3:ClosureProductInfo/ns3:ModelVersion"/>
                                                </ns3:ModelVersion>
                                            </xsl:if>
                                        </xsl:if>
                                    </ns3:ClosureProductInfo>
                                </xsl:if>
                                <xsl:for-each select="ns3:Params">
                                    <ns3:Params>
                                        <xsl:for-each select="pfx4:StringParam">
                                            <pfx4:StringParam>
                                                <xsl:attribute name="name">
                                                    <xsl:value-of select="@name"/>
                                                </xsl:attribute>
                                                <xsl:value-of select="."/>
                                            </pfx4:StringParam>
                                        </xsl:for-each>
                                    </ns3:Params>
                                </xsl:for-each>
                            </ns3:Incident>
                        </xsl:for-each>
                    </ns3:Incidents>
                </ns3:QueryIncidentsResponse>
            </QueryIncidentsResponse>
        </pfx3:QueryIncidentsResponse>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType wsMsgRef="pfx3:QueryIncidentsResponse"/>
    <pd:endX>841</pd:endX>
    <pd:endY>145</pd:endY>
    <pd:errorSchemas>
        <Fault wsMsgRef="pfx3:faultMessage"/>
    </pd:errorSchemas>
    <pd:processVariables/>
    <pd:targetNamespace>http://www.zain.com/ZESB/Services/IncidentManagement</pd:targetNamespace>
    <pd:activity name="GetContext">
        <pd:type>com.tibco.ae.tools.palettes.servicepalette.GetContextActivity</pd:type>
        <pd:resourceType>service.activity.getContext</pd:resourceType>
        <pd:x>159</pd:x>
        <pd:y>132</pd:y>
        <config>
            <variableConfig>/BusinessSchemas/Services/Common/JMSSchema/InputContext.contextResource</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ErrorHandler">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>48</pd:x>
        <pd:y>377</pd:y>
        <config>
            <processName>/CommonProcesses/ErrorHandlingProcess/Exception_Message.process</processName>
        </config>
        <pd:inputBindings>
            <pfx:ExceptionRequest>
                <ns4:Header>
                    <ns4:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns4:ApplicationID>
                    <ns4:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/BusinessProcesses/Services/IncidentManagement/QueryIncidents/ComponentName"/>
                    </ns4:ComponentName>
                    <ns4:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns4:Hostname>
                    <ns4:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns4:Timestamp>
                    <ns4:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns4:TransactionDomain>
                    <ns4:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns2:ProcessContext/ProcessId))"/>
                    </ns4:TransactionType>
                    <ns4:TransactionID>
                        <xsl:value-of select="$GetTransactionID/GUID/TransactionID"/>
                    </ns4:TransactionID>
                    <ns4:Message>
                        <xsl:value-of select="tib:render-xml($_error/ns2:ErrorReport)"/>
                    </ns4:Message>
                </ns4:Header>
                <ExceptionCode>
                    <xsl:value-of select="$_error/ns2:ErrorReport/MsgCode"/>
                </ExceptionCode>
                <StackTrace>
                    <xsl:value-of select="$_error/ns2:ErrorReport/Msg"/>
                </StackTrace>
            </pfx:ExceptionRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ErrorLog">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>509</pd:x>
        <pd:y>377</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
        </config>
        <pd:inputBindings>
            <pfx2:LogRequest>
                <ns4:Header>
                    <ns4:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns4:ApplicationID>
                    <ns4:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/BusinessProcesses/Services/IncidentManagement/QueryIncidents/ComponentName"/>
                    </ns4:ComponentName>
                    <ns4:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns4:Hostname>
                    <ns4:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns4:Timestamp>
                    <ns4:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns4:TransactionDomain>
                    <ns4:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns2:ProcessContext/ProcessId))"/>
                    </ns4:TransactionType>
                    <ns4:TransactionID>
                        <xsl:value-of select="$GetTransactionID/GUID/TransactionID"/>
                    </ns4:TransactionID>
                    <xsl:choose>
                        <xsl:when test="exists($Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType) and string-length($Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType)>0">
                            <ns4:Message>
                                <xsl:value-of select="tib:render-xml($Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType)"/>
                            </ns4:Message>
                        </xsl:when>
                        <xsl:otherwise>
                            <ns4:Message>
                                <xsl:value-of select="tib:render-xml($ErrorHandler/pfx:ExceptionRequest)"/>
                            </ns4:Message>
                        </xsl:otherwise>
                    </xsl:choose>
                </ns4:Header>
                <TimeDuration>
                    <xsl:value-of select="tib:timestamp()-$GetTransactionID/GUID/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleError"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_ERR_RES_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </pfx2:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>256</pd:x>
        <pd:y>2</pd:y>
        <pd:width>506</pd:width>
        <pd:height>267</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>simpleGroup</pd:groupType>
            <pd:serializable>false</pd:serializable>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>GetTransactionID</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogOut</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetTransactionID</pd:from>
            <pd:to>LogIn</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogIn</pd:from>
            <pd:to>Call_BPI_IncidentManagement_QueryIncidents</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Call_BPI_IncidentManagement_QueryIncidents</pd:from>
            <pd:to>LogOut</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Call_BPI_IncidentManagement_QueryIncidents</pd:from>
            <pd:to>Generate Error</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>error</pd:conditionType>
        </pd:transition>
        <pd:activity name="GetTransactionID">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>318</pd:x>
            <pd:y>65</pd:y>
            <config>
                <processName>/CommonProcesses/Utilities/GUID.process</processName>
            </config>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="LogIn">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>436</pd:x>
            <pd:y>65</pd:y>
            <config>
                <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            </config>
            <pd:inputBindings>
                <pfx2:LogRequest>
                    <ns4:Header>
                        <ns4:ApplicationID>
                            <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ns4:ApplicationID>
                        <ns4:ComponentName>
                            <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/BusinessProcesses/Services/IncidentManagement/QueryIncidents/ComponentName"/>
                        </ns4:ComponentName>
                        <ns4:Hostname>
                            <xsl:value-of select="BW:getHostName()"/>
                        </ns4:Hostname>
                        <ns4:Timestamp>
                            <xsl:value-of select="current-dateTime()"/>
                        </ns4:Timestamp>
                        <ns4:TransactionDomain>
                            <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                        </ns4:TransactionDomain>
                        <ns4:TransactionType>
                            <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns2:ProcessContext/ProcessId))"/>
                        </ns4:TransactionType>
                        <ns4:TransactionID>
                            <xsl:value-of select="$GetTransactionID/GUID/TransactionID"/>
                        </ns4:TransactionID>
                        <ns4:CorrelationID>
                            <xsl:value-of select="$GetContext/ns6:_applicationProperties/ns6:JMSMessageID"/>
                        </ns4:CorrelationID>
                        <ns4:Message>
                            <xsl:value-of select="tib:render-xml($Start/pfx3:QueryIncidentsRequest/QueryIncidentsRequest/ns3:QueryIncidentsRequest)"/>
                        </ns4:Message>
                    </ns4:Header>
                    <TimeDuration>
                        <xsl:value-of select="tib:timestamp()-$GetTransactionID/GUID/StartTimeStamp"/>
                    </TimeDuration>
                    <Category>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                    </Category>
                    <Status>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_REQ_RECV"/>
                    </Status>
                    <Audit>
                        <xsl:value-of select="0"/>
                    </Audit>
                </pfx2:LogRequest>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Call_BPI_IncidentManagement_QueryIncidents">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>548</pd:x>
            <pd:y>65</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/IncidentManagement_Remedy/HelperProcess/Call_BPI_IncidentManagement_QueryIncidents.process</processName>
            </config>
            <pd:inputBindings>
                <ns3:QueryIncidentsRequest>
                    <ns3:Filter>
                        <xsl:value-of select="$Start/pfx3:QueryIncidentsRequest/QueryIncidentsRequest/ns3:QueryIncidentsRequest/ns3:Filter"/>
                    </ns3:Filter>
                    <ns3:StartRecord>
                        <xsl:value-of select="$Start/pfx3:QueryIncidentsRequest/QueryIncidentsRequest/ns3:QueryIncidentsRequest/ns3:StartRecord"/>
                    </ns3:StartRecord>
                    <ns3:PageSize>
                        <xsl:value-of select="$Start/pfx3:QueryIncidentsRequest/QueryIncidentsRequest/ns3:QueryIncidentsRequest/ns3:PageSize"/>
                    </ns3:PageSize>
                    <ns3:TransactionID>
                        <xsl:value-of select="$GetTransactionID/GUID/TransactionID"/>
                    </ns3:TransactionID>
                    <ns3:StartTimeStamp>
                        <xsl:value-of select="$GetTransactionID/GUID/StartTimeStamp"/>
                    </ns3:StartTimeStamp>
                </ns3:QueryIncidentsRequest>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="LogOut">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>673</pd:x>
            <pd:y>65</pd:y>
            <config>
                <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            </config>
            <pd:inputBindings>
                <pfx2:LogRequest>
                    <ns4:Header>
                        <ns4:ApplicationID>
                            <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ns4:ApplicationID>
                        <ns4:ComponentName>
                            <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/BusinessProcesses/Services/IncidentManagement/QueryIncidents/ComponentName"/>
                        </ns4:ComponentName>
                        <ns4:Hostname>
                            <xsl:value-of select="BW:getHostName()"/>
                        </ns4:Hostname>
                        <ns4:Timestamp>
                            <xsl:value-of select="current-dateTime()"/>
                        </ns4:Timestamp>
                        <ns4:TransactionDomain>
                            <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                        </ns4:TransactionDomain>
                        <ns4:TransactionType>
                            <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns2:ProcessContext/ProcessId))"/>
                        </ns4:TransactionType>
                        <ns4:TransactionID>
                            <xsl:value-of select="$GetTransactionID/GUID/TransactionID"/>
                        </ns4:TransactionID>
                        <ns4:Message>
                            <xsl:value-of select="tib:render-xml($Call_BPI_IncidentManagement_QueryIncidents/*)"/>
                        </ns4:Message>
                    </ns4:Header>
                    <TimeDuration>
                        <xsl:value-of select="tib:timestamp()-$GetTransactionID/GUID/StartTimeStamp"/>
                    </TimeDuration>
                    <Category>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                    </Category>
                    <Status>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_RES_SENT"/>
                    </Status>
                    <Audit>
                        <xsl:value-of select="0"/>
                    </Audit>
                </pfx2:LogRequest>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate Error">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>550</pd:x>
            <pd:y>179</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns:ActivityInput/>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="Generate_Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>939</pd:x>
        <pd:y>379</pd:y>
        <config>
            <faultName>Fault</faultName>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <data>
                    <pfx3:faultMessage>
                        <fault>
                            <pfx4:FaultType>
                                <pfx4:type>
                                    <xsl:value-of select="&quot;Technical&quot;"/>
                                </pfx4:type>
                                <pfx4:code>
                                    <xsl:value-of select="$SetContext/Fault/faultcode"/>
                                </pfx4:code>
                                <pfx4:description>
                                    <xsl:value-of select="$SetContext/Fault/faultstring"/>
                                </pfx4:description>
                                <pfx4:sourceSystem>
                                    <xsl:value-of select="$SetContext/Fault/faultfactor"/>
                                </pfx4:sourceSystem>
                                <pfx4:extErrorCode>
                                    <xsl:value-of select="$SetContext/Fault/faultcode"/>
                                </pfx4:extErrorCode>
                                <pfx4:detail>
                                    <xsl:value-of select="$SetContext/Fault/faultstring"/>
                                </pfx4:detail>
                            </pfx4:FaultType>
                        </fault>
                    </pfx3:faultMessage>
                </data>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SetContext">
        <pd:type>com.tibco.ae.tools.palettes.servicepalette.SetContextActivity</pd:type>
        <pd:resourceType>service.activity.setContext</pd:resourceType>
        <pd:x>708</pd:x>
        <pd:y>380</pd:y>
        <config>
            <variableConfig>/CommonResources/Context/Internal/EAIFaultContext.contextResource</variableConfig>
            <showResult>true</showResult>
        </config>
        <pd:inputBindings>
            <xsl:choose>
                <xsl:when test="exists($Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType) and string-length($Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType)>0">
                    <Fault>
                        <faultcode>
                            <xsl:value-of select="$Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType/pfx4:code"/>
                        </faultcode>
                        <faultstring>
                            <xsl:value-of select="$Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType/pfx4:description"/>
                        </faultstring>
                        <faultfactor>
                            <xsl:value-of select="$Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType/pfx4:sourceSystem"/>
                        </faultfactor>
                    </Fault>
                </xsl:when>
                <xsl:otherwise>
                    <Fault>
                        <faultcode>
                            <xsl:value-of select="$ErrorHandler/pfx:ExceptionRequest/ExceptionCode"/>
                        </faultcode>
                        <faultstring>
                            <xsl:value-of select="$ErrorHandler/pfx:ExceptionRequest/StackTrace"/>
                        </faultstring>
                        <faultfactor>
                            <xsl:value-of select="&quot;Technical&quot;"/>
                        </faultfactor>
                    </Fault>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>GetContext</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetContext</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>ErrorHandler</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorHandler</pd:from>
        <pd:to>ErrorLog</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>ErrorHandler</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-52429</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>ErrorLog</pd:to>
        <pd:xpathDescription>Fault</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType) and string-length($Call_BPI_IncidentManagement_QueryIncidents/pfx4:FaultType)&gt;0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorLog</pd:from>
        <pd:to>SetContext</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SetContext</pd:from>
        <pd:to>Generate_Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:label>
        <pd:name>Label</pd:name>
        <pd:description>QueryIncident Implementation</pd:description>
        <pd:x>981</pd:x>
        <pd:y>17</pd:y>
        <pd:width>279</pd:width>
        <pd:height>33</pd:height>
        <pd:fontColor>-16777216</pd:fontColor>
        <pd:color>-13382656</pd:color>
        <pd:type>solid</pd:type>
        <pd:thickness>2</pd:thickness>
        <pd:fade>true</pd:fade>
    </pd:label>
</pd:ProcessDefinition>