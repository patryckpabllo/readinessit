<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx16="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx15="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Res" xmlns:pfx14="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pfx13="http://www.tibco.com/ns/no_namespace_schema_location/CDM/CDM.xsd" xmlns:pfx12="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:pfx11="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" xmlns:pfx10="http://www.siebel.com/xml/MOZ1%20Error%20Log%20Res" xmlns:zainesbcustom="java://GenUUID" xmlns:pfx19="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerReq.xsd" xmlns:pfx18="http://schemas.tibco.com/bw/plugins/jms/5.0/jmsExceptions" xmlns:pfx17="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx52="http://www.zain.com/ZESB/Services/GetUsage" xmlns:ns16="http://www.ericsson.com/CDM/telecom/Header" xmlns:pfx51="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/DataInquiries/DataInquiriesResponse.xsd" xmlns:zainesbcustom1="java://com.commonresources.utilities.CustomFunctions" xmlns:ns17="http://www.ericsson.com/CDM/telecom/Response" xmlns:pfx50="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/GetOffersRequest.xsd" xmlns:ns14="http://xmlns.zain.com/BSS/ESB/CDM/Base" xmlns:ns15="http://www.ericsson.com/CDM/telecom/SubscriberAssets" xmlns:ns18="http://www.Zain.com/schemas/CommonResources/SharedVariables/ESBOfferMapping.xsd" xmlns:ns111="http://www.siebel.com/xml/MOZ1%20Serv%20Account%20Creation%20Res" xmlns:format="java://MSISDNFormatter" xmlns:ns12="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:ns13="http://schemas.tibco.com/bw/plugins/xml/5.0/xmlExceptions" xmlns:pfx="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns10="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:ns11="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx48="http://www.Zain.com/schemas/BusinessSchemas/Services/Query/GetUsage.xsd" xmlns:pfx49="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" xmlns:pfx46="http://www.zain.com/ZESB/Services/GetUsage/Types" xmlns:pfx47="http://www.zain.com/ZESB/Services/Query/GetUsage.xsd" xmlns:pfx44="http://www.zain.com/ZESB/Services/Query/GetUsageDetails.xsd" xmlns:pfx45="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/GetUsageDetails.xsd" xmlns:pfx42="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/SalesChannelsInbound.xsd" xmlns:pfx43="http://www.zain.com/ZESB/Services/SalesChannels/Types" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:pfx41="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/Common/NumberReservationResponse.xsd" xmlns:pfx40="http://www.zain.com/ZESB/Services/NumberReservation/Types" xmlns:pfx39="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/Common/NumberReservationRequest.xsd" xmlns:pfx31="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/CreateCustomerReq.xsd" xmlns:pfx5="http://xmlns.example.com/1323156482391/OperationImpl" xmlns:pfx32="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/CreateCustomerRes.xsd" xmlns:pfx4="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Res" xmlns:pfx33="http://www.zain.com/ZESB/Services/eAccountManagement" xmlns:pfx3="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx2="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Req" xmlns:pfx34="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:pfx9="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" xmlns:pfx35="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" xmlns:pfx36="http://www.zain.com/ZESB/Services/eAccountManagement/Types" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XML/AccountCreationReq_13Jan2012.xsd" xmlns:pfx7="http://www.tibco.com/pe/SignalInActivitySchema" xmlns:pfx37="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:pfx6="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/contactPerson" xmlns:pfx38="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx30="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetPaymentRes.xsd" xmlns:ns9="http://www.tibco.com/pe/EngineTypes" xmlns:ns5="www.tibco.com/createcustomer" xmlns:ns6="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:ns7="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:ns8="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/address" xmlns:ns1="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customer" xmlns:ns4="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/portfolio" xmlns:pfx28="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceReq.xsd" xmlns:pfx29="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceRes.xsd" xmlns:ns3="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/billingAccount" xmlns:ns0="www.tibco.com/plugin/Sleep" xmlns:pfx22="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceRes.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx23="http://www.siebel.com/xml/MOZ1%20Customer%20Bill%20Cycle%20Update%20Req" xmlns:pfx20="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerRes.xsd" xmlns:pfx21="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceReq.xsd" xmlns:pfx26="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMReq.xsd" xmlns:pfx27="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMRes.xsd" xmlns:pfx24="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillCycleUpdateReq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pfx25="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceReq1.xsd">
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Req" schemaLocation="/BusinessSchemas/GW/PROV/XSDs/CreateCustomerReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" schemaLocation="/CDM/customerAccount.xsd"/>
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Res" schemaLocation="/SharedResources/XML/AccountCreationRes_12Jan2012.xsd"/>
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Error%20Log%20Res" schemaLocation="/SharedResources/XML/ErrorLog_20Jan2012.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" schemaLocation="/CDM/Zain_EAIV2.3.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XML/AccountCreationReq_13Jan2012.xsd" schemaLocation="/SharedResources/XML/AccountCreationReq_13Jan2012.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" schemaLocation="/CDM/Zain_EAIV2.8.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" schemaLocation="/BusinessSchemas/Common/CLE/ExceptionRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" schemaLocation="/CDM/CDM.xsd"/>
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Res" schemaLocation="/BusinessSchemas/GW/CRM/Provisioning/XSDs/AccountCreationRes.xsd"/>
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Customer%20Bill%20Cycle%20Update%20Req" schemaLocation="/BusinessSchemas/GW/CRM/Modification/XSDs/BillCycleUpdateReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillCycleUpdateReq.xsd" schemaLocation="/BusinessSchemas/Services/Modification/BillCycleUpdate/BillCycleUpdateReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceReq.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetInvoice/GetInvoiceReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceRes.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetInvoice/GetInvoiceRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMReq.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetInvoice/GetInvoiceCDMReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceReq.xsd" schemaLocation="/BusinessWSDLs/Services/Query/GetInvoice/GetInvoiceReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMRes.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetInvoice/GetInvoiceCDMRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceRes.xsd" schemaLocation="/BusinessWSDLs/Services/Query/GetInvoice/GetInvoiceRes.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/CreateCustomerReq.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateCustomer/CreateCustomerReq.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/CreateCustomerRes.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateCustomer/CreateCustomerRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" schemaLocation="/BusinessSchemas/Services/Modification/eAccountManager/eAccountManagerRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" schemaLocation="/BusinessSchemas/Services/Modification/eAccountManager/eAccountManagerResponse.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/eAccountManagement/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/eAccountManagementInbound/eAccountManagementInbound.wsdl"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/NumberReservation/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/NumberReservation/NumberReservationInbound.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/Common/NumberReservationResponse.xsd" schemaLocation="/BusinessSchemas/Services/Applications/Common/NumberReservation/NumberReservationResponse.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/Common/NumberReservationRequest.xsd" schemaLocation="/BusinessSchemas/Services/Applications/Common/NumberReservation/NumberReservationRequest.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/SalesChannels/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/SalesChannels/SalesChannelsInbound.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/SalesChannelsInbound.xsd" schemaLocation="/BusinessSchemas/Services/Query/SalesChannelsInbound/SalesChannelsInbound.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/Query/GetUsageDetails.xsd" schemaLocation="/BusinessSchemas/Services/Applications/Common/Query/GetUsageDetails/GetUsageDetails.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/GetUsageDetails.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetUsageDetails/GetUsageDetails.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/Query/GetUsage.xsd" schemaLocation="/BusinessSchemas/Services/Applications/Common/Query/GetUsage/GetUsage.xsd"/>
    <xsd:import namespace="http://www.Zain.com/schemas/BusinessSchemas/Services/Query/GetUsage.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetUsage/GetUsage.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/GetUsage/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/GetUsage/GetUsage.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/DataInquiries/DataInquiriesResponse.xsd" schemaLocation="/BusinessSchemas/Services/Query/DataInquiries/DataInquiriesResponse.xsd"/>
    <xsd:import namespace="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" schemaLocation="/CDM/ZainKWFault.xsd"/>
    <wsdl:import namespace="http://xmlns.example.com/1323156482391/OperationImpl" location="/SharedResources/WSDL/BscsWsdl.wsdl"/>
    <wsdl:import namespace="http://www.zain.com/ZESB/Services/eAccountManagement" location="/BusinessWSDLS/Services/WSDLS/eAccountManagementInbound/eAccountManagementInbound.wsdl"/>
    <wsdl:import namespace="http://www.zain.com/ZESB/Services/GetUsage" location="/BusinessWSDLS/Services/WSDLS/GetUsage/GetUsage.wsdl"/>
    <pd:name>BusinessProcesses/Services/Common/GetUsage/HelperProcess/ESI_Call_GetDataUsage.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="TransactionId" type="xsd:string"/>
                    <xsd:element name="StartTimeStamp" type="xsd:string"/>
                    <xsd:element ref="pfx46:GetUsageInput"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>110</pd:startX>
    <pd:startY>176</pd:startY>
    <pd:returnBindings>
        <xsl:copy-of select="$MapFinalResponse/pfx46:GetUsageOutput"/>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx46:GetUsageOutput"/>
    <pd:endX>1561</pd:endX>
    <pd:endY>146</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1318823885551</pd:targetNamespace>
    <pd:activity name="Common_EAI_EMSSendReceiveDataPolicies">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>362</pd:x>
        <pd:y>147</pd:y>
        <config>
            <processName>/CommonProcesses/HelperProcesses/Common_EAI_EMSSendReceive.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <MessageBody>
                    <xsl:value-of select="tib:render-xml($NativeToCDM/pfx50:GetOfferRequest)"/>
                </MessageBody>
                <TransactionID>
                    <xsl:value-of select="$Start/root/TransactionId"/>
                </TransactionID>
                <EMS_DestinationQueue>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/BusinessProcesses/Services/Common/GetUsage/GetDataPolicies/BPI_RequestQueue"/>
                </EMS_DestinationQueue>
                <TransactionDomain>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                </TransactionDomain>
                <TransactionType>
                    <xsl:value-of select="zainesbcustom1:getTransactionType(BW:getCurrentProcessName($_processContext/ns9:ProcessContext/ProcessId))"/>
                </TransactionType>
                <ReplyToEngineID>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/EngineID"/>
                </ReplyToEngineID>
                <ReplyToDeployment>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/Deployment"/>
                </ReplyToDeployment>
                <StartTimeStamp>
                    <xsl:value-of select="$Start/root/StartTimeStamp"/>
                </StartTimeStamp>
                <RequestTimeOut>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/BusinessProcesses/Services/Common/UsageDetails/BilledUsage/JMS_Time_out"/>
                </RequestTimeOut>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate Error">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>1177</pd:x>
        <pd:y>265</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx:ActivityInput>
                <message>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonErrors/CommonQueryNoDataFoundErrorDesc"/>
                </message>
                <messageCode>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonErrors/CommonQueryNoDataFoundErrorCode"/>
                </messageCode>
            </pfx:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetDADetails">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>649</pd:x>
        <pd:y>253</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariables/Internal/ESB_DAMapping.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="GetOfferDetails">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>587</pd:x>
        <pd:y>146</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariables/Internal/ESBOfferMapping.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Log_CDM_Request">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>222</pd:x>
        <pd:y>146</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <pfx12:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/BusinessProcesses/Services/Common/GetUsage/GetDataUsage/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom1:getTransactionType(BW:getCurrentProcessName($_processContext/ns9:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <ns6:TransactionID>
                        <xsl:value-of select="$Start/root/TransactionId"/>
                    </ns6:TransactionID>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="tib:render-xml($NativeToCDM/pfx50:GetOfferRequest)"/>
                    </ns6:Message>
                </ns6:Header>
                <TimeDuration>
                    <xsl:value-of select="$Start/root/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_REQ_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </pfx12:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log_CDM_Response">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1437</pd:x>
        <pd:y>148</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <pfx12:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/BusinessProcesses/Services/Common/GetUsage/GetDataUsage/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom1:getTransactionType(BW:getCurrentProcessName($_processContext/ns9:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <ns6:TransactionID>
                        <xsl:value-of select="$Start/root/TransactionId"/>
                    </ns6:TransactionID>
                    <ns6:InterfaceID>
                        <xsl:value-of select="$Start/root/pfx46:GetUsageInput/pfx46:MSISDN"/>
                    </ns6:InterfaceID>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="tib:render-xml($MapFinalResponse/pfx46:GetUsageOutput)"/>
                    </ns6:Message>
                </ns6:Header>
                <TimeDuration>
                    <xsl:value-of select="$Start/root/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_RES_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </pfx12:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapFinalResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1176</pd:x>
        <pd:y>149</pd:y>
        <config>
            <element ref="pfx46:GetUsageOutput"/>
        </config>
        <pd:inputBindings>
            <pfx46:GetUsageOutput>
                <xsl:if test="(exists($Start/root/pfx46:GetUsageInput/pfx46:Filter[pfx46:Type='Data'])) and count($ParseResponse/pfx51:DataInquiriesResponse/ns15:SubscriberAssets/ns15:ListOfAssets/ns15:Asset)>0">
                    <xsl:for-each select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service">
                        <xsl:if test="{--upper-case($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:OFFER_TYPE)='DATA' and $GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:SHOW_OFFER_FLAG='Y'--}&#xA;contains(pfx46:Quota[1]/pfx46:ID,'Data')">
                            <pfx46:RatingInfo>
                                <pfx46:Service>
                                    <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Data'))&#xA;then&#xA;&quot;Data&quot;&#xA;else if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Voice&quot;&#xA;else if(contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS'))&#xA;then&#xA;&quot;SMS&quot;&#xA;else if(contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS'))&#xA;then&#xA;&quot;MMS&quot;&#xA;else&#xA;&quot;Data&quot;"/>
                                </pfx46:Service>
                                <pfx46:ChargingType>
                                    <xsl:value-of select="if(string-length(current()/pfx46:ID)>4)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:CHARGING_TYPE&#xA;else&#xA;&quot;Data&quot;"/>
                                </pfx46:ChargingType>
                                <pfx46:Product>
                                    <xsl:value-of select="substring-before(current()/pfx46:ID,'T')"/>
                                </pfx46:Product>
                                <pfx46:Used>
                                    <xsl:attribute name="unit">
                                        <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')))&#xA;then&#xA;&quot;Count&quot;&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS&#xA;else if(contains(current()/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else&#xA;&quot;Count&quot;"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0 and string-length(current()/pfx46:Quota[1]/pfx46:Remaining)) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB')  then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)  else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB')&#xA; then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;current()/pfx46:Quota[1]/pfx46:Used"/>
                                </pfx46:Used>
                                <pfx46:Threshold>
                                    <xsl:attribute name="unit">
                                        <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')))&#xA;then&#xA;&quot;Count&quot;&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS&#xA;else if(contains(current()/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else&#xA;&quot;Count&quot;"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="if(string-length($GetDa-Offer-Map/root/group[OFFERID=current()/pfx46:Quota/pfx46:ID]/DA_VALUES)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024)*(1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then (current()/pfx46:Quota[1]/pfx46:Threshold) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;0"/>
                                </pfx46:Threshold>
                                <pfx46:StartDate>
                                    <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate"/>
                                </pfx46:StartDate>
                                <pfx46:EndDate>
                                    <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate"/>
                                </pfx46:EndDate>
                            </pfx46:RatingInfo>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:if>
                <xsl:if test="(exists($Start/root/pfx46:GetUsageInput/pfx46:Filter[pfx46:Type='Voice']) ) and count($ParseResponse/pfx51:DataInquiriesResponse/ns15:SubscriberAssets/ns15:ListOfAssets/ns15:Asset)>0">
                    <xsl:for-each select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service">
                        <xsl:if test="contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice') and upper-case(current()/pfx46:Quota[1]/pfx46:ID)!=&quot;Data&quot;">
                            <pfx46:RatingInfo>
                                <pfx46:Service>
                                    <xsl:value-of select="&quot;Voice&quot;"/>
                                </pfx46:Service>
                                <pfx46:ChargingType>
                                    <xsl:value-of select="if(string-length(current()/pfx46:ID)>4)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:CHARGING_TYPE&#xA;else&#xA;&quot;Data&quot;"/>
                                </pfx46:ChargingType>
                                <pfx46:Product>
                                    <xsl:value-of select="substring-before(current()/pfx46:ID,'T')"/>
                                </pfx46:Product>
                                <pfx46:Used>
                                    <xsl:attribute name="unit">
                                        <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')))&#xA;then&#xA;&quot;Count&quot;&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS&#xA;else if(contains(current()/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else&#xA;&quot;Count&quot;"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0 and string-length(current()/pfx46:Quota[1]/pfx46:Remaining)) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB')  then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)  else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB')&#xA; then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;current()/pfx46:Quota[1]/pfx46:Used"/>
                                </pfx46:Used>
                                <pfx46:Threshold>
                                    <xsl:attribute name="unit">
                                        <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')))&#xA;then&#xA;&quot;Count&quot;&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS&#xA;else if(contains(current()/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else&#xA;&quot;Count&quot;"/>
                                    </xsl:attribute>
                                    <xsl:value-of select="if(string-length($GetDa-Offer-Map/root/group[OFFERID=current()/pfx46:Quota/pfx46:ID]/DA_VALUES)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024)*(1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then (current()/pfx46:Quota[1]/pfx46:Threshold) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;0"/>
                                </pfx46:Threshold>
                                <pfx46:StartDate>
                                    <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate"/>
                                </pfx46:StartDate>
                                <pfx46:EndDate>
                                    <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate"/>
                                </pfx46:EndDate>
                            </pfx46:RatingInfo>
                        </xsl:if>
                    </xsl:for-each>
                </xsl:if>
                <xsl:if test="(exists($Start/root/pfx46:GetUsageInput/pfx46:Filter[pfx46:Type='SMS']))">
                    <xsl:if test="1=1">
                        <xsl:for-each select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service">
                            <xsl:if test="contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')">
                                <pfx46:RatingInfo>
                                    <pfx46:Service>
                                        <xsl:value-of select="&quot;SMS&quot;"/>
                                    </pfx46:Service>
                                    <pfx46:ChargingType>
                                        <xsl:value-of select="if(string-length(current()/pfx46:ID)>4)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:CHARGING_TYPE&#xA;else&#xA;&quot;Data&quot;"/>
                                    </pfx46:ChargingType>
                                    <pfx46:Product>
                                        <xsl:value-of select="substring-before(current()/pfx46:ID,'T')"/>
                                    </pfx46:Product>
                                    <pfx46:Used>
                                        <xsl:attribute name="unit">
                                            <xsl:value-of select="'Count'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0 and string-length(current()/pfx46:Quota[1]/pfx46:Remaining)) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB')  then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)  else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB')&#xA; then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;current()/pfx46:Quota[1]/pfx46:Used"/>
                                    </pfx46:Used>
                                    <pfx46:Threshold>
                                        <xsl:attribute name="unit">
                                            <xsl:value-of select="'Count'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="if(string-length($GetDa-Offer-Map/root/group[OFFERID=current()/pfx46:Quota/pfx46:ID]/DA_VALUES)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024)*(1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then (current()/pfx46:Quota[1]/pfx46:Threshold) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;0"/>
                                    </pfx46:Threshold>
                                    <xsl:if test="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate">
                                        <pfx46:StartDate>
                                            <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate"/>
                                        </pfx46:StartDate>
                                    </xsl:if>
                                    <xsl:if test="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate">
                                        <pfx46:EndDate>
                                            <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate"/>
                                        </pfx46:EndDate>
                                    </xsl:if>
                                </pfx46:RatingInfo>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:if>
                <xsl:if test="(exists($Start/root/pfx46:GetUsageInput/pfx46:Filter[pfx46:Type='MMS']))">
                    <xsl:if test="1=1">
                        <xsl:for-each select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service">
                            <xsl:if test="contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')">
                                <pfx46:RatingInfo>
                                    <pfx46:Service>
                                        <xsl:value-of select="&quot;MMS&quot;"/>
                                    </pfx46:Service>
                                    <pfx46:ChargingType>
                                        <xsl:value-of select="if(string-length(current()/pfx46:ID)>4)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:CHARGING_TYPE&#xA;else&#xA;&quot;Data&quot;"/>
                                    </pfx46:ChargingType>
                                    <pfx46:Product>
                                        <xsl:value-of select="substring-before(current()/pfx46:ID,'T')"/>
                                    </pfx46:Product>
                                    <pfx46:Used>
                                        <xsl:attribute name="unit">
                                            <xsl:value-of select="'Count'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0 and string-length(current()/pfx46:Quota[1]/pfx46:Remaining)) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB')  then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)  else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB')&#xA; then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;current()/pfx46:Quota[1]/pfx46:Used"/>
                                    </pfx46:Used>
                                    <pfx46:Threshold>
                                        <xsl:attribute name="unit">
                                            <xsl:value-of select="'Count'"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="if(string-length($GetDa-Offer-Map/root/group[OFFERID=current()/pfx46:Quota/pfx46:ID]/DA_VALUES)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024)*(1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='GB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='TB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='MB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:UNITS='KB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then (current()/pfx46:Quota[1]/pfx46:Threshold) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;0"/>
                                    </pfx46:Threshold>
                                    <xsl:if test="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate">
                                        <pfx46:StartDate>
                                            <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate"/>
                                        </pfx46:StartDate>
                                    </xsl:if>
                                    <xsl:if test="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate">
                                        <pfx46:EndDate>
                                            <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate"/>
                                        </pfx46:EndDate>
                                    </xsl:if>
                                </pfx46:RatingInfo>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:if>
                <xsl:if test="(exists($Start/root/pfx46:GetUsageInput/pfx46:Filter[pfx46:Type=''])or not(exists($Start/root/pfx46:GetUsageInput/pfx46:Filter)))">
                    <xsl:if test="1=1">
                        <xsl:for-each select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service">
                            <xsl:if test="(upper-case($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:OFFER_TYPE)='DATA') or&#xA;(upper-case($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:OFFER_TYPE)!='DATA')">
                                <pfx46:RatingInfo>
                                    <pfx46:Service>
                                        <xsl:value-of select="{-- Used for mapping the Service with the help of Units --}&#xA;&#xA;if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice') or contains(current()/pfx46:Quota[1]/pfx46:ID,'Time'))&#xA;then&#xA;&quot;Voice&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS') and  (contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS'))) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'Count')))&#xA;then&#xA;&quot;SMS/MMS&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')) )&#xA;then&#xA;&quot;SMS&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')) )&#xA;then&#xA;&quot;MMS&quot;&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS)>0)&#xA;then&#xA;&quot;Data&quot;&#xA;else if(contains(current()/pfx46:ID,'Voice') or contains(current()/pfx46:ID,'Mins') or contains(current()/pfx46:ID,'Call'))&#xA;then&#xA;&quot;Voice&quot;&#xA;else&#xA;&quot;MMS&quot;"/>
                                    </pfx46:Service>
                                    <pfx46:ChargingType>
                                        <xsl:value-of select="if(string-length(substring-after(current()/pfx46:ID,'T-'))>4)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=tib:left(substring-after(current()/pfx46:ID,'T-'), 4)]/ns18:CHARGING_TYPE&#xA;else if&#xA;(string-length(substring-after(current()/pfx46:ID,'T-'))&lt;=4)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:CHARGING_TYPE&#xA;else&#xA;&quot;Data&quot;"/>
                                    </pfx46:ChargingType>
                                    <pfx46:Product>
                                        <xsl:value-of select="substring-before(current()/pfx46:ID,'T')"/>
                                    </pfx46:Product>
                                    <pfx46:Used>
                                        <xsl:attribute name="unit">
                                            <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice') or contains(current()/pfx46:Quota[1]/pfx46:ID,'Time'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'Count')))&#xA;then&#xA;&quot;Count&quot;&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=tib:left(substring-after(current()/pfx46:ID,'T-'),4)]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=tib:left(substring-after(current()/pfx46:ID,'T-'),4)]/ns18:UNITS&#xA;else if(contains(current()/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else&#xA;&quot;Count&quot;"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice') or contains(current()/pfx46:Quota[1]/pfx46:ID,'Time') or contains(current()/pfx46:Quota[1]/pfx46:ID,'Count')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'-')]/ns18:UNITS='GB')  then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)  else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'-')]/ns18:UNITS='TB')&#xA; then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'-')]/ns18:UNITS='MB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'-')]/ns18:UNITS='KB') then (current()/pfx46:Quota[1]/pfx46:Remaining)*(1div 1024) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0 and string-length(current()/pfx46:Quota[1]/pfx46:Remaining)) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then ceiling((current()/pfx46:Quota[1]/pfx46:Threshold - current()/pfx46:Quota[1]/pfx46:Remaining)) else&#xA;current()/pfx46:Quota[1]/pfx46:Used"/>
                                    </pfx46:Used>
                                    <pfx46:Threshold>
                                        <xsl:attribute name="unit">
                                            <xsl:value-of select="if(contains(current()/pfx46:Quota[1]/pfx46:ID,'Voice') or contains(current()/pfx46:Quota[1]/pfx46:ID,'Time'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else if ((contains(current()/pfx46:Quota[1]/pfx46:ID,'SMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'MMS')) or (contains(current()/pfx46:Quota[1]/pfx46:ID,'Count')))&#xA;then&#xA;&quot;Count&quot;&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=substring-after(current()/pfx46:ID,'T-')]/ns18:UNITS&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=tib:left(substring-after(current()/pfx46:ID,'T-'),4)]/ns18:UNITS)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=tib:left(substring-after(current()/pfx46:ID,'T-'),4)]/ns18:UNITS&#xA;else if(contains(current()/pfx46:ID,'Voice'))&#xA;then&#xA;&quot;Minutes&quot;&#xA;else&#xA;&quot;Count&quot;"/>
                                        </xsl:attribute>
                                        <xsl:value-of select="if(string-length($GetDa-Offer-Map/root/group[OFFERID=current()/pfx46:Quota/pfx46:ID]/DA_VALUES)>0) then current()/pfx46:Quota[1]/pfx46:ID else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='GB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='TB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024)*(1div 1024)*(1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='MB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024)*(1div 1024) else&#xA;if (((current()/pfx46:Quota[1]/pfx46:Threshold)>0)  and ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='KB' )) then current()/pfx46:Quota[1]/pfx46:Threshold *(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='GB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='TB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='MB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024)*(1div 1024) else&#xA;if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=(substring-before(current()/pfx46:Quota[1]/pfx46:ID,'-'))]/ns18:UNITS='KB') then ($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/pfx46:Quota/pfx46:ID]/ns18:THRESHOLD)*(1div 1024) else&#xA;if(contains(current()/pfx46:ID,'Voice')) then (current()/pfx46:Quota[1]/pfx46:Threshold) else&#xA;if(string-length(current()/pfx46:Quota[1]/pfx46:Threshold)>0) then current()/pfx46:Quota[1]/pfx46:Threshold else&#xA;0"/>
                                    </pfx46:Threshold>
                                    <xsl:if test="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate">
                                        <pfx46:StartDate>
                                            <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingStartDate"/>
                                        </pfx46:StartDate>
                                    </xsl:if>
                                    <xsl:if test="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate">
                                        <pfx46:EndDate>
                                            <xsl:value-of select="$CDMToNativeResponse/pfx46:GetDataPoliciesOutput/pfx46:Service[current()/pfx46:ID=pfx46:ID]/pfx46:BillingEndDate"/>
                                        </pfx46:EndDate>
                                    </xsl:if>
                                </pfx46:RatingInfo>
                            </xsl:if>
                        </xsl:for-each>
                    </xsl:if>
                </xsl:if>
            </pfx46:GetUsageOutput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="NativeToCDM">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>116</pd:x>
        <pd:y>287</pd:y>
        <config>
            <element ref="pfx50:GetOfferRequest"/>
        </config>
        <pd:inputBindings>
            <pfx50:GetOfferRequest>
                <pfx50:GetOfferReq>
                    <ns11:BusinessMessageHeader>
                        <ExternalTransactionID>
                            <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ExternalTransactionID>
                        <ApplicationID>
                            <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ApplicationID>
                        <ComponentName>
                            <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/BusinessProcesses/Services/Common/GetUsage/GetDataUsage/ComponentName"/>
                        </ComponentName>
                        <Hostname>
                            <xsl:value-of select="BW:getHostName()"/>
                        </Hostname>
                        <TransactionDomain>
                            <xsl:value-of select="$_globalVariables/ns8:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                        </TransactionDomain>
                        <TransactionType>
                            <xsl:value-of select="zainesbcustom1:getTransactionType(BW:getCurrentProcessName($_processContext/ns9:ProcessContext/ProcessId))"/>
                        </TransactionType>
                        <TransactionID>
                            <xsl:value-of select="$Start/root/TransactionId"/>
                        </TransactionID>
                    </ns11:BusinessMessageHeader>
                    <ns11:Subscriber>
                        <ServiceNo>
                            <xsl:value-of select="format:FormatMSISDN($Start/root/pfx46:GetUsageInput/pfx46:MSISDN, $_globalVariables/ns8:GlobalVariables/MSISDNBaseLength)"/>
                        </ServiceNo>
                    </ns11:Subscriber>
                </pfx50:GetOfferReq>
            </pfx50:GetOfferRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>922</pd:x>
        <pd:y>248</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Null-1">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>919</pd:x>
        <pd:y>148</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ParseResponse">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>488</pd:x>
        <pd:y>146</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term>
                <xsd:choice>
                    <xsd:element ref="pfx51:DataInquiriesResponse"/>
                    <xsd:element ref="pfx49:ErrorResponse"/>
                </xsd:choice>
            </term>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$Common_EAI_EMSSendReceiveDataPolicies/ResponseData"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParsingResponseError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>489</pd:x>
        <pd:y>275</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx:ActivityInput>
                <message>
                    <xsl:value-of select="$ParseResponse/pfx49:ErrorResponse/pfx49:Error_SourceErrDesc"/>
                </message>
                <messageCode>
                    <xsl:value-of select="$ParseResponse/pfx49:ErrorResponse/pfx49:Error_SourceErrCode"/>
                </messageCode>
            </pfx:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="CDMToNativeResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1047</pd:x>
        <pd:y>149</pd:y>
        <config>
            <element ref="pfx46:GetDataPoliciesOutput"/>
        </config>
        <pd:inputBindings>
            <pfx46:GetDataPoliciesOutput>
                <pfx46:IMSI>
                    <xsl:value-of select="$ParseResponse/pfx51:DataInquiriesResponse/ns15:SubscriberAssets/ns15:Subscriber/IMSI"/>
                </pfx46:IMSI>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$MapChargeType/pfx51:DataInquiriesResponse/ns15:SubscriberAssets/ns15:ListOfAssets/ns15:Asset">
                    <pfx46:Service>
                        <pfx46:ID>
                            <xsl:value-of select="concat(ns15:AssetID,'T-',current()/ns15:AssetAutoRenewalFlag)&#xA;{-- this is done to get the value of the id to query the Data  values--}"/>
                        </pfx46:ID>
                        <xsl:if test="$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:CHARGING_TYPE">
                            <pfx46:Type>
                                <xsl:value-of select="$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:CHARGING_TYPE"/>
                            </pfx46:Type>
                        </xsl:if>
                        <pfx46:BillingStartDate>
                            <xsl:value-of select="if(string-length(ns15:AssetStartDate)>0) then (current()/ns15:AssetStartDate)&#xA;else &quot;1970-01-01T04:00:00&quot;"/>
                        </pfx46:BillingStartDate>
                        <pfx46:BillingEndDate>
                            <xsl:value-of select="if(exists(ns15:AssetEndDate)) then current()/ns15:AssetEndDate&#xA;else&#xA;&quot;1970-01-01T04:00:00&quot;"/>
                        </pfx46:BillingEndDate>
                        <xsl:for-each select=".">
                            <pfx46:Quota>
                                <pfx46:ID>
                                    <xsl:value-of select="concat(current()/ns15:AssetAutoRenewalFlag,'-',current()/ns15:AssetsDescription)"/>
                                </pfx46:ID>
                                <pfx46:Used>
                                    <xsl:value-of select="if(string-length(ListOfServices/ns15:Service[1]/ns15:ServiceType)>0)&#xA;then&#xA;ListOfServices/ns15:Service[1]/ns15:ServiceType&#xA;else&#xA;0"/>
                                </pfx46:Used>
                                <pfx46:Remaining>
                                    <xsl:value-of select="if(string-length(ListOfServices/ns15:Service[1]/ns15:ServiceVolume)>0)&#xA;then&#xA;ListOfServices/ns15:Service[1]/ns15:ServiceVolume&#xA;else if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetID]/ns18:THRESHOLD)>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetID]/ns18:THRESHOLD&#xA;else&#xA;0"/>
                                </pfx46:Remaining>
                                <pfx46:Threshold>
                                    <xsl:value-of select="if(string-length(ListOfServices/ns15:Service[1]/ns15:ServiceUnit)>0 and (current()/ListOfServices/ns15:Service/ns15:ServiceID=$GetDa-Offer-Map/root/group/DA_ID))&#xA;then&#xA;$GetDa-Offer-Map/root/group[DA_ID=current()/ListOfServices/ns15:Service[1]/ns15:ServiceID]/DA_VALUES&#xA;else if((string-length(ListOfServices/ns15:Service[1]/ns15:ServiceUnit)>1) and exists(ListOfServices/ns15:Service[1]/ns15:ServiceUnit))&#xA;then&#xA;ListOfServices/ns15:Service[1]/ns15:ServiceUnit&#xA;else if(string-length($GetDa-Offer-Map/root/group[OFFERID=current()/ns15:AssetID]/OFFERID)>0)&#xA;then&#xA;$GetDa-Offer-Map/root/group[DA_ID=current()/ns15:AssetID]/DA_VALUES&#xA;else if($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[current()/ListOfServices/ns15:Service/ns15:ServiceID=current()/ns15:AssetID]/ns18:THRESHOLD>0)&#xA;then&#xA;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[current()/ListOfServices/ns15:Service/ns15:ServiceID=current()/ns15:AssetID]/ns18:THRESHOLD&#xA;else&#xA;0"/>
                                </pfx46:Threshold>
                            </pfx46:Quota>
                        </xsl:for-each>
                    </pfx46:Service>
                </xsl:for-each>
                <xsl:if test="$ParseResponse/pfx51:DataInquiriesResponse/pfx51:DowngradeDate">
                    <pfx46:DowngradeDate>
                        <xsl:value-of select="$ParseResponse/pfx51:DataInquiriesResponse/pfx51:DowngradeDate"/>
                    </pfx46:DowngradeDate>
                </xsl:if>
            </pfx46:GetDataPoliciesOutput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="No Data Found">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>1085</pd:x>
        <pd:y>248</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <pfx:ActivityInput>
                <message>
                    <xsl:value-of select="&quot;No Data Found&quot;"/>
                </message>
                <messageCode>
                    <xsl:value-of select="&quot;ZESB -1001&quot;"/>
                </messageCode>
            </pfx:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetDa-Offer-Map">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>701</pd:x>
        <pd:y>146</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariables/Internal/Shared Variable.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="MapChargeType">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>807</pd:x>
        <pd:y>147</pd:y>
        <config>
            <element>
                <xsd:choice>
                    <xsd:element ref="pfx51:DataInquiriesResponse"/>
                    <xsd:element ref="pfx49:ErrorResponse"/>
                </xsd:choice>
            </element>
        </config>
        <pd:inputBindings>
            <pfx51:DataInquiriesResponse>
                <xsl:copy-of select="$ParseResponse/pfx51:DataInquiriesResponse/ns16:BusinessMessageHeader"/>
                <xsl:copy-of select="$ParseResponse/pfx51:DataInquiriesResponse/ns17:Response"/>
                <ns15:SubscriberAssets>
                    <ns15:ListOfAssets>
                        <xsl:for-each select="$ParseResponse/pfx51:DataInquiriesResponse/ns15:SubscriberAssets/ns15:ListOfAssets/ns15:Asset">
                            <ns15:Asset>
                                <xsl:if test="ns15:AssetID">
                                    <ns15:AssetID>
                                        <xsl:value-of select="ns15:AssetID"/>
                                    </ns15:AssetID>
                                </xsl:if>
                                <xsl:if test="ns15:AssetType">
                                    <ns15:AssetType>
                                        <xsl:value-of select="ns15:AssetType"/>
                                    </ns15:AssetType>
                                </xsl:if>
                                <ns15:AssetsDescription>
                                    <xsl:value-of select="if((current()/ListOfServices/ns15:Service/ns15:ServiceID!=current()/ns15:AssetAutoRenewalFlag) and string-length($GetDa-Offer-Map/root/group[DA_ID=current()/ListOfServices/ns15:Service/ns15:ServiceID]/DA_VALUES)>0)&#xA;then&#xA;$GetDADetails/root/Records[DA_ID=current()/ListOfServices/ns15:Service/ns15:ServiceID]/DA_DESCRIPTION&#xA;else&#xA;ns15:AssetsDescription"/>
                                </ns15:AssetsDescription>
                                <xsl:if test="ns15:AssetAutoRenewalFlag">
                                    <ns15:AssetAutoRenewalFlag>
                                        <xsl:value-of select="ns15:AssetAutoRenewalFlag"/>
                                    </ns15:AssetAutoRenewalFlag>
                                </xsl:if>
                                <xsl:for-each select="ListOfServices">
                                    <ListOfServices>
                                        <xsl:for-each select="ns15:Service">
                                            <xsl:if test="string-length(current()/ns15:ServiceID)>0">
                                                <ns15:Service>
                                                    <ns15:ServiceID>
                                                        <xsl:value-of select="ns15:ServiceID"/>
                                                    </ns15:ServiceID>
                                                    <xsl:if test="ns15:ServiceType">
                                                        <ns15:ServiceType>
                                                            <xsl:value-of select="ns15:ServiceType"/>
                                                        </ns15:ServiceType>
                                                    </xsl:if>
                                                    <xsl:if test="ns15:ServiceVolume">
                                                        <ns15:ServiceVolume>
                                                            <xsl:value-of select="ns15:ServiceVolume"/>
                                                        </ns15:ServiceVolume>
                                                    </xsl:if>
                                                    <xsl:if test="ns15:ServiceUnit">
                                                        <ns15:ServiceUnit>
                                                            <xsl:value-of select="ns15:ServiceUnit"/>
                                                        </ns15:ServiceUnit>
                                                    </xsl:if>
                                                </ns15:Service>
                                            </xsl:if>
                                        </xsl:for-each>
                                        <xsl:for-each select="..">
                                            <xsl:if test="not(exists(current()/ListOfServices/ns15:Service/ns15:ServiceID))">
                                                <ns15:Service>
                                                    <ns15:ServiceID>
                                                        <xsl:value-of select="current()/ns15:AssetAutoRenewalFlag"/>
                                                    </ns15:ServiceID>
                                                    <ns15:ServiceType>
                                                        <xsl:value-of select="'0'"/>
                                                    </ns15:ServiceType>
                                                    <ns15:ServiceVolume>
                                                        <xsl:value-of select="if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD)>0)&#xA;then&#xA;(&#xA;&#x9;&#x9;if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='GB' )) &#xA;&#x9;&#x9;&#x9;then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024)*(1div 1024)*(1div 1024) else&#xA;&#x9;&#x9;if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='TB' ))&#xA; &#x9;&#x9;&#x9;then&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024)*(1div 1024)*(1div 1024)*(1024) else&#xA;&#x9;&#x9;if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='MB' ))&#xA;&#x9;&#x9;&#x9; then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024)*(1div 1024) else&#xA;&#x9;&#x9; if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='KB' ))&#xA;&#x9;&#x9;&#x9; then&#xA;&#x9;&#x9; $GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024) else&#xA;&#x9;&#x9; $GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD ) else&#xA;0"/>
                                                    </ns15:ServiceVolume>
                                                    <ns15:ServiceUnit>
                                                        <xsl:value-of select="if(string-length($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD)>0)&#xA;then&#xA;(&#xA;&#x9;&#x9;if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='GB' )) &#xA;&#x9;&#x9;&#x9;then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024)*(1div 1024)*(1div 1024) else&#xA;&#x9;&#x9;if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='TB' ))&#xA; &#x9;&#x9;&#x9;then&#xA; &#x9;&#x9;&#x9;&#x9;&#x9;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024)*(1div 1024)*(1div 1024)*(1024) else&#xA;&#x9;&#x9;if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='MB' ))&#xA;&#x9;&#x9;&#x9; then &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024)*(1div 1024) else&#xA;&#x9;&#x9; if (($GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:UNITS='KB' ))&#xA;&#x9;&#x9;&#x9; then&#xA;&#x9;&#x9; $GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD *(1div 1024) else&#xA;&#x9;&#x9; $GetOfferDetails/ns18:ESBOfferMapping/ns18:Record/ns18:Records[ns18:OFFERID=current()/ns15:AssetAutoRenewalFlag]/ns18:THRESHOLD ) else&#xA;0"/>
                                                    </ns15:ServiceUnit>
                                                </ns15:Service>
                                            </xsl:if>
                                        </xsl:for-each>
                                    </ListOfServices>
                                </xsl:for-each>
                                <xsl:for-each select="ns15:Product">
                                    <ns15:Product>
                                        <xsl:if test="ns15:ProductName">
                                            <ns15:ProductName>
                                                <xsl:value-of select="ns15:ProductName"/>
                                            </ns15:ProductName>
                                        </xsl:if>
                                        <xsl:if test="ns15:ProductID">
                                            <ns15:ProductID>
                                                <xsl:value-of select="ns15:ProductID"/>
                                            </ns15:ProductID>
                                        </xsl:if>
                                    </ns15:Product>
                                </xsl:for-each>
                                <xsl:for-each select="ns15:Price">
                                    <ns15:Price>
                                        <xsl:if test="ns15:One-Time">
                                            <ns15:One-Time>
                                                <xsl:value-of select="ns15:One-Time"/>
                                            </ns15:One-Time>
                                        </xsl:if>
                                        <xsl:if test="ns15:Recurring">
                                            <ns15:Recurring>
                                                <xsl:value-of select="ns15:Recurring"/>
                                            </ns15:Recurring>
                                        </xsl:if>
                                        <xsl:if test="ns15:Unit">
                                            <ns15:Unit>
                                                <xsl:value-of select="ns15:Unit"/>
                                            </ns15:Unit>
                                        </xsl:if>
                                        <xsl:if test="ns15:RecurringFrequency">
                                            <ns15:RecurringFrequency>
                                                <xsl:value-of select="ns15:RecurringFrequency"/>
                                            </ns15:RecurringFrequency>
                                        </xsl:if>
                                    </ns15:Price>
                                </xsl:for-each>
                                <xsl:if test="ns15:AssetStartDate">
                                    <ns15:AssetStartDate>
                                        <xsl:value-of select="ns15:AssetStartDate"/>
                                    </ns15:AssetStartDate>
                                </xsl:if>
                                <xsl:if test="ns15:AssetEndDate">
                                    <ns15:AssetEndDate>
                                        <xsl:value-of select="ns15:AssetEndDate"/>
                                    </ns15:AssetEndDate>
                                </xsl:if>
                                <xsl:if test="ns15:AssetActionCode">
                                    <ns15:AssetActionCode>
                                        <xsl:value-of select="ns15:AssetActionCode"/>
                                    </ns15:AssetActionCode>
                                </xsl:if>
                                <xsl:if test="ns15:AssetActionCommand">
                                    <ns15:AssetActionCommand>
                                        <xsl:value-of select="ns15:AssetActionCommand"/>
                                    </ns15:AssetActionCommand>
                                </xsl:if>
                                <xsl:if test="ns15:AssetStatus">
                                    <ns15:AssetStatus>
                                        <xsl:value-of select="ns15:AssetStatus"/>
                                    </ns15:AssetStatus>
                                </xsl:if>
                                <xsl:if test="AssetStatusDescription">
                                    <AssetStatusDescription>
                                        <xsl:value-of select="AssetStatusDescription"/>
                                    </AssetStatusDescription>
                                </xsl:if>
                            </ns15:Asset>
                        </xsl:for-each>
                    </ns15:ListOfAssets>
                </ns15:SubscriberAssets>
                <xsl:if test="$ParseResponse/pfx51:DataInquiriesResponse/pfx51:DowngradeDate">
                    <pfx51:DowngradeDate>
                        <xsl:value-of select="$ParseResponse/pfx51:DataInquiriesResponse/pfx51:DowngradeDate"/>
                    </pfx51:DowngradeDate>
                </xsl:if>
            </pfx51:DataInquiriesResponse>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>ParseResponse</pd:from>
        <pd:to>ParsingResponseError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-39322</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($ParseResponse/pfx49:ErrorResponse) and string-length($ParseResponse/pfx49:ErrorResponse)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Common_EAI_EMSSendReceiveDataPolicies</pd:from>
        <pd:to>ParseResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>NativeToCDM</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log_CDM_Request</pd:from>
        <pd:to>Common_EAI_EMSSendReceiveDataPolicies</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>NativeToCDM</pd:from>
        <pd:to>Log_CDM_Request</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log_CDM_Response</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseResponse</pd:from>
        <pd:to>GetOfferDetails</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetOfferDetails</pd:from>
        <pd:to>GetDADetails</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetDADetails</pd:from>
        <pd:to>GetDa-Offer-Map</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>No Data Found</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>Null</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length($ParseResponse/pfx51:DataInquiriesResponse/ns15:SubscriberAssets/ns15:ListOfAssets/ns15:Asset[1]/ns15:AssetID)=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>CDMToNativeResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapFinalResponse</pd:from>
        <pd:to>Generate Error</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CDMToNativeResponse</pd:from>
        <pd:to>MapFinalResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetDa-Offer-Map</pd:from>
        <pd:to>MapChargeType</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapChargeType</pd:from>
        <pd:to>Null-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapFinalResponse</pd:from>
        <pd:to>Log_CDM_Response</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:label>
        <pd:name>Label</pd:name>
        <pd:description>GetUsage is used for prepaid and postpaid offers. The Logic is complex as all the response is coming from the BPI. On the basis of GetOfferDetails for offermapping and threshold, DA Details is for the DA's and Da-Offer-Map, is having only prepaid DA.
The combination all is being mapped in the Map Charge Type.
CDM to Native is making the response proper and Map final Response is used for mapping the final response on the basis of the input filter</pd:description>
        <pd:x>721</pd:x>
        <pd:y>44</pd:y>
        <pd:width>1411</pd:width>
        <pd:height>69</pd:height>
        <pd:fontColor>-16777216</pd:fontColor>
        <pd:color>-16737895</pd:color>
        <pd:type>solid</pd:type>
        <pd:thickness>0</pd:thickness>
        <pd:fade>true</pd:fade>
    </pd:label>
</pd:ProcessDefinition>