<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx16="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx60="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryInput.xsd" xmlns:pfx15="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Res" xmlns:ns="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pfx63="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Query/CustomerAssetQueryInbound.xsd" xmlns:pfx14="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" xmlns:pfx13="http://www.tibco.com/ns/no_namespace_schema_location/CDM/CDM.xsd" xmlns:pfx62="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" xmlns:pfx12="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:pfx11="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" xmlns:pfx10="http://www.siebel.com/xml/MOZ1%20Error%20Log%20Res" xmlns:zainesbcustom="java://GenUUID" xmlns:pfx19="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerReq.xsd" xmlns:pfx18="http://schemas.tibco.com/bw/plugins/jms/5.0/jmsExceptions" xmlns:pfx17="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:pfx57="http://www.zain.com/ZESB/Services/SalesOrder/Types" xmlns:pfx58="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/SalesTransaction.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx59="http://www.zain.com/ZESB/Services/CallHistory/Types" xmlns:pfx53="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/PaymentTransaction.xsd" xmlns:pfx54="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/CRM/Query/PaymentQuery.xsd" xmlns:pfx55="http://www.zain.com/ZESB/Services/Payment/Types" xmlns:pfx56="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/PaymentInbound.xsd" xmlns:pfx52="http://xmlns.zain.com/BSS/ESB/CDM/ModifyCustomerOrder" xmlns:ns16="http://xmlns.zain.com/BSS/ESB/CDM/Finance" xmlns:pfx51="http://xmlns.zain.com/BSS/ESB/CDM/CustomerOrder" xmlns:ns17="http://xmlns.zain.com/BSS/ESB/CDM/Products" xmlns:zainesbcustom1="java://com.commonresources.utilities.CustomFunctions" xmlns:ns14="http://xmlns.zain.com/BSS/ESB/CDM/Base" xmlns:pfx50="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/ModifyOrder/ModifyOrderRequest.xsd" xmlns:ns15="http://xmlns.zain.com/BSS/ESB/CDM/Customer" xmlns:ns18="http://tibco.com/namespaces/tnt/plugins/soap" xmlns:ns19="http://www.zain.com/ZESB/Types/Common" xmlns:ns111="http://www.siebel.com/xml/MOZ1%20Serv%20Account%20Creation%20Res" xmlns:format="java://MSISDNFormatter" xmlns:ns12="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:ns110="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customer" xmlns:ns13="http://schemas.tibco.com/bw/plugins/xml/5.0/xmlExceptions" xmlns:pfx="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd" xmlns:ns10="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:ns11="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx48="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Modification/ContractResourceChangeResponse.xsd" xmlns:pfx49="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/ContractResourceChangeResponse.xsd" xmlns:pfx46="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Modification/ContractResourceChangeRequest.xsd" xmlns:pfx47="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Modification/UpdatePaymentProfileResponse.xsd" xmlns:pfx44="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderRes.xsd" xmlns:pfx45="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/ContractResourceChangeRequest.xsd" xmlns:pfx42="qqwe" xmlns:pfx43="http://www.zain.kw.com/BSS/OrderManagement/orderResponse" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:pfx41="http://www.tibco.com/schemas/GW/BusinessProcesses/Services/CRM/Modification/ModifyCustomer/PaymentProfileUpdate/HelperProcess/Schema.xsd" xmlns:pfx40="http://www.siebel.com/xml/CBiO2%20Payment%20Profile%20Modification%20Res%20IO" xmlns:ns21="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/address" xmlns:pfx39="http://www.siebel.com/xmlCBiO2%20Billing%20Profile%20Modification%20Res%20IO" xmlns:pfx5="http://xmlns.example.com/1323156482391/OperationImpl" xmlns:pfx31="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Modification/AddressChangeRequest.xsd" xmlns:pfx32="http://www.siebel.com/xml/CBiO2%20Address%20Modification%20Res%20IO" xmlns:pfx4="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Res" xmlns:pfx33="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Modification/AddressChangeResponse.xsd" xmlns:pfx3="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx2="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Req" xmlns:pfx34="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/ModifyCustomerReq.xsd" xmlns:pfx35="http://www.siebel.com/xml/CBiO2%20Customer%20Creation%20IO" xmlns:pfx9="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XML/AccountCreationReq_13Jan2012.xsd" xmlns:pfx36="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/ModifyCustomerRes.xsd" xmlns:pfx7="http://www.tibco.com/pe/SignalInActivitySchema" xmlns:pfx37="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateBillProcessRequest.xsd" xmlns:pfx6="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/contactPerson" xmlns:pfx38="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateBillProcessResponse.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx30="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetPaymentRes.xsd" xmlns:ns5="www.tibco.com/createcustomer" xmlns:ns6="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:ns7="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:ns8="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns2="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:ns4="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/portfolio" xmlns:pfx28="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceReq.xsd" xmlns:ns3="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/billingAccount" xmlns:pfx29="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceRes.xsd" xmlns:pfx64="http://www.zain.com/ZESB/Services/CallHistory" xmlns:ns0="www.tibco.com/plugin/Sleep" xmlns:pfx22="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceRes.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx23="http://www.siebel.com/xml/MOZ1%20Customer%20Bill%20Cycle%20Update%20Req" xmlns:pfx20="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerRes.xsd" xmlns:pfx21="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceReq.xsd" xmlns:pfx26="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMReq.xsd" xmlns:pfx27="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMRes.xsd" xmlns:pfx24="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillCycleUpdateReq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pfx25="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceReq1.xsd">
    <xsd:import namespace="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryOutput.xsd"/>
    <pd:name>BusinessProcesses/Services/Query/CallHistory/HelperProcess/FormatResultBSCS.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Filter" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Type" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="pfx:GetCallHistoryOutput"/>
                    <xsd:element name="PageNo" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="PageLimit" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="SourceSystem" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>82</pd:startX>
    <pd:startY>106</pd:startY>
    <pd:returnBindings>
        <root>
            <pfx:GetCallHistoryOutput>
                <xsl:if test="$Start/root/pfx:GetCallHistoryOutput/pfx:Status">
                    <pfx:Status>
                        <xsl:value-of select="$Start/root/pfx:GetCallHistoryOutput/pfx:Status"/>
                    </pfx:Status>
                </xsl:if>
                <xsl:choose>
                    <xsl:when test="string-length(tib:trim($Start/root/Filter))=0&#xA;and&#xA;$Start/root/SourceSystem='CRM'">
                        <pfx:Records>
                            <xsl:variable name="From" select="(($Start/root/PageNo - 1) * $Start/root/PageLimit )+ 1"/>
                            <xsl:variable name="To" select="($From + $Start/root/PageLimit)-1"/>
                            <xsl:for-each select="$Start/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record&#xA;[ string-length(pfx:Amount) >0 &#xA;and&#xA;string-length(pfx:DateTime)>0&#xA;and&#xA; string-length(pfx:Duration )>0&#xA;]">
                                <pfx:Record>
                                    <xsl:if test="pfx:Aparty">
                                        <pfx:Aparty>
                                            <xsl:value-of select="pfx:Aparty"/>
                                        </pfx:Aparty>
                                    </xsl:if>
                                    <xsl:if test="pfx:BParty">
                                        <pfx:BParty>
                                            <xsl:value-of select="pfx:BParty"/>
                                        </pfx:BParty>
                                    </xsl:if>
                                    <xsl:if test="pfx:Duration">
                                        <pfx:Duration>
                                            <xsl:value-of select="pfx:Duration"/>
                                        </pfx:Duration>
                                    </xsl:if>
                                    <xsl:if test="pfx:DateTime">
                                        <pfx:DateTime>
                                            <xsl:value-of select="pfx:DateTime"/>
                                        </pfx:DateTime>
                                    </xsl:if>
                                    <xsl:if test="pfx:Amount">
                                        <pfx:Amount>
                                            <xsl:value-of select="pfx:Amount"/>
                                        </pfx:Amount>
                                    </xsl:if>
                                    <xsl:if test="pfx:Category">
                                        <pfx:Category>
                                            <xsl:value-of select="pfx:Category"/>
                                        </pfx:Category>
                                    </xsl:if>
                                    <xsl:if test="pfx:Type">
                                        <pfx:Type>
                                            <xsl:value-of select="pfx:Type"/>
                                        </pfx:Type>
                                    </xsl:if>
                                </pfx:Record>
                            </xsl:for-each>
                        </pfx:Records>
                    </xsl:when>
                    <xsl:when test="$Start/root/SourceSystem='CRM'">
                        <pfx:Records>
                            <xsl:for-each select="$SortAccmOutputAgain/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record&#xA;[ string-length(pfx:Amount) >0 &#xA;and&#xA;string-length(pfx:DateTime)>0&#xA;and&#xA; string-length(pfx:Duration )>0&#xA;]">
                                <pfx:Record>
                                    <xsl:if test="pfx:Aparty">
                                        <pfx:Aparty>
                                            <xsl:value-of select="pfx:Aparty"/>
                                        </pfx:Aparty>
                                    </xsl:if>
                                    <xsl:if test="pfx:BParty">
                                        <pfx:BParty>
                                            <xsl:value-of select="pfx:BParty"/>
                                        </pfx:BParty>
                                    </xsl:if>
                                    <xsl:if test="pfx:Duration">
                                        <pfx:Duration>
                                            <xsl:value-of select="pfx:Duration"/>
                                        </pfx:Duration>
                                    </xsl:if>
                                    <xsl:if test="pfx:DateTime">
                                        <pfx:DateTime>
                                            <xsl:value-of select="pfx:DateTime"/>
                                        </pfx:DateTime>
                                    </xsl:if>
                                    <xsl:if test="pfx:Amount">
                                        <pfx:Amount>
                                            <xsl:value-of select="pfx:Amount"/>
                                        </pfx:Amount>
                                    </xsl:if>
                                    <xsl:if test="pfx:Category">
                                        <pfx:Category>
                                            <xsl:value-of select="pfx:Category"/>
                                        </pfx:Category>
                                    </xsl:if>
                                    <xsl:if test="pfx:Type">
                                        <pfx:Type>
                                            <xsl:value-of select="pfx:Type"/>
                                        </pfx:Type>
                                    </xsl:if>
                                </pfx:Record>
                            </xsl:for-each>
                        </pfx:Records>
                    </xsl:when>
                    <xsl:when test="string-length(tib:trim($Start/root/Filter))=0">
                        <pfx:Records>
                            <xsl:variable name="From" select="(($Start/root/PageNo - 1) * $Start/root/PageLimit )+ 1"/>
                            <xsl:variable name="To" select="($From + $Start/root/PageLimit)-1"/>
                            <xsl:for-each select="$Start/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record&#xA;[ string-length(pfx:Amount) >0 &#xA;and&#xA;string-length(pfx:DateTime)>0&#xA;and&#xA; string-length(pfx:Duration )>0&#xA;and (position() >= $From and position () &lt;= $To)]">
                                <pfx:Record>
                                    <xsl:if test="pfx:Aparty">
                                        <pfx:Aparty>
                                            <xsl:value-of select="pfx:Aparty"/>
                                        </pfx:Aparty>
                                    </xsl:if>
                                    <xsl:if test="pfx:BParty">
                                        <pfx:BParty>
                                            <xsl:value-of select="pfx:BParty"/>
                                        </pfx:BParty>
                                    </xsl:if>
                                    <xsl:if test="pfx:Duration">
                                        <pfx:Duration>
                                            <xsl:value-of select="pfx:Duration"/>
                                        </pfx:Duration>
                                    </xsl:if>
                                    <xsl:if test="pfx:DateTime">
                                        <pfx:DateTime>
                                            <xsl:value-of select="pfx:DateTime"/>
                                        </pfx:DateTime>
                                    </xsl:if>
                                    <xsl:if test="pfx:Amount">
                                        <pfx:Amount>
                                            <xsl:value-of select="pfx:Amount"/>
                                        </pfx:Amount>
                                    </xsl:if>
                                    <xsl:if test="pfx:Category">
                                        <pfx:Category>
                                            <xsl:value-of select="pfx:Category"/>
                                        </pfx:Category>
                                    </xsl:if>
                                    <xsl:if test="pfx:Type">
                                        <pfx:Type>
                                            <xsl:value-of select="pfx:Type"/>
                                        </pfx:Type>
                                    </xsl:if>
                                </pfx:Record>
                            </xsl:for-each>
                        </pfx:Records>
                    </xsl:when>
                    <xsl:otherwise>
                        <pfx:Records>
                            <xsl:variable name="From" select="(($Start/root/PageNo - 1) * $Start/root/PageLimit )+ 1"/>
                            <xsl:variable name="To" select="($From + $Start/root/PageLimit)-1"/>
                            <xsl:for-each select="$SortAccmOutputAgain/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record&#xA;[ string-length(pfx:Amount) >0 &#xA;and&#xA;string-length(pfx:DateTime)>0&#xA;and&#xA; string-length(pfx:Duration )>0&#xA;and (position() >= $From and position () &lt;= $To)]">
                                <pfx:Record>
                                    <xsl:if test="pfx:Aparty">
                                        <pfx:Aparty>
                                            <xsl:value-of select="pfx:Aparty"/>
                                        </pfx:Aparty>
                                    </xsl:if>
                                    <xsl:if test="pfx:BParty">
                                        <pfx:BParty>
                                            <xsl:value-of select="pfx:BParty"/>
                                        </pfx:BParty>
                                    </xsl:if>
                                    <xsl:if test="pfx:Duration">
                                        <pfx:Duration>
                                            <xsl:value-of select="pfx:Duration"/>
                                        </pfx:Duration>
                                    </xsl:if>
                                    <xsl:if test="pfx:DateTime">
                                        <pfx:DateTime>
                                            <xsl:value-of select="pfx:DateTime"/>
                                        </pfx:DateTime>
                                    </xsl:if>
                                    <xsl:if test="pfx:Amount">
                                        <pfx:Amount>
                                            <xsl:value-of select="pfx:Amount"/>
                                        </pfx:Amount>
                                    </xsl:if>
                                    <xsl:if test="pfx:Category">
                                        <pfx:Category>
                                            <xsl:value-of select="pfx:Category"/>
                                        </pfx:Category>
                                    </xsl:if>
                                    <xsl:if test="pfx:Type">
                                        <pfx:Type>
                                            <xsl:value-of select="pfx:Type"/>
                                        </pfx:Type>
                                    </xsl:if>
                                </pfx:Record>
                            </xsl:for-each>
                        </pfx:Records>
                    </xsl:otherwise>
                </xsl:choose>
            </pfx:GetCallHistoryOutput>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Filter" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Type" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="pfx:GetCallHistoryOutput"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>1470</pd:endX>
    <pd:endY>112</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables>
        <ReducedRecord ref="pfx:GetCallHistoryOutput"/>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1464604961895</pd:targetNamespace>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>241</pd:x>
        <pd:y>32</pd:y>
        <pd:width>292</pd:width>
        <pd:height>140</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>tib:tokenize($Start/root/Filter/Value,",")</pd:over>
            <pd:iterationElementSlot>type</pd:iterationElementSlot>
            <pd:indexSlot>i</pd:indexSlot>
            <pd:outSlot>AllTypes</pd:outSlot>
            <pd:activityOutputName>GetFilter</pd:activityOutputName>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>GetFilter</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetFilter</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="GetFilter">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>393</pd:x>
            <pd:y>107</pd:y>
            <config>
                <element>
                    <xsd:element name="root">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Filter" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </element>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:if test="tib:tokenize($Start/root/Filter/Value,&quot;,&quot;)[$i]">
                        <Filter>
                            <xsl:value-of select="tib:tokenize($Start/root/Filter/Value,&quot;,&quot;)[$i]"/>
                        </Filter>
                    </xsl:if>
                </root>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:group name="Group (1)">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>668</pd:x>
        <pd:y>26</pd:y>
        <pd:width>431</pd:width>
        <pd:height>158</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>inputLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:over>$AllTypes/AccumulatedOutput/root/Filter</pd:over>
            <pd:iterationElementSlot/>
            <pd:indexSlot>Map</pd:indexSlot>
            <pd:outSlot>FinalRecord</pd:outSlot>
            <pd:activityOutputName>MapResponse</pd:activityOutputName>
            <pd:accumulateOutput>true</pd:accumulateOutput>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>MapResponse</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Assign</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>MapResponse</pd:from>
            <pd:to>Assign</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="MapResponse">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>776</pd:x>
            <pd:y>115</pd:y>
            <config>
                <element>
                    <xsd:element name="root">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element ref="pfx:GetCallHistoryOutput"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </element>
            </config>
            <pd:inputBindings>
                <root>
                    <pfx:GetCallHistoryOutput>
                        <xsl:choose>
                            <xsl:when test="upper-case($Start/root/Filter/Type)='ONLY'">
                                <xsl:variable name="Only" select="$AllTypes/AccumulatedOutput/root[$Map]/Filter"/>
                                <xsl:choose>
                                    <xsl:when test="$Map=1&#xA;&#xA;&#xA;or&#xA;1=1&#xA;{--always true in case of Only --}">
                                        <pfx:Records>
                                            <xsl:for-each select="$Start/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record[pfx:Category=$Only]">
                                                <pfx:Record>
                                                    <xsl:if test="pfx:Aparty">
                                                        <pfx:Aparty>
                                                            <xsl:value-of select="pfx:Aparty"/>
                                                        </pfx:Aparty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:BParty">
                                                        <pfx:BParty>
                                                            <xsl:value-of select="pfx:BParty"/>
                                                        </pfx:BParty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Duration">
                                                        <pfx:Duration>
                                                            <xsl:value-of select="pfx:Duration"/>
                                                        </pfx:Duration>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:DateTime">
                                                        <pfx:DateTime>
                                                            <xsl:value-of select="pfx:DateTime"/>
                                                        </pfx:DateTime>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Amount">
                                                        <pfx:Amount>
                                                            <xsl:value-of select="pfx:Amount"/>
                                                        </pfx:Amount>
                                                    </xsl:if>
                                                    <pfx:Category>
                                                        <xsl:value-of select="pfx:Category"/>
                                                    </pfx:Category>
                                                    <xsl:if test="pfx:Type">
                                                        <pfx:Type>
                                                            <xsl:value-of select="pfx:Type"/>
                                                        </pfx:Type>
                                                    </xsl:if>
                                                </pfx:Record>
                                            </xsl:for-each>
                                        </pfx:Records>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx:Records>
                                            <xsl:for-each select="$ReducedRecord/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record">
                                                <pfx:Record>
                                                    <xsl:if test="pfx:Aparty">
                                                        <pfx:Aparty>
                                                            <xsl:value-of select="pfx:Aparty"/>
                                                        </pfx:Aparty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:BParty">
                                                        <pfx:BParty>
                                                            <xsl:value-of select="pfx:BParty"/>
                                                        </pfx:BParty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Duration">
                                                        <pfx:Duration>
                                                            <xsl:value-of select="pfx:Duration"/>
                                                        </pfx:Duration>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:DateTime">
                                                        <pfx:DateTime>
                                                            <xsl:value-of select="pfx:DateTime"/>
                                                        </pfx:DateTime>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Amount">
                                                        <pfx:Amount>
                                                            <xsl:value-of select="pfx:Amount"/>
                                                        </pfx:Amount>
                                                    </xsl:if>
                                                    <pfx:Category>
                                                        <xsl:value-of select="pfx:Category"/>
                                                    </pfx:Category>
                                                    <xsl:if test="pfx:Type">
                                                        <pfx:Type>
                                                            <xsl:value-of select="pfx:Type"/>
                                                        </pfx:Type>
                                                    </xsl:if>
                                                </pfx:Record>
                                            </xsl:for-each>
                                        </pfx:Records>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:variable name="Except" select="$AllTypes/AccumulatedOutput/root[$Map]/Filter"/>
                                <xsl:choose>
                                    <xsl:when test="$Map=1">
                                        <pfx:Records>
                                            <xsl:for-each select="$Start/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record[pfx:Category!=$Except]">
                                                <pfx:Record>
                                                    <xsl:if test="pfx:Aparty">
                                                        <pfx:Aparty>
                                                            <xsl:value-of select="pfx:Aparty"/>
                                                        </pfx:Aparty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:BParty">
                                                        <pfx:BParty>
                                                            <xsl:value-of select="pfx:BParty"/>
                                                        </pfx:BParty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Duration">
                                                        <pfx:Duration>
                                                            <xsl:value-of select="pfx:Duration"/>
                                                        </pfx:Duration>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:DateTime">
                                                        <pfx:DateTime>
                                                            <xsl:value-of select="pfx:DateTime"/>
                                                        </pfx:DateTime>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Amount">
                                                        <pfx:Amount>
                                                            <xsl:value-of select="pfx:Amount"/>
                                                        </pfx:Amount>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Category">
                                                        <pfx:Category>
                                                            <xsl:value-of select="pfx:Category"/>
                                                        </pfx:Category>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Type">
                                                        <pfx:Type>
                                                            <xsl:value-of select="pfx:Type"/>
                                                        </pfx:Type>
                                                    </xsl:if>
                                                </pfx:Record>
                                            </xsl:for-each>
                                        </pfx:Records>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <pfx:Records>
                                            <xsl:variable name="var" select="$Map - 1"/>
                                            <xsl:for-each select="$ReducedRecord/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record[pfx:Category!=$Except]">
                                                <pfx:Record>
                                                    <xsl:if test="pfx:Aparty">
                                                        <pfx:Aparty>
                                                            <xsl:value-of select="pfx:Aparty"/>
                                                        </pfx:Aparty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:BParty">
                                                        <pfx:BParty>
                                                            <xsl:value-of select="pfx:BParty"/>
                                                        </pfx:BParty>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Duration">
                                                        <pfx:Duration>
                                                            <xsl:value-of select="pfx:Duration"/>
                                                        </pfx:Duration>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:DateTime">
                                                        <pfx:DateTime>
                                                            <xsl:value-of select="pfx:DateTime"/>
                                                        </pfx:DateTime>
                                                    </xsl:if>
                                                    <xsl:if test="pfx:Amount">
                                                        <pfx:Amount>
                                                            <xsl:value-of select="pfx:Amount"/>
                                                        </pfx:Amount>
                                                    </xsl:if>
                                                    <pfx:Category>
                                                        <xsl:value-of select="pfx:Category"/>
                                                    </pfx:Category>
                                                    <xsl:if test="pfx:Type">
                                                        <pfx:Type>
                                                            <xsl:value-of select="pfx:Type"/>
                                                        </pfx:Type>
                                                    </xsl:if>
                                                </pfx:Record>
                                            </xsl:for-each>
                                        </pfx:Records>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:otherwise>
                        </xsl:choose>
                    </pfx:GetCallHistoryOutput>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Assign">
            <pd:type>com.tibco.pe.core.AssignActivity</pd:type>
            <pd:resourceType>ae.activities.assignActivity</pd:resourceType>
            <pd:x>920</pd:x>
            <pd:y>114</pd:y>
            <config>
                <variableName>ReducedRecord</variableName>
            </config>
            <pd:inputBindings>
                <pfx:GetCallHistoryOutput>
                    <pfx:Records>
                        <xsl:copy-of select="$MapResponse/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record"/>
                    </pfx:Records>
                </pfx:GetCallHistoryOutput>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="formattingErr">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>561</pd:x>
        <pd:y>284</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </message>
                <xsl:if test="$_error/ns1:ErrorReport/MsgCode">
                    <messageCode>
                        <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                    </messageCode>
                </xsl:if>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SortAccmOutputAgain">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1278</pd:x>
        <pd:y>112</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element ref="pfx:GetCallHistoryOutput"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <pfx:GetCallHistoryOutput>
                    <xsl:choose xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
                        <xsl:when test="upper-case($Start/root/Filter/Type)='ONLY'">
                            <pfx:Records>
                                <xsl:for-each select="$FinalRecord/AccumulatedOutput/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record">
                                    <xsl:sort select="pfx:DateTime" order="descending"/>
                                    <pfx:Record>
                                        <pfx:Aparty>
                                            <xsl:value-of select="pfx:Aparty"/>
                                        </pfx:Aparty>
                                        <pfx:BParty>
                                            <xsl:value-of select="pfx:BParty"/>
                                        </pfx:BParty>
                                        <pfx:Duration>
                                            <xsl:value-of select="pfx:Duration"/>
                                        </pfx:Duration>
                                        <pfx:DateTime>
                                            <xsl:value-of select="pfx:DateTime"/>
                                        </pfx:DateTime>
                                        <pfx:Amount>
                                            <xsl:value-of select="pfx:Amount"/>
                                        </pfx:Amount>
                                        <pfx:Category>
                                            <xsl:value-of select="pfx:Category"/>
                                        </pfx:Category>
                                        <pfx:Type>
                                            <xsl:value-of select="pfx:Type"/>
                                        </pfx:Type>
                                    </pfx:Record>
                                </xsl:for-each>
                            </pfx:Records>
                        </xsl:when>
                        <xsl:otherwise>
                            <pfx:Records>
                                <xsl:for-each select="$ReducedRecord/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record">
                                    <xsl:sort select="pfx:DateTime" order="descending"/>
                                    <pfx:Record>
                                        <pfx:Aparty>
                                            <xsl:value-of select="pfx:Aparty"/>
                                        </pfx:Aparty>
                                        <pfx:BParty>
                                            <xsl:value-of select="pfx:BParty"/>
                                        </pfx:BParty>
                                        <pfx:Duration>
                                            <xsl:value-of select="pfx:Duration"/>
                                        </pfx:Duration>
                                        <pfx:DateTime>
                                            <xsl:value-of select="pfx:DateTime"/>
                                        </pfx:DateTime>
                                        <pfx:Amount>
                                            <xsl:value-of select="pfx:Amount"/>
                                        </pfx:Amount>
                                        <pfx:Category>
                                            <xsl:value-of select="pfx:Category"/>
                                        </pfx:Category>
                                        <pfx:Type>
                                            <xsl:value-of select="pfx:Type"/>
                                        </pfx:Type>
                                    </pfx:Record>
                                </xsl:for-each>
                            </pfx:Records>
                        </xsl:otherwise>
                    </xsl:choose>
                </pfx:GetCallHistoryOutput>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>176</pd:x>
        <pd:y>236</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>Group (1)</pd:to>
        <pd:xpathDescription>Only</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group (1)</pd:from>
        <pd:to>SortAccmOutputAgain</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>formattingErr</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-52429</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group (1)</pd:from>
        <pd:to>formattingErr</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SortAccmOutputAgain</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Null</pd:to>
        <pd:xpathDescription>NO Filter</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>string-length(tib:trim($Start/root/Filter))=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>