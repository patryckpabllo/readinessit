<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx16="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:pfx15="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodRequest.xsd" xmlns:ns="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx14="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTARequest.xsd" xmlns:pfx13="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoReq.xsd" xmlns:pfx12="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeReq.xsd" xmlns:pfx11="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" xmlns:pfx10="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:pfx19="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/Request.xsd" xmlns:pfx18="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" xmlns:pfx17="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns16="http://www.zain.com/ZESB/Services/CustomerProfile/Types" xmlns:ns17="http://www.zain.com/ZESB/Services/PrepaidBalance/Types" xmlns:ns14="http://www.zain.com/ZESB/Services/CallHistory/Types" xmlns:ns15="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Query/CustomerAssetQueryInbound.xsd" xmlns:ns18="http://www.zain.com/ZESB/Services/GetUsage/Types" xmlns:ns19="http://www.tibco.com/schemas/CommonProject/CommonResources/SharedVariables/Internal/ServiceCategoryCheck.xsd" xmlns:format="java://MSISDNFormatter" xmlns:ns12="http://xmlns.zain.com/BSS/ESB/CDM/Base" xmlns:ns13="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" xmlns:ns10="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" xmlns:pfx="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns11="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/Response.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlPfx="http://www.zain.com/ZESB/Services/SubscriberProfile" xmlns:ns20="http://www.tibco.com/schemas/CommonProject/CommonResources/SharedVariables/Internal/ESBLOV.xsd" xmlns:pfx5="http://xmlns.zain.jo.org/CDM/CustomerAndOrder" xmlns:pfx4="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" xmlns:pfx2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx9="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pfx8="http://www.siebel.com/xml/MOZ1%20Serv%20Account%20Creation%20Res" xmlns:pfx7="http://www.tibco.com/ns/no_namespace_schema_location/CDM/CDM.xsd" xmlns:pfx6="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns9="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodResponse.xsd" xmlns:ns5="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerRes.xsd" xmlns:ns6="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeRes.xsd" xmlns:ns7="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoRes.xsd" xmlns:ns8="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTAResponse.xsd" xmlns:ns2="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:pfx28="http://www.zain.com/ZESB/Services/CustomerServices/Types" xmlns:ns4="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns3="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:pfx29="http://www.tibco.com/schemas/BPI_CustMgmt/BusinessProcesses/Services/Query/QueryCustomerAsset/Schema.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx22="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/GetUsageDetails.xsd" xmlns:pfx23="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/ImmediateSimulationBillQuery.xsd" xmlns:pfx20="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderReq.xsd" xmlns:pfx21="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderRes.xsd" xmlns:pfx26="http://www.zain.com/ZESB/Services/SubscriberProfile/Types" xmlns:pfx27="http://www.zain.com/ZESB/Types/Common" xmlns:pfx24="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryInput.xsd" xmlns:pfx25="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" schemaLocation="/CDM/customerAccount.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" schemaLocation="/CustomerAndOrder.xsd"/>
    <xsd:import namespace="http://xmlns.zain.jo.org/CDM/CustomerAndOrder"/>
    <xsd:import namespace="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" schemaLocation="/CDM/CDM.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeReq.xsd" schemaLocation="/BusinessSchemas/Services/Modification/AddressChange/AddressChangeReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoReq.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetBalance/GetBalanceInfoReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTARequest.xsd" schemaLocation="/BusinessSchemas/Services/Query/RTA/RTARequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodRequest.xsd" schemaLocation="/BusinessSchemas/Services/Modification/BillDeliveryMethod/BillDeliveryMethodRequest.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" schemaLocation="/BusinessSchemas/Services/Common/CLE/ExceptionRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" schemaLocation="/BusinessSchemas/Services/Modification/eAccountManager/eAccountManagerRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" schemaLocation="/BusinessSchemas/Services/Modification/eAccountManager/eAccountManagerResponse.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/Request.xsd" schemaLocation="/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/CreateOrderRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderReq.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateOrder/CreateOrderReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderRes.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateOrder/CreateOrderRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/GetUsageDetails.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetUsageDetails/GetUsageDetails.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/ImmediateSimulationBillQuery.xsd" schemaLocation="/BusinessSchemas/Services/Query/ImmediateSimulationBillQuery/ImmediateSimulationBillQuery.xsd"/>
    <xsd:import namespace="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryInput.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryInput.xsd"/>
    <xsd:import namespace="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryOutput.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Types/Common" schemaLocation="/BusinessWSDLS/Services/WSDLS/SubscriberProfile/SubscriberProfileInbound.wsdl"/>
    <xsd:import namespace="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Query/CustomerAssetQueryInbound.xsd" schemaLocation="/BusinessSchemas/Services/Query/CustomerAsset/CustomerAssetQueryInbound.xsd"/>
    <xsd:import namespace="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" schemaLocation="/CDM/ZainKWFault.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/BPI_CustMgmt/BusinessProcesses/Services/Query/QueryCustomerAsset/Schema.xsd" schemaLocation="/BusinessProcesses/Services/Query/QueryCustomerAsset/Category.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/CustomerServices/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/QueryCustomerServices/QueryCustomerServicesInbound.wsdl"/>
    <wsdl:import namespace="http://www.zain.com/ZESB/Services/SubscriberProfile" location="/BusinessWSDLS/Services/WSDLS/SubscriberProfile/SubscriberProfileInbound.wsdl"/>
    <pd:name>BusinessProcesses/Services/Query/QueryCustomerAsset/Implementation/QueryCustomerAsset.process</pd:name>
    <pd:startName>ReceiveQueryCustomerAsset</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings/>
    <pd:starter name="ReceiveQueryCustomerAsset">
        <pd:type>com.tibco.plugin.jms.JMSQueueEventSource</pd:type>
        <pd:resourceType>ae.activities.JMSQueueEventSource</pd:resourceType>
        <pd:x>61</pd:x>
        <pd:y>316</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>%%BusinessProcesses/CommonSettings/JMSReceiver/MaxSessions%%</maxSessions>
                <destination>%%BusinessProcesses/Services/Query/AssetQuery/GWReqQueue%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/CommonResources/Connections/JMS/Internal/EAI_EMSConnection.sharedjmscon</ConnectionReference>
            <ApplicationProperties>/CommonResources/Connections/JMS/Internal/EAI_EMSApplicationProperties.sharedjmsapp</ApplicationProperties>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>1766</pd:endX>
    <pd:endY>304</pd:endY>
    <pd:errorSchemas>
        <ErrorSchema ref="ns13:ErrorResponse"/>
    </pd:errorSchemas>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1323152787082</pd:targetNamespace>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>432</pd:x>
        <pd:y>526</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="CLE_To_CDM">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>776</pd:x>
        <pd:y>526</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:choice>
                            <xsd:element ref="pfx28:QueryResult"/>
                            <xsd:element ref="ns13:ErrorResponse"/>
                        </xsd:choice>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <ns13:ErrorResponse>
                    <ns13:Error_SourceSystem>
                        <xsl:value-of select="if(contains($_error/ns1:ErrorReport/Msg,'|'))&#xA; then &#xA;substring-before($_error/ns1:ErrorReport/Msg,'|')&#xA;else&#xA;'TIBCO'"/>
                    </ns13:Error_SourceSystem>
                    <ns13:Error_SourceErrCode>
                        <xsl:value-of select="$ErrorHandler/pfx4:ExceptionRequest/ExceptionCode"/>
                    </ns13:Error_SourceErrCode>
                    <xsl:if test="$ErrorHandler/pfx4:ExceptionRequest/StackTrace">
                        <ns13:Error_SourceErrDesc>
                            <xsl:value-of select="$ErrorHandler/pfx4:ExceptionRequest/StackTrace"/>
                        </ns13:Error_SourceErrDesc>
                    </xsl:if>
                </ns13:ErrorResponse>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ErrorHandler">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>597</pd:x>
        <pd:y>526</pd:y>
        <config>
            <processName>/CommonProcesses/ErrorHandlingProcess/Exception_Message.process</processName>
        </config>
        <pd:inputBindings>
            <pfx4:ExceptionRequest>
                <pfx6:Header>
                    <pfx6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </pfx6:ApplicationID>
                    <pfx6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ComponentName"/>
                    </pfx6:ComponentName>
                    <pfx6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </pfx6:Hostname>
                    <pfx6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx6:Timestamp>
                    <pfx6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </pfx6:TransactionDomain>
                    <pfx6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                    </pfx6:TransactionType>
                    <xsl:if test="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID">
                        <pfx6:TransactionID>
                            <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                        </pfx6:TransactionID>
                    </xsl:if>
                    <pfx6:Filename>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/Deployment"/>
                    </pfx6:Filename>
                </pfx6:Header>
                <ExceptionCode>
                    <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                </ExceptionCode>
                <StackTrace>
                    <xsl:value-of select="if(contains($_error/ns1:ErrorReport/Msg,'|')) then substring-after($_error/ns1:ErrorReport/Msg,'|')&#xA;else $_error/ns1:ErrorReport/Msg"/>
                </StackTrace>
            </pfx4:ExceptionRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ErrorLog">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1252</pd:x>
        <pd:y>526</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <ns2:LogRequest>
                <pfx6:Header>
                    <pfx6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </pfx6:ApplicationID>
                    <pfx6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Common/QuerySubscriberProfileInbound/ComponentName"/>
                    </pfx6:ComponentName>
                    <pfx6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </pfx6:Hostname>
                    <pfx6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx6:Timestamp>
                    <pfx6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </pfx6:TransactionDomain>
                    <pfx6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                    </pfx6:TransactionType>
                    <xsl:if test="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID">
                        <pfx6:TransactionID>
                            <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                        </pfx6:TransactionID>
                    </xsl:if>
                    <pfx6:Filename>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/Deployment"/>
                    </pfx6:Filename>
                    <pfx6:Message>
                        <xsl:value-of select="tib:render-xml($CLE_To_CDM/root)"/>
                    </pfx6:Message>
                </pfx6:Header>
                <TimeDuration>
                    <xsl:value-of select="if(exists($ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp) and string-length($ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp) > 0)&#xA;then $ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp&#xA;else 0"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleError"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Status/BPI/BPI_ERR_RES_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns2:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ESI_Call_QueryCustomerAsset">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>770</pd:x>
        <pd:y>312</pd:y>
        <config>
            <processName>/BusinessProcesses/Services/Query/QueryCustomerAsset/HelperProcess/ESI_Call_QueryCustomerAsset.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:copy-of select="$ParseRequest/ns15:queryAssetRequest"/>
                <TransactionId>
                    <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                </TransactionId>
                <StartTimeStamp>
                    <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp"/>
                </StartTimeStamp>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ESI_Call_UsageDetails">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>770</pd:x>
        <pd:y>443</pd:y>
        <config>
            <processName>/BusinessProcesses/Services/Query/QueryCustomerAsset/HelperProcess/ESI_Call_UsageDetails.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:copy-of select="$ParseRequest/ns15:queryAssetRequest"/>
                <TransactionId>
                    <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                </TransactionId>
                <StartTimeStamp>
                    <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp"/>
                </StartTimeStamp>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="JMSReceiverError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>64</pd:x>
        <pd:y>198</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <pfx9:ActivityInput>
                <data>
                    <ns13:ErrorResponse>
                        <ns13:Error_SourceSystem>
                            <xsl:value-of select="&quot;ESB&quot;"/>
                        </ns13:Error_SourceSystem>
                        <ns13:Error_SourceErrCode>
                            <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonErrors/JMSErrorCode"/>
                        </ns13:Error_SourceErrCode>
                        <ns13:Error_SourceErrDesc>
                            <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonErrors/JMSReceiveErrorDesc"/>
                        </ns13:Error_SourceErrDesc>
                    </ns13:ErrorResponse>
                </data>
            </pfx9:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log">
        <pd:type>com.tibco.pe.core.WriteToLogActivity</pd:type>
        <pd:resourceType>ae.activities.log</pd:resourceType>
        <pd:x>987</pd:x>
        <pd:y>680</pd:y>
        <config>
            <role>User</role>
        </config>
        <pd:inputBindings>
            <ns3:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                </message>
                <xsl:if test="$_error/ns1:ErrorReport/MsgCode">
                    <msgCode>
                        <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                    </msgCode>
                </xsl:if>
            </ns3:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogIn">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>556</pd:x>
        <pd:y>312</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <ns2:LogRequest>
                <pfx6:Header>
                    <pfx6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </pfx6:ApplicationID>
                    <pfx6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ComponentName"/>
                    </pfx6:ComponentName>
                    <pfx6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </pfx6:Hostname>
                    <pfx6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx6:Timestamp>
                    <pfx6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </pfx6:TransactionDomain>
                    <pfx6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                    </pfx6:TransactionType>
                    <xsl:if test="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID">
                        <pfx6:TransactionID>
                            <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                        </pfx6:TransactionID>
                    </xsl:if>
                    <pfx6:Filename>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/Deployment"/>
                    </pfx6:Filename>
                    <pfx6:Message>
                        <xsl:value-of select="tib:render-xml($ParseRequest/ns15:queryAssetRequest)"/>
                    </pfx6:Message>
                </pfx6:Header>
                <TimeDuration>
                    <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Status/BPI/BPI_REQ_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns2:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="LogOut">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1638</pd:x>
        <pd:y>309</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <ns2:LogRequest>
                <pfx6:Header>
                    <pfx6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </pfx6:ApplicationID>
                    <pfx6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ComponentName"/>
                    </pfx6:ComponentName>
                    <pfx6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </pfx6:Hostname>
                    <pfx6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx6:Timestamp>
                    <pfx6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </pfx6:TransactionDomain>
                    <pfx6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                    </pfx6:TransactionType>
                    <xsl:if test="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID">
                        <pfx6:TransactionID>
                            <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                        </pfx6:TransactionID>
                    </xsl:if>
                    <pfx6:Filename>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/Deployment"/>
                    </pfx6:Filename>
                    <pfx6:Message>
                        <xsl:value-of select="tib:render-xml($Map-Data-2/root)"/>
                    </pfx6:Message>
                </pfx6:Header>
                <TimeDuration>
                    <xsl:value-of select="if(exists($ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp) and string-length($ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp) > 0)&#xA;then $ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp&#xA;else 0"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Status/BPI/BPI_RES_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns2:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseRequest">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>168</pd:x>
        <pd:y>314</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="ns15:queryAssetRequest"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/Body"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParsingError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>170</pd:x>
        <pd:y>199</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <pfx9:ActivityInput>
                <data>
                    <ns13:ErrorResponse>
                        <ns13:Error_SourceSystem>
                            <xsl:value-of select="&quot;ESB&quot;"/>
                        </ns13:Error_SourceSystem>
                        <ns13:Error_SourceErrCode>
                            <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonErrors/ParsingErrorCode"/>
                        </ns13:Error_SourceErrCode>
                        <ns13:Error_SourceErrDesc>
                            <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonErrors/ParsingErrorDesc"/>
                        </ns13:Error_SourceErrDesc>
                    </ns13:ErrorResponse>
                </data>
            </pfx9:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ReplyOnError">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>980</pd:x>
        <pd:y>526</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>ReceiveQueryCustomerAsset</EventSource>
            </ConfigurableHeaders>
        </config>
        <pd:inputBindings>
            <pfx:ActivityInput>
                <Body>
                    <xsl:value-of select="tib:render-xml($CLE_To_CDM/root)"/>
                </Body>
            </pfx:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ReplyOnSuccess">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>1510</pd:x>
        <pd:y>309</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>ReceiveQueryCustomerAsset</EventSource>
            </ConfigurableHeaders>
        </config>
        <pd:inputBindings>
            <pfx:ActivityInput>
                <Body>
                    <xsl:value-of select="tib:render-xml($Map-Data-2/root)"/>
                </Body>
            </pfx:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SuccessResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>981</pd:x>
        <pd:y>315</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:choice>
                            <xsd:element ref="pfx28:QueryResult"/>
                            <xsd:element ref="ns13:ErrorResponse"/>
                        </xsd:choice>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <pfx28:QueryResult>
                    <pfx28:ContractInfo>
                        <pfx28:ID>
                            <xsl:value-of select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBIO2CustSeqNumber"/>
                        </pfx28:ID>
                        <pfx28:Status>
                            <xsl:value-of select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:AccountStatus"/>
                        </pfx28:Status>
                        <pfx28:Segment>
                            <xsl:value-of select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:CBIO2Segment"/>
                        </pfx28:Segment>
                    </pfx28:ContractInfo>
                    <pfx28:SubscriberInfo>
                        <xsl:variable name="SubStatus" select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfSubscribers/ns15:SubscriberInformation"/>
                        <pfx28:Status>
                            <xsl:value-of select="$GetSubStatusVariable/root/ns20:ESBLOV/ns20:Record[ns20:TRANSKEY=$SubStatus/ns15:CBiO2SubscriberStatus and ns20:TRANSTYPE='QueryCustomer']/ns20:TRANSVALUE"/>
                        </pfx28:Status>
                        <pfx28:BillingType>
                            <xsl:value-of select="if($ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2LineType=&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PostpaidBillingType, &quot;,&quot;)[1])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PostpaidBillingType, &quot;,&quot;)[2]&#xA;else&#xA;if($ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2LineType=&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PrepaidBillingType, &quot;,&quot;)[1])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PrepaidBillingType, &quot;,&quot;)[2]&#xA;else&#xA;$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2LineType"/>
                        </pfx28:BillingType>
                        <pfx28:Name>
                            <xsl:value-of select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2ArabicFullName"/>
                        </pfx28:Name>
                        <pfx28:BSType>
                            <xsl:value-of select="if(upper-case($ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2ConnectionType)=&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BS_Type, &quot;,&quot;)[1])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BS_Type, &quot;,&quot;)[1]&#xA;else&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BS_Type, &quot;,&quot;)[2]"/>
                        </pfx28:BSType>
                    </pfx28:SubscriberInfo>
                    <xsl:for-each select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfAssetMgmtAsset/ns15:AssetMgmtAsset[&#xA;(not(ns15:ProductPartNumber=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1[X_ACTION_CD='Remove']/X_PART_NUM))]">
                        <pfx28:SubscriberProducts>
                            <xsl:if test="ns15:ProductPartNumber">
                                <pfx28:Code>
                                    <xsl:value-of select="ns15:ProductPartNumber"/>
                                </pfx28:Code>
                            </xsl:if>
                            <pfx28:Status>
                                <xsl:value-of select="if(ns15:Status='Active')&#xA;then&#xA;'ACTV'&#xA;else&#xA;ns15:Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="if(string-length(ns15:AssetDescription)>0)&#xA;then&#xA;ns15:AssetDescription&#xA;else&#xA;ns15:ProductName"/>
                            </pfx28:DisplayName>
                            <xsl:if test="ns15:CBiO2ProductArabicDisplayName">
                                <pfx28:ArabicDisplayName>
                                    <xsl:value-of select="ns15:CBiO2ProductArabicDisplayName"/>
                                </pfx28:ArabicDisplayName>
                            </xsl:if>
                            <xsl:if test="ns15:CBiO2ProductCategory">
                                <pfx28:Category>
                                    <xsl:value-of select="ns15:CBiO2ProductCategory"/>
                                </pfx28:Category>
                            </xsl:if>
                            <xsl:if test="ns15:CBiO2ProductSubCategory">
                                <pfx28:SubCategory>
                                    <xsl:value-of select="ns15:CBiO2ProductSubCategory"/>
                                </pfx28:SubCategory>
                            </xsl:if>
                            <pfx28:Classification>
                                <xsl:value-of select="ns15:CBiO2ProductClassification"/>
                            </pfx28:Classification>
                            <xsl:if test="string-length(ns15:StartDate)>0">
                                <pfx28:StartDate>
                                    <xsl:choose>
                                        <xsl:when test="exists(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:StartDate))">
                                            <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:StartDate)"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx28:StartDate>
                            </xsl:if>
                            <pfx28:EndDate>
                                <xsl:value-of select="if(string-length(ns15:EffectiveEndDate)>0)&#xA;then&#xA;tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:EffectiveEndDate)&#xA;else&#xA;if($ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2LineType=&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PostpaidBillingType, &quot;,&quot;)[1])&#xA;then&#xA;tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;,concat(tib:add-to-date(concat(tib:substring-before-last(current-date(), '-'),'-01'), 0, 1, -1),'T23:59:00-03:00'))&#xA;else&#xA;$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DefaultEndDate_Service"/>
                            </pfx28:EndDate>
                            <xsl:if test="count($ESI_Call_UsageDetails/root/ns18:GetUsageOutput/ns18:RatingInfo[ns18:Product=current()/ns15:ProductName])>0">
                                <pfx28:RatingInfo>
                                    <xsl:for-each select="$ESI_Call_UsageDetails/root/ns18:GetUsageOutput/ns18:RatingInfo[ns18:Product=current()/ns15:ProductName]">
                                        <pfx28:RatingInfoItem>
                                            <xsl:if test="ns18:Threshold/@unit">
                                                <pfx28:Unit>
                                                    <xsl:value-of select="ns18:Threshold/@unit"/>
                                                </pfx28:Unit>
                                            </xsl:if>
                                            <xsl:if test="ns18:Threshold">
                                                <pfx28:Quantity>
                                                    <xsl:value-of select="ns18:Threshold"/>
                                                </pfx28:Quantity>
                                            </xsl:if>
                                            <pfx28:UsedQuantity>
                                                <xsl:value-of select="ns18:Used"/>
                                            </pfx28:UsedQuantity>
                                            <pfx28:MaxLimit>
                                                <xsl:value-of select="0"/>
                                            </pfx28:MaxLimit>
                                            <pfx28:MinLimit>
                                                <xsl:value-of select="0"/>
                                            </pfx28:MinLimit>
                                            <pfx28:WarningLimit>
                                                <xsl:value-of select="0"/>
                                            </pfx28:WarningLimit>
                                            <pfx28:ExpirationDate>
                                                <xsl:choose>
                                                    <xsl:when test="exists(ns18:EndDate)">
                                                        <xsl:value-of select="ns18:EndDate"/>
                                                    </xsl:when>
                                                    <xsl:otherwise>
                                                        <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                                    </xsl:otherwise>
                                                </xsl:choose>
                                            </pfx28:ExpirationDate>
                                        </pfx28:RatingInfoItem>
                                    </xsl:for-each>
                                </pfx28:RatingInfo>
                            </xsl:if>
                            <xsl:if test="string-length(ns15:assetFlexField3)>0">
                                <pfx28:ProductSpecs>
                                    <xsl:variable name="prodSpecsVar" select="tib:tokenize(ns15:assetFlexField3, ',' )"/>
                                    <xsl:variable name="SpecNameVar" select="tib:tokenize(ns15:assetFlexField2, ',' )"/>
                                    <xsl:for-each select="$prodSpecsVar">
                                        <xsl:variable name="PositionVar" select="position()"/>
                                        <xsl:choose>
                                            <xsl:when test="contains(current(),'Unlimited')">
                                                <pfx28:ProductSpec>
                                                    <xsl:variable name="unitVar" select="translate(current(),'Unlimited ','')"/>
                                                    <pfx28:Name>
                                                        <xsl:value-of select="$SpecNameVar[$PositionVar]"/>
                                                    </pfx28:Name>
                                                    <pfx28:Value>
                                                        <xsl:value-of select="tib:trim(substring-before(current(),$unitVar))"/>
                                                    </pfx28:Value>
                                                    <pfx28:Measure>
                                                        <xsl:value-of select="$unitVar"/>
                                                    </pfx28:Measure>
                                                </pfx28:ProductSpec>
                                            </xsl:when>
                                            <xsl:otherwise>
                                                <pfx28:ProductSpec>
                                                    <xsl:variable name="unitVar" select="translate(current(),$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/TranslateValues,'')"/>
                                                    <pfx28:Name>
                                                        <xsl:value-of select="$SpecNameVar[$PositionVar]"/>
                                                    </pfx28:Name>
                                                    <pfx28:Value>
                                                        <xsl:value-of select="substring-before(current(),$unitVar)"/>
                                                    </pfx28:Value>
                                                    <pfx28:Measure>
                                                        <xsl:value-of select="$unitVar"/>
                                                    </pfx28:Measure>
                                                </pfx28:ProductSpec>
                                            </xsl:otherwise>
                                        </xsl:choose>
                                    </xsl:for-each>
                                </pfx28:ProductSpecs>
                            </xsl:if>
                            <pfx28:ProductFees>
                                <pfx28:ProductFee>
                                    <xsl:variable name="ProdFeeName" select="if(upper-case(ns15:PriceType)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PriceTypes,',')[2])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA;else&#xA;if(upper-case(ns15:PriceType)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PriceTypes,',')[1])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[2]&#xA;else&#xA;if(upper-case(ns15:PriceType)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PriceTypes,',')[3] &#xA;and &#xA;upper-case(ns15:CBiO2OfferType)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/OfferType,',')[1])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[3]&#xA;else&#xA;if(upper-case(ns15:PriceType)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PriceTypes,',')[3]&#xA; and &#xA;upper-case(ns15:UnitofMeasure)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[8])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[2]&#xA;else&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[2]"/>
                                    <pfx28:Name>
                                        <xsl:value-of select="$ProdFeeName"/>
                                    </pfx28:Name>
                                    <pfx28:Amount>
                                        <xsl:value-of select="if(string-length(ns15:AdjustedListPrice)>0)&#xA;then&#xA;ns15:AdjustedListPrice&#xA;else&#xA;0"/>
                                    </pfx28:Amount>
                                    <pfx28:RecurrencyType>
                                        <xsl:value-of select="if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[2])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[1]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[3])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[1]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA; and &#xA;upper-case(ns15:UnitofMeasure)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[5])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[5]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA; and &#xA;upper-case(ns15:UnitofMeasure)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[3])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[4]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA; and&#xA; upper-case(ns15:UnitofMeasure)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[2])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[4]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA; and &#xA;upper-case(ns15:UnitofMeasure)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[4])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[3]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA; and &#xA;upper-case(ns15:UnitofMeasure)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[1])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[2]&#xA;else&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyTypes,',')[1]"/>
                                    </pfx28:RecurrencyType>
                                    <pfx28:RecurrencyValue>
                                        <xsl:value-of select="if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[2])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyValues,',')[2]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[3])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyValues,',')[2]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA; and&#xA; upper-case(ns15:UnitofMeasure)=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[3])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyValues,',')[3]&#xA;else&#xA;if($ProdFeeName=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ProductFeeName,',')[1]&#xA; and&#xA; upper-case(ns15:UnitofMeasure)!=tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnitofMeasures,',')[3])&#xA;then&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyValues,',')[2]&#xA;else&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/RecurrencyValues,',')[2]"/>
                                    </pfx28:RecurrencyValue>
                                </pfx28:ProductFee>
                            </pfx28:ProductFees>
                            <xsl:if test="string-length(ns15:CBiO2CommitmentStartDate)>0">
                                <pfx28:CommitmentStartDate>
                                    <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentStartDate)"/>
                                </pfx28:CommitmentStartDate>
                            </xsl:if>
                            <xsl:if test="string-length(ns15:CBiO2CommitmentEndDate)>0">
                                <pfx28:CommitmentEndDate>
                                    <xsl:choose>
                                        <xsl:when test="exists(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentEndDate))">
                                            <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentEndDate)"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx28:CommitmentEndDate>
                            </xsl:if>
                            <pfx28:Params>
                                <pfx27:Param>
                                    <pfx27:Name>
                                        <xsl:value-of select="'AutoRenewFlag'"/>
                                    </pfx27:Name>
                                    <pfx27:Value>
                                        <xsl:value-of select="if(ns15:CBiO2AutoRenewalFlag='Y')&#xA;then&#xA;'ON'&#xA;else&#xA;'OFF'"/>
                                    </pfx27:Value>
                                </pfx27:Param>
                            </pfx28:Params>
                        </pfx28:SubscriberProducts>
                    </xsl:for-each>
                    <xsl:for-each select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfAssetMgmtAsset/ns15:AssetMgmtAsset[&#xA;(not(ns15:ProductPartNumber=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1[X_ACTION_CD='Remove']/X_PART_NUM))&#xA;and&#xA;ns15:assetFlexField4='Y']">
                        <pfx28:SubscriberProducts>
                            <pfx28:Code>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/Code"/>
                            </pfx28:Code>
                            <pfx28:Status>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/DisplayName"/>
                            </pfx28:DisplayName>
                            <pfx28:ArabicDisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ArabicDisplayName"/>
                            </pfx28:ArabicDisplayName>
                            <pfx28:Classification>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/Classification"/>
                            </pfx28:Classification>
                            <xsl:if test="string-length(ns15:StartDate)>0">
                                <pfx28:StartDate>
                                    <xsl:choose>
                                        <xsl:when test="exists(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:StartDate))">
                                            <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:StartDate)"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx28:StartDate>
                            </xsl:if>
                            <pfx28:EndDate>
                                <xsl:value-of select="if(string-length(ns15:EffectiveEndDate)>0)&#xA;then&#xA;tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:EffectiveEndDate)&#xA;else&#xA;if($ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2LineType=&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PostpaidBillingType, &quot;,&quot;)[1])&#xA;then&#xA;tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;,concat(tib:add-to-date(concat(tib:substring-before-last(current-date(), '-'),'-01'), 0, 1, -1),'T23:59:00-03:00'))&#xA;else&#xA;$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DefaultEndDate_Service"/>
                            </pfx28:EndDate>
                            <pfx28:ProductFees>
                                <pfx28:ProductFee>
                                    <pfx28:Name>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_Name, '|')[1]"/>
                                    </pfx28:Name>
                                    <pfx28:Amount>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_Amount"/>
                                    </pfx28:Amount>
                                    <xsl:if test="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_RecurrencyType, '|')[1]">
                                        <pfx28:RecurrencyType>
                                            <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_RecurrencyType, '|')[1]"/>
                                        </pfx28:RecurrencyType>
                                    </xsl:if>
                                    <pfx28:RecurrencyValue>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_RecurrencyValue"/>
                                    </pfx28:RecurrencyValue>
                                </pfx28:ProductFee>
                            </pfx28:ProductFees>
                            <pfx28:ProductFees>
                                <pfx28:ProductFee>
                                    <pfx28:Name>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_Name, '|')[2]"/>
                                    </pfx28:Name>
                                    <pfx28:Amount>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_Amount"/>
                                    </pfx28:Amount>
                                    <pfx28:RecurrencyType>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_RecurrencyType, '|')[2]"/>
                                    </pfx28:RecurrencyType>
                                    <pfx28:RecurrencyValue>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/ProductFee_RecurrencyValue"/>
                                    </pfx28:RecurrencyValue>
                                </pfx28:ProductFee>
                            </pfx28:ProductFees>
                            <xsl:if test="string-length(ns15:CBiO2CommitmentStartDate)>0">
                                <pfx28:CommitmentStartDate>
                                    <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentStartDate)"/>
                                </pfx28:CommitmentStartDate>
                            </xsl:if>
                            <xsl:if test="string-length(ns15:CBiO2CommitmentEndDate)>0">
                                <pfx28:CommitmentEndDate>
                                    <xsl:choose>
                                        <xsl:when test="exists(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentEndDate))">
                                            <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentEndDate)"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx28:CommitmentEndDate>
                            </xsl:if>
                            <pfx28:Params>
                                <pfx27:Param>
                                    <pfx27:Name>
                                        <xsl:value-of select="'AutoRenewFlag'"/>
                                    </pfx27:Name>
                                    <pfx27:Value>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE/AutoRenewFlag"/>
                                    </pfx27:Value>
                                </pfx27:Param>
                            </pfx28:Params>
                        </pfx28:SubscriberProducts>
                    </xsl:for-each>
                    <xsl:for-each select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfAssetMgmtAsset/ns15:AssetMgmtAsset[&#xA;(not(ns15:ProductPartNumber=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1[X_ACTION_CD='Remove']/X_PART_NUM))&#xA;and&#xA;ns15:ProductName=$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductName]">
                        <pfx28:SubscriberProducts>
                            <pfx28:Code>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/Code"/>
                            </pfx28:Code>
                            <pfx28:Status>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/DisplayName"/>
                            </pfx28:DisplayName>
                            <pfx28:ArabicDisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ArabicDisplayName"/>
                            </pfx28:ArabicDisplayName>
                            <pfx28:Classification>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/Classification"/>
                            </pfx28:Classification>
                            <xsl:if test="string-length(ns15:StartDate)>0">
                                <pfx28:StartDate>
                                    <xsl:choose>
                                        <xsl:when test="exists(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:StartDate))">
                                            <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:StartDate)"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx28:StartDate>
                            </xsl:if>
                            <pfx28:EndDate>
                                <xsl:value-of select="if(string-length(ns15:EffectiveEndDate)>0)&#xA;then&#xA;tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:EffectiveEndDate)&#xA;else&#xA;if($ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account[1]/ns15:ListOfSubscribers/ns15:SubscriberInformation[1]/ns15:CBiO2LineType=&#xA;tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/PostpaidBillingType, &quot;,&quot;)[1])&#xA;then&#xA;tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;,concat(tib:add-to-date(concat(tib:substring-before-last(current-date(), '-'),'-01'), 0, 1, -1),'T23:59:00-03:00'))&#xA;else&#xA;$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DefaultEndDate_Service"/>
                            </pfx28:EndDate>
                            <pfx28:ProductFees>
                                <pfx28:ProductFee>
                                    <pfx28:Name>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_Name, '|')[1]"/>
                                    </pfx28:Name>
                                    <pfx28:Amount>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_Amount"/>
                                    </pfx28:Amount>
                                    <pfx28:RecurrencyType>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_RecurrencyType, '|')[1]"/>
                                    </pfx28:RecurrencyType>
                                    <pfx28:RecurrencyValue>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_RecurrencyValue"/>
                                    </pfx28:RecurrencyValue>
                                </pfx28:ProductFee>
                            </pfx28:ProductFees>
                            <pfx28:ProductFees>
                                <pfx28:ProductFee>
                                    <pfx28:Name>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_Name, '|')[2]"/>
                                    </pfx28:Name>
                                    <pfx28:Amount>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_Amount"/>
                                    </pfx28:Amount>
                                    <pfx28:RecurrencyType>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_RecurrencyType, '|')[2]"/>
                                    </pfx28:RecurrencyType>
                                    <pfx28:RecurrencyValue>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/ProductFee_RecurrencyValue"/>
                                    </pfx28:RecurrencyValue>
                                </pfx28:ProductFee>
                            </pfx28:ProductFees>
                            <xsl:if test="string-length(ns15:CBiO2CommitmentStartDate)>0">
                                <pfx28:CommitmentStartDate>
                                    <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentStartDate)"/>
                                </pfx28:CommitmentStartDate>
                            </xsl:if>
                            <xsl:if test="string-length(ns15:CBiO2CommitmentEndDate)>0">
                                <pfx28:CommitmentEndDate>
                                    <xsl:choose>
                                        <xsl:when test="exists(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentEndDate))">
                                            <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentEndDate)"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                        </xsl:otherwise>
                                    </xsl:choose>
                                </pfx28:CommitmentEndDate>
                            </xsl:if>
                            <pfx28:Params>
                                <pfx27:Param>
                                    <pfx27:Name>
                                        <xsl:value-of select="'AutoRenewFlag'"/>
                                    </pfx27:Name>
                                    <pfx27:Value>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/DATASHARE2/AutoRenewFlag"/>
                                    </pfx27:Value>
                                </pfx27:Param>
                            </pfx28:Params>
                        </pfx28:SubscriberProducts>
                    </xsl:for-each>
                    <xsl:for-each select="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfAssetMgmtAsset/ns15:AssetMgmtAsset[&#xA;(not(ns15:ProductPartNumber=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1[X_ACTION_CD='Remove']/X_PART_NUM))&#xA;and&#xA;ns15:assetFlexField5='Y']">
                        <pfx28:SubscriberProducts>
                            <pfx28:Code>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/Code"/>
                            </pfx28:Code>
                            <pfx28:Status>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/DisplayName"/>
                            </pfx28:DisplayName>
                            <pfx28:ArabicDisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ArabicDisplayName"/>
                            </pfx28:ArabicDisplayName>
                            <pfx28:StartDate>
                                <xsl:choose>
                                    <xsl:when test="exists(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, &#xA;concat(tib:substring-before-last(current-date(), '-'),'-01','T00:00:00-03:00')))">
                                        <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, &#xA;concat(tib:substring-before-last(current-date(), '-'),'-01','T00:00:00-03:00'))"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </pfx28:StartDate>
                            <pfx28:EndDate>
                                <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;,concat(tib:add-to-date(concat(tib:substring-before-last(current-date(), '-'),'-01'), 0, 1, -1),'T00:00:00-03:00'))"/>
                            </pfx28:EndDate>
                            <pfx28:ProductFees>
                                <pfx28:ProductFee>
                                    <pfx28:Name>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_Name, '|')[1]"/>
                                    </pfx28:Name>
                                    <pfx28:Amount>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_Amount"/>
                                    </pfx28:Amount>
                                    <pfx28:RecurrencyType>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_RecurrencyType, '|')[1]"/>
                                    </pfx28:RecurrencyType>
                                    <pfx28:RecurrencyValue>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_RecurrencyValue"/>
                                    </pfx28:RecurrencyValue>
                                </pfx28:ProductFee>
                            </pfx28:ProductFees>
                            <pfx28:ProductFees>
                                <pfx28:ProductFee>
                                    <pfx28:Name>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_Name, '|')[2]"/>
                                    </pfx28:Name>
                                    <pfx28:Amount>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_Amount"/>
                                    </pfx28:Amount>
                                    <pfx28:RecurrencyType>
                                        <xsl:value-of select="tib:tokenize($_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_RecurrencyType, '|')[2]"/>
                                    </pfx28:RecurrencyType>
                                    <pfx28:RecurrencyValue>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/ProductFee_RecurrencyValue"/>
                                    </pfx28:RecurrencyValue>
                                </pfx28:ProductFee>
                            </pfx28:ProductFees>
                            <xsl:if test="string-length(ns15:CBiO2CommitmentStartDate)>0">
                                <pfx28:CommitmentStartDate>
                                    <xsl:value-of select="tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;, ns15:CBiO2CommitmentStartDate)"/>
                                </pfx28:CommitmentStartDate>
                            </xsl:if>
                            <pfx28:Params>
                                <pfx27:Param>
                                    <pfx27:Name>
                                        <xsl:value-of select="'AutoRenewFlag'"/>
                                    </pfx27:Name>
                                    <pfx27:Value>
                                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/HIDEBALANCE/AutoRenewFlag"/>
                                    </pfx27:Value>
                                </pfx27:Param>
                            </pfx28:Params>
                        </pfx28:SubscriberProducts>
                    </xsl:for-each>
                    <xsl:if test="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfSubscribers/ns15:SubscriberInformation/ns15:CBIO2BlockCampaignFlg='Y'">
                        <pfx28:SubscriberProducts>
                            <pfx28:Code>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BlockCampaign/Code"/>
                            </pfx28:Code>
                            <pfx28:Status>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BlockCampaign/Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BlockCampaign/DisplayName"/>
                            </pfx28:DisplayName>
                        </pfx28:SubscriberProducts>
                    </xsl:if>
                    <xsl:if test="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfSubscribers/ns15:SubscriberInformation/ns15:CBIO2BlockDialerOutboundFlg='Y'">
                        <pfx28:SubscriberProducts>
                            <pfx28:Code>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BlockDialerOutbound/Code"/>
                            </pfx28:Code>
                            <pfx28:Status>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BlockDialerOutbound/Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/BlockDialerOutbound/DisplayName"/>
                            </pfx28:DisplayName>
                        </pfx28:SubscriberProducts>
                    </xsl:if>
                    <xsl:if test="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfSubscribers/ns15:SubscriberInformation/ns15:CBIO2ZainCampusBlockerFlg='Y'">
                        <pfx28:SubscriberProducts>
                            <pfx28:Code>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ZainCampusBlocker/Code"/>
                            </pfx28:Code>
                            <pfx28:Status>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ZainCampusBlocker/Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/ZainCampusBlocker/DisplayName"/>
                            </pfx28:DisplayName>
                        </pfx28:SubscriberProducts>
                    </xsl:if>
                    <xsl:if test="$ESI_Call_QueryCustomerAsset/response/ns15:queryAssetResponse/ns15:ListOfCbio2QueryAssetIo/ns15:Account/ns15:ListOfSubscribers/ns15:SubscriberInformation/ns15:CBIO2UnableToTransferOwnerFlg='Y'">
                        <pfx28:SubscriberProducts>
                            <pfx28:Code>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnableToTransferOwner/Code"/>
                            </pfx28:Code>
                            <pfx28:Status>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnableToTransferOwner/Status"/>
                            </pfx28:Status>
                            <pfx28:DisplayName>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UnableToTransferOwner/DisplayName"/>
                            </pfx28:DisplayName>
                        </pfx28:SubscriberProducts>
                    </xsl:if>
                </pfx28:QueryResult>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>978</pd:x>
        <pd:y>438</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ESI_Call_AddAsyncService">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>758</pd:x>
        <pd:y>183</pd:y>
        <config>
            <processName>/BusinessProcesses/Services/Query/QueryCustomerAsset/HelperProcess/ESI_Call_AddAsyncService.process</processName>
        </config>
        <pd:inputBindings>
            <root>
                <ns15:queryAssetRequest>
                    <xsl:if test="$ParseRequest/ns15:queryAssetRequest/ns15:MSISDN">
                        <ns15:MSISDN>
                            <xsl:value-of select="$ParseRequest/ns15:queryAssetRequest/ns15:MSISDN"/>
                        </ns15:MSISDN>
                    </xsl:if>
                </ns15:queryAssetRequest>
                <TransactionId>
                    <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                </TransactionId>
                <StartTimeStamp>
                    <xsl:value-of select="$ReceiveQueryCustomerAsset/pfx:ActivityOutput/OtherProperties/StartTimeStamp"/>
                </StartTimeStamp>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetServiceCategory">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>429</pd:x>
        <pd:y>312</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariables/Internal/ServiceCategoryCheck.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Null-1">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>983</pd:x>
        <pd:y>184</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1205</pd:x>
        <pd:y>314</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element ref="pfx28:QueryResult"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <pfx28:QueryResult>
                    <xsl:copy-of select="$SuccessResponse/root/pfx28:QueryResult/pfx28:ContractInfo"/>
                    <xsl:copy-of select="$SuccessResponse/root/pfx28:QueryResult/pfx28:SubscriberInfo"/>
                    <xsl:for-each select="$SuccessResponse/root/pfx28:QueryResult/pfx28:SubscriberProducts[&#xA;not(pfx28:Category=$Map-Data-1/pfx29:root/pfx29:Category/pfx29:Record)]">
                        <pfx28:SubscriberProducts>
                            <xsl:if test="pfx28:Code">
                                <pfx28:Code>
                                    <xsl:value-of select="pfx28:Code"/>
                                </pfx28:Code>
                            </xsl:if>
                            <xsl:if test="pfx28:Status">
                                <pfx28:Status>
                                    <xsl:value-of select="pfx28:Status"/>
                                </pfx28:Status>
                            </xsl:if>
                            <xsl:if test="pfx28:DisplayName">
                                <pfx28:DisplayName>
                                    <xsl:value-of select="pfx28:DisplayName"/>
                                </pfx28:DisplayName>
                            </xsl:if>
                            <xsl:if test="pfx28:ArabicDisplayName">
                                <pfx28:ArabicDisplayName>
                                    <xsl:value-of select="pfx28:ArabicDisplayName"/>
                                </pfx28:ArabicDisplayName>
                            </xsl:if>
                            <xsl:if test="pfx28:Category">
                                <pfx28:Category>
                                    <xsl:value-of select="pfx28:Category"/>
                                </pfx28:Category>
                            </xsl:if>
                            <xsl:if test="pfx28:SubCategory">
                                <pfx28:SubCategory>
                                    <xsl:value-of select="pfx28:SubCategory"/>
                                </pfx28:SubCategory>
                            </xsl:if>
                            <xsl:if test="pfx28:Classification">
                                <pfx28:Classification>
                                    <xsl:value-of select="pfx28:Classification"/>
                                </pfx28:Classification>
                            </xsl:if>
                            <xsl:if test="string-length(pfx28:StartDate)>0">
                                <pfx28:StartDate>
                                    <xsl:value-of select="concat(pfx28:StartDate,'.','001')"/>
                                </pfx28:StartDate>
                            </xsl:if>
                            <xsl:if test="string-length(pfx28:EndDate)>0">
                                <pfx28:EndDate>
                                    <xsl:value-of select="concat(pfx28:EndDate,'.','001')"/>
                                </pfx28:EndDate>
                            </xsl:if>
                            <xsl:for-each select="pfx28:RatingInfo">
                                <pfx28:RatingInfo>
                                    <xsl:for-each select="pfx28:RatingInfoItem">
                                        <pfx28:RatingInfoItem>
                                            <xsl:if test="pfx28:Unit">
                                                <pfx28:Unit>
                                                    <xsl:value-of select="pfx28:Unit"/>
                                                </pfx28:Unit>
                                            </xsl:if>
                                            <xsl:if test="pfx28:Quantity">
                                                <pfx28:Quantity>
                                                    <xsl:value-of select="pfx28:Quantity"/>
                                                </pfx28:Quantity>
                                            </xsl:if>
                                            <xsl:if test="pfx28:UsedQuantity">
                                                <pfx28:UsedQuantity>
                                                    <xsl:value-of select="pfx28:UsedQuantity"/>
                                                </pfx28:UsedQuantity>
                                            </xsl:if>
                                            <xsl:if test="pfx28:MaxLimit">
                                                <pfx28:MaxLimit>
                                                    <xsl:value-of select="pfx28:MaxLimit"/>
                                                </pfx28:MaxLimit>
                                            </xsl:if>
                                            <xsl:if test="pfx28:MinLimit">
                                                <pfx28:MinLimit>
                                                    <xsl:value-of select="pfx28:MinLimit"/>
                                                </pfx28:MinLimit>
                                            </xsl:if>
                                            <xsl:if test="pfx28:WarningLimit">
                                                <pfx28:WarningLimit>
                                                    <xsl:value-of select="pfx28:WarningLimit"/>
                                                </pfx28:WarningLimit>
                                            </xsl:if>
                                            <xsl:if test="pfx28:ExpirationDate">
                                                <pfx28:ExpirationDate>
                                                    <xsl:copy-of select="pfx28:ExpirationDate/@xsi:nil"/>
                                                    <xsl:value-of select="pfx28:ExpirationDate"/>
                                                </pfx28:ExpirationDate>
                                            </xsl:if>
                                        </pfx28:RatingInfoItem>
                                    </xsl:for-each>
                                </pfx28:RatingInfo>
                            </xsl:for-each>
                            <xsl:for-each select="pfx28:ProductSpecs">
                                <pfx28:ProductSpecs>
                                    <xsl:for-each select="pfx28:ProductSpec">
                                        <pfx28:ProductSpec>
                                            <pfx28:Name>
                                                <xsl:value-of select="pfx28:Name"/>
                                            </pfx28:Name>
                                            <pfx28:Value>
                                                <xsl:value-of select="pfx28:Value"/>
                                            </pfx28:Value>
                                            <pfx28:Measure>
                                                <xsl:value-of select="pfx28:Measure"/>
                                            </pfx28:Measure>
                                        </pfx28:ProductSpec>
                                    </xsl:for-each>
                                </pfx28:ProductSpecs>
                            </xsl:for-each>
                            <xsl:for-each select="pfx28:ProductFees">
                                <pfx28:ProductFees>
                                    <xsl:for-each select="pfx28:ProductFee">
                                        <pfx28:ProductFee>
                                            <pfx28:Name>
                                                <xsl:value-of select="pfx28:Name"/>
                                            </pfx28:Name>
                                            <pfx28:Amount>
                                                <xsl:value-of select="pfx28:Amount"/>
                                            </pfx28:Amount>
                                            <xsl:if test="pfx28:RecurrencyType">
                                                <pfx28:RecurrencyType>
                                                    <xsl:value-of select="pfx28:RecurrencyType"/>
                                                </pfx28:RecurrencyType>
                                            </xsl:if>
                                            <xsl:if test="pfx28:RecurrencyValue">
                                                <pfx28:RecurrencyValue>
                                                    <xsl:value-of select="pfx28:RecurrencyValue"/>
                                                </pfx28:RecurrencyValue>
                                            </xsl:if>
                                        </pfx28:ProductFee>
                                    </xsl:for-each>
                                </pfx28:ProductFees>
                            </xsl:for-each>
                            <xsl:if test="string-length(pfx28:CommitmentStartDate)>0">
                                <xsl:if test="pfx28:CommitmentStartDate">
                                    <pfx28:CommitmentStartDate>
                                        <xsl:copy-of select="pfx28:CommitmentStartDate/@xsi:nil"/>
                                        <xsl:value-of select="pfx28:CommitmentStartDate"/>
                                    </pfx28:CommitmentStartDate>
                                </xsl:if>
                            </xsl:if>
                            <xsl:if test="string-length(pfx28:CommitmentEndDate)>0">
                                <xsl:if test="pfx28:CommitmentEndDate">
                                    <pfx28:CommitmentEndDate>
                                        <xsl:copy-of select="pfx28:CommitmentEndDate/@xsi:nil"/>
                                        <xsl:value-of select="pfx28:CommitmentEndDate"/>
                                    </pfx28:CommitmentEndDate>
                                </xsl:if>
                            </xsl:if>
                            <xsl:for-each select="pfx28:Params">
                                <pfx28:Params>
                                    <xsl:for-each select="pfx27:Param">
                                        <pfx27:Param>
                                            <pfx27:Name>
                                                <xsl:value-of select="pfx27:Name"/>
                                            </pfx27:Name>
                                            <pfx27:Value>
                                                <xsl:value-of select="pfx27:Value"/>
                                            </pfx27:Value>
                                        </pfx27:Param>
                                    </xsl:for-each>
                                </pfx28:Params>
                            </xsl:for-each>
                        </pfx28:SubscriberProducts>
                    </xsl:for-each>
                    <xsl:if test="count($ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1[X_ACTION_CD='Add'])>0">
                        <xsl:for-each select="$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1[X_ACTION_CD='Add']">
                            <pfx28:SubscriberProducts>
                                <xsl:if test="current()/X_PART_NUM">
                                    <pfx28:Code>
                                        <xsl:value-of select="current()/X_PART_NUM"/>
                                    </pfx28:Code>
                                </xsl:if>
                                <xsl:if test="current()/X_PROD_NAME">
                                    <pfx28:DisplayName>
                                        <xsl:value-of select="current()/X_PROD_NAME"/>
                                    </pfx28:DisplayName>
                                </xsl:if>
                                <xsl:if test="$GetServiceCategory/ns19:Record/ns19:Records[ns19:PART_NUM=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1/X_PART_NUM]/ns19:CATEGORY">
                                    <pfx28:Category>
                                        <xsl:value-of select="$GetServiceCategory/ns19:Record/ns19:Records[ns19:PART_NUM=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1/X_PART_NUM]/ns19:CATEGORY"/>
                                    </pfx28:Category>
                                </xsl:if>
                                <xsl:if test="$GetServiceCategory/ns19:Record/ns19:Records[ns19:PART_NUM=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1/X_PART_NUM]/ns19:CLASSIFICATION">
                                    <pfx28:Classification>
                                        <xsl:value-of select="$GetServiceCategory/ns19:Record/ns19:Records[ns19:PART_NUM=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1/X_PART_NUM]/ns19:CLASSIFICATION"/>
                                    </pfx28:Classification>
                                </xsl:if>
                                <pfx28:StartDate>
                                    <xsl:value-of select="concat(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;,concat(tib:substring-before-last(current-date(), '-'),'-01','T00:00:00-03:00')),'.','001')"/>
                                </pfx28:StartDate>
                                <pfx28:EndDate>
                                    <xsl:value-of select="concat(tib:format-dateTime(&quot;yyyy-MM-dd'T'HH:mm:ss&quot;,concat(tib:add-to-date(concat(tib:substring-before-last(current-date(), '-'),'-01'), 0, 1, -1),'T00:00:00-03:00')),'.','001')"/>
                                </pfx28:EndDate>
                            </pfx28:SubscriberProducts>
                        </xsl:for-each>
                    </xsl:if>
                </pfx28:QueryResult>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-1">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1082</pd:x>
        <pd:y>198</pd:y>
        <config>
            <element ref="pfx29:root"/>
        </config>
        <pd:inputBindings>
            <pfx29:root>
                <xsl:for-each select="$GetServiceCategory/ns19:Record/ns19:Records[ns19:PART_NUM=$ESI_Call_AddAsyncService/response/Resultsets/ResultSet1/Record1[X_ACTION_CD='Add']/X_PART_NUM]">
                    <pfx29:Category>
                        <xsl:if test="ns19:CATEGORY">
                            <pfx29:Record>
                                <xsl:value-of select="ns19:CATEGORY"/>
                            </pfx29:Record>
                        </xsl:if>
                    </pfx29:Category>
                </xsl:for-each>
            </pfx29:root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetSubStatusVariable">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>293</pd:x>
        <pd:y>312</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariables/Internal/ESBLOV.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Map-Data-2">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1356</pd:x>
        <pd:y>311</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element ref="pfx28:QueryResult"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <pfx28:QueryResult>
                    <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:ContractInfo"/>
                    <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberInfo"/>
                    <xsl:for-each select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts">
                        <xsl:variable name="ClassificationList" select="tib:tokenize(pfx28:Classification,&quot;,&quot;)"/>
                        <xsl:variable name="AssetPosition" select="position()"/>
                        <xsl:choose>
                            <xsl:when test="count($ClassificationList)>1">
                                <xsl:for-each select="$ClassificationList">
                                    <xsl:variable name="ClassificationPosition" select="position()"/>
                                    <pfx28:SubscriberProducts>
                                        <pfx28:Code>
                                            <xsl:value-of select="concat($Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:Code,'-',&#xA;$ClassificationList[$ClassificationPosition])"/>
                                        </pfx28:Code>
                                        <pfx28:Status>
                                            <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:Status"/>
                                        </pfx28:Status>
                                        <pfx28:DisplayName>
                                            <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:DisplayName"/>
                                        </pfx28:DisplayName>
                                        <pfx28:ArabicDisplayName>
                                            <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:ArabicDisplayName"/>
                                        </pfx28:ArabicDisplayName>
                                        <pfx28:Category>
                                            <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:Category"/>
                                        </pfx28:Category>
                                        <pfx28:SubCategory>
                                            <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:SubCategory"/>
                                        </pfx28:SubCategory>
                                        <pfx28:Classification>
                                            <xsl:value-of select="if(upper-case($ClassificationList[$ClassificationPosition])='DATA')&#xA;then&#xA;'GPRS'&#xA;else&#xA;$ClassificationList[$ClassificationPosition]"/>
                                        </pfx28:Classification>
                                        <xsl:if test="string-length($Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:StartDate)>0">
                                            <pfx28:StartDate>
                                                <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:StartDate/@xsi:nil"/>
                                                <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:StartDate"/>
                                            </pfx28:StartDate>
                                        </xsl:if>
                                        <xsl:if test="string-length($Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:EndDate)>0">
                                            <pfx28:EndDate>
                                                <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:EndDate/@xsi:nil"/>
                                                <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:EndDate"/>
                                            </pfx28:EndDate>
                                        </xsl:if>
                                        <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:RatingInfo"/>
                                        <xsl:for-each select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:ProductSpecs">
                                            <pfx28:ProductSpecs>
                                                <xsl:for-each select="pfx28:ProductSpec">
                                                    <pfx28:ProductSpec>
                                                        <pfx28:Name>
                                                            <xsl:value-of select="pfx28:Name"/>
                                                        </pfx28:Name>
                                                        <pfx28:Value>
                                                            <xsl:value-of select="pfx28:Value"/>
                                                        </pfx28:Value>
                                                        <pfx28:Measure>
                                                            <xsl:value-of select="if(upper-case(pfx28:Measure)='M')&#xA;then&#xA;'Min'&#xA;else&#xA;pfx28:Measure"/>
                                                        </pfx28:Measure>
                                                    </pfx28:ProductSpec>
                                                </xsl:for-each>
                                            </pfx28:ProductSpecs>
                                        </xsl:for-each>
                                        <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:ProductFees"/>
                                        <xsl:if test="string-length($Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:CommitmentStartDate)>0">
                                            <pfx28:CommitmentStartDate>
                                                <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:CommitmentStartDate/@xsi:nil"/>
                                                <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:CommitmentStartDate"/>
                                            </pfx28:CommitmentStartDate>
                                        </xsl:if>
                                        <xsl:if test="string-length($Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:CommitmentEndDate)>0">
                                            <pfx28:CommitmentEndDate>
                                                <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:CommitmentEndDate/@xsi:nil"/>
                                                <xsl:value-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:CommitmentEndDate"/>
                                            </pfx28:CommitmentEndDate>
                                        </xsl:if>
                                        <xsl:copy-of select="$Map-Data/root/pfx28:QueryResult/pfx28:SubscriberProducts[$AssetPosition]/pfx28:Params"/>
                                    </pfx28:SubscriberProducts>
                                </xsl:for-each>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx28:SubscriberProducts>
                                    <xsl:if test="pfx28:Code">
                                        <pfx28:Code>
                                            <xsl:value-of select="pfx28:Code"/>
                                        </pfx28:Code>
                                    </xsl:if>
                                    <pfx28:Status>
                                        <xsl:value-of select="pfx28:Status"/>
                                    </pfx28:Status>
                                    <pfx28:DisplayName>
                                        <xsl:value-of select="pfx28:DisplayName"/>
                                    </pfx28:DisplayName>
                                    <xsl:if test="pfx28:ArabicDisplayName">
                                        <pfx28:ArabicDisplayName>
                                            <xsl:value-of select="pfx28:ArabicDisplayName"/>
                                        </pfx28:ArabicDisplayName>
                                    </xsl:if>
                                    <xsl:if test="pfx28:Category">
                                        <pfx28:Category>
                                            <xsl:value-of select="pfx28:Category"/>
                                        </pfx28:Category>
                                    </xsl:if>
                                    <xsl:if test="pfx28:SubCategory">
                                        <pfx28:SubCategory>
                                            <xsl:value-of select="pfx28:SubCategory"/>
                                        </pfx28:SubCategory>
                                    </xsl:if>
                                    <pfx28:Classification>
                                        <xsl:value-of select="if(upper-case(pfx28:Classification)='DATA')&#xA;then&#xA;'GPRS'&#xA;else&#xA;pfx28:Classification"/>
                                    </pfx28:Classification>
                                    <xsl:if test="string-length(pfx28:StartDate)>0">
                                        <xsl:if test="pfx28:StartDate">
                                            <pfx28:StartDate>
                                                <xsl:copy-of select="pfx28:StartDate/@xsi:nil"/>
                                                <xsl:value-of select="pfx28:StartDate"/>
                                            </pfx28:StartDate>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="string-length(pfx28:EndDate)>0">
                                        <xsl:if test="pfx28:EndDate">
                                            <pfx28:EndDate>
                                                <xsl:copy-of select="pfx28:EndDate/@xsi:nil"/>
                                                <xsl:value-of select="pfx28:EndDate"/>
                                            </pfx28:EndDate>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:copy-of select="pfx28:RatingInfo"/>
                                    <xsl:for-each select="pfx28:ProductSpecs">
                                        <pfx28:ProductSpecs>
                                            <xsl:for-each select="pfx28:ProductSpec">
                                                <pfx28:ProductSpec>
                                                    <pfx28:Name>
                                                        <xsl:value-of select="pfx28:Name"/>
                                                    </pfx28:Name>
                                                    <pfx28:Value>
                                                        <xsl:value-of select="pfx28:Value"/>
                                                    </pfx28:Value>
                                                    <pfx28:Measure>
                                                        <xsl:value-of select="if(upper-case(pfx28:Measure)='M')&#xA;then&#xA;'Min'&#xA;else&#xA;pfx28:Measure"/>
                                                    </pfx28:Measure>
                                                </pfx28:ProductSpec>
                                            </xsl:for-each>
                                        </pfx28:ProductSpecs>
                                    </xsl:for-each>
                                    <xsl:copy-of select="pfx28:ProductFees"/>
                                    <xsl:if test="string-length(pfx28:CommitmentStartDate)>0">
                                        <xsl:if test="pfx28:CommitmentStartDate">
                                            <pfx28:CommitmentStartDate>
                                                <xsl:copy-of select="pfx28:CommitmentStartDate/@xsi:nil"/>
                                                <xsl:value-of select="pfx28:CommitmentStartDate"/>
                                            </pfx28:CommitmentStartDate>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:if test="string-length(pfx28:CommitmentEndDate)>0">
                                        <xsl:if test="pfx28:CommitmentEndDate">
                                            <pfx28:CommitmentEndDate>
                                                <xsl:copy-of select="pfx28:CommitmentEndDate/@xsi:nil"/>
                                                <xsl:value-of select="pfx28:CommitmentEndDate"/>
                                            </pfx28:CommitmentEndDate>
                                        </xsl:if>
                                    </xsl:if>
                                    <xsl:copy-of select="pfx28:Params"/>
                                </pfx28:SubscriberProducts>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:for-each>
                </pfx28:QueryResult>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>ErrorHandler</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorHandler</pd:from>
        <pd:to>CLE_To_CDM</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogIn</pd:from>
        <pd:to>ESI_Call_QueryCustomerAsset</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogOut</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CLE_To_CDM</pd:from>
        <pd:to>Log</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-52429</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseRequest</pd:from>
        <pd:to>GetSubStatusVariable</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorLog</pd:from>
        <pd:to>End</pd:to>
        <pd:xpathDescription/>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ReplyOnSuccess</pd:from>
        <pd:to>LogOut</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseRequest</pd:from>
        <pd:to>ParsingError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ReceiveQueryCustomerAsset</pd:from>
        <pd:to>JMSReceiverError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log</pd:from>
        <pd:to>ErrorLog</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CLE_To_CDM</pd:from>
        <pd:to>ReplyOnError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ReplyOnError</pd:from>
        <pd:to>ErrorLog</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ReplyOnError</pd:from>
        <pd:to>Log</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ReceiveQueryCustomerAsset</pd:from>
        <pd:to>ParseRequest</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SuccessResponse</pd:from>
        <pd:to>Map-Data-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ESI_Call_UsageDetails</pd:from>
        <pd:to>SuccessResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ESI_Call_QueryCustomerAsset</pd:from>
        <pd:to>SuccessResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogIn</pd:from>
        <pd:to>ESI_Call_UsageDetails</pd:to>
        <pd:xpathDescription>UsageCall</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Query/AssetQuery/UsageCallFlag='Y'</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>ESI_Call_UsageDetails</pd:from>
        <pd:to>Null</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-52480</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>SuccessResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>LogIn</pd:from>
        <pd:to>ESI_Call_AddAsyncService</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ESI_Call_AddAsyncService</pd:from>
        <pd:to>SuccessResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetServiceCategory</pd:from>
        <pd:to>LogIn</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ESI_Call_AddAsyncService</pd:from>
        <pd:to>Null-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>SuccessResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>Map-Data-2</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-1</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetSubStatusVariable</pd:from>
        <pd:to>GetServiceCategory</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-2</pd:from>
        <pd:to>ReplyOnSuccess</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>