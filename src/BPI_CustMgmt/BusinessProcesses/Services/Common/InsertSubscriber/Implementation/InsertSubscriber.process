<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx6="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/contactPerson" xmlns:pfx301="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTAResponse.xsd" xmlns:pfx7="http://www.tibco.com/pe/SignalInActivitySchema" xmlns:pfx421="http://www.zain.com/ZESB/Services/AuthorizeCredit/Types" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XML/AccountCreationReq_13Jan2012.xsd" xmlns:pfx9="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" xmlns:pfx51="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Common/ExternalChannelOrderSubmission/Implementation/CRMSyncServiceResponse.xsd" xmlns:pfx2="http://siebel.com/CustomUI" xmlns:pfx52="http://www.zain.kw.com/BSS/OrderManagement/managedServices" xmlns:pfx3="http://www.zain.com/ZESB/Services/Inventory/ERPCmnSchema.xsd" xmlns:pfx4="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Res" xmlns:pfx50="http://www.tibco.com/schemas/ESI_CRM/BusinessProcesses/Services/Query/QuerySyncService/HelperProcess/Schema.xsd" xmlns:pfx5="http://xmlns.example.com/1323156482391/OperationImpl" xmlns:ns0="http://www.zain.com/ZESB/Services/Inventory/ReserveInventoryRequest.xsd" xmlns:ns2="http://www.ericsson.com/BusinessSchemas/Services/Common/JMSSchema/JMSHeader.xsd" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:ns4="http://www.zain.com/ZESB/Types/Common" xmlns:ns3="http://www.zain.com/ZESB/Services/UpsertCustomer/Types" xmlns:ns6="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/StorageMediumDetailsRead.xsd" xmlns:ns52="http://xmlns.zain.jo.org/CDM/CustomerAndOrder" xmlns:ns5="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/Common/NumReservResponse.xsd" xmlns:ns51="www.tibco.com/createcustomer" xmlns:ns8="http://xmlns.zain.com/BSS/ESB/CDM/Base" xmlns:ns7="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns9="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" xmlns:pfx44="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Modification/AutoRenewalFlagUpdate/Schema.xsd2" xmlns:pfx382="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:pfx261="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetCustomerDemographicsReq.xsd" xmlns:pfx45="http://orm.zain.com/types/" xmlns:pfx381="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateBillProcessResponse.xsd" xmlns:pfx42="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/AddDeleteOffer/AddDeleteOfferResponse.xsd" xmlns:pfx43="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Modification/AutoRenewalFlagUpdate/Schema.xsd" xmlns:pfx1="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoReq.xsd" xmlns:pfx48="http://www.zain.kw.com/BSS/OrderManagement/CreateOrderResponse" xmlns:pfx49="http://www.tibco.com/ns/no_namespace_schema_location/testing/http---siebel.com-CustomUI_CBiO2ExternalMultiOrderProvisoningWS (2).WSDL.wsdl" xmlns:pfx46="http://www.tibco.com/schemas/ESI/BusinessProcesses/Services/CRM/Provisioning/ExternalOrderSubmission/Implementation/Schema.xsd3" xmlns:pfx141="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeReq.xsd" xmlns:pfx47="http://siebel.com/ExternalOrderCreate" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:pfx60="http://www.zain.com/ZESB/Services/Voucher" xmlns:ns131="http://schemas.tibco.com/bw/plugins/xml/5.0/xmlExceptions" xmlns:ns41="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/portfolio" xmlns:pfx371="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateBillProcessRequest.xsd" xmlns:pfx56="http://siebel.com/ExternalOrder" xmlns:pfx53="http://www.zain.kw.com/BSS/OrderManagement/CreateOrderRequest" xmlns:pfx54="http://www.siebel.com/xml/CBiO2AsyncOrderCreationIO" xmlns:pfx59="http://www.siebel.com/xml/CBiO2AsyncPostpaidOrderDetails" xmlns:pfx57="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Common/ExternalChannelOrderSubmission/Implementation/PreOrderValidationSPResponse.xsd" xmlns:pfx58="http://schemas.tibco.com/bw/plugins/jdbc/5.0/jdbcExceptions" xmlns:pfx372="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" xmlns:pfx401="http://www.zain.com/ZESB/Services/AuthorizeCredit" xmlns:pfx="http://www.zain.com/ZESB/Services/UpsertCustomer" xmlns:ns182="http://www.siebel.com/xml/MOZ1%20Kurmalak%20Redemption%20Points%20IO" xmlns:pfx30="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetPaymentRes.xsd" xmlns:ns181="http://tibco.com/namespaces/tnt/plugins/soap" xmlns:ns101="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:ns221="http://schemas.tibco.com/bw/plugins/http/5.0/httpExceptions" xmlns:pfx28="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceReq.xsd" xmlns:pfx29="http://www.ericsson.com/Mozaic/BusinessWSDLs/Query/GetInvoiceRes.xsd" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:pfx22="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceRes.xsd" xmlns:pfx23="http://www.siebel.com/xml/MOZ1%20Customer%20Bill%20Cycle%20Update%20Req" xmlns:pfx20="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerRes.xsd" xmlns:pfx21="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Req" xmlns:pfx26="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMReq.xsd" xmlns:pfx27="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMRes.xsd" xmlns:pfx24="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillCycleUpdateReq.xsd" xmlns:pfx241="http://siebel.com/ArabKurmalakPoint" xmlns:pfx25="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceReq1.xsd" xmlns:pfx361="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:pfx40="http://www.zain.com/ZESB/Services/ManageOffer/Types" xmlns:pfx41="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/AddDeleteOffer/AddDeleteOfferRequest.xsd" xmlns:ns191="http://schemas.ericsson.com/cai3g1.2/" xmlns:ns112="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" xmlns:ns111="http://www.siebel.com/xml/MOZ1%20Serv%20Account%20Creation%20Res" xmlns:pfx39="http://www.siebel.com/xmlCBiO2%20Billing%20Profile%20Modification%20Res%20IO" xmlns:pfx191="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd" xmlns:pfx33="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Modification/AddressChangeResponse.xsd" xmlns:pfx34="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx31="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Modification/AddressChangeRequest.xsd" xmlns:pfx32="http://www.siebel.com/xml/CBiO2%20Address%20Modification%20Res%20IO" xmlns:pfx37="http://www.siebel.com/xml/CBiO2%20Demographic%20Modification%20Res%20IO" xmlns:pfx38="http://www.zain.com/ZESB/Services/NetworkProfile/Types" xmlns:pfx231="http://www.ericsson.com/Mozaic/BusinessSchemas/Generic/SendNotificationAck.xsd" xmlns:pfx35="http://www.siebel.com/xml/CBiO2%20Customer%20Creation%20IO" xmlns:pfx351="http://www.zain.com/ZESB/Services/eAccountManagement" xmlns:pfx36="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/ModifyCustomerRes.xsd" xmlns:ns161="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderRes.xsd" xmlns:pfx501="http://ericsson.com/services/ws_CIL_5/contractserviceresourceswrite" xmlns:ns162="http://www.siebel.com/xml/MOZ1%20Kurmalak%20Inbound%20IO" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns13="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns12="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:ns11="http://www.tibco.com/schemas/CommonProject/CommonResources/SharedVariables/Internal/MultipleServiceOrder.xsd" xmlns:ns10="http://www.zain.com/ZESB/Services/Inventory/ReleaseInventoryRequest.xsd" xmlns:ns17="http://www.siebel.com/xml/RAFActionList" xmlns:ns16="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/Common/NumReservRequest.xsd" xmlns:ns15="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:pfx181="http://www.lhsgroup.com/ws_v3_CBIO_2_1" xmlns:ns14="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:pfx342="http://www.zain.com/ZESB/Services/eAccountManagement/Types" xmlns:pfx221="http://tempuri.org/ZainWS/Service1" xmlns:pfx341="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/ModifyCustomerReq.xsd" xmlns:ns19="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customer" xmlns:ns18="http://www.siebel.com/xml/CBiO2PrepaidOrderProductDetails" xmlns:pfx211="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceReq.xsd" xmlns:ns172="http://www.siebel.com/xml/MOZ1%20Arab%20Bank%20IO" xmlns:ns171="http://www.siebel.com/xml/ListQuery" xmlns:format="java://MSISDNFormatter" xmlns:ns212="http://www.zain.com/ZESB/QUERY/ProductDetalis.xsd" xmlns:ns211="http://www.siebel.com/xml/CBiO2PrepaidOrderHistory" xmlns:pfx19="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerReq.xsd" xmlns:pfx17="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:pfx18="http://schemas.tibco.com/bw/plugins/jms/5.0/jmsExceptions" xmlns:ns02="http://xml.apache.org/axis/wsdd/providers/java" xmlns:ns01="www.tibco.com/plugin/Sleep" xmlns:pfx11="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" xmlns:pfx171="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeRes.xsd" xmlns:pfx291="http://siebel.com/GetRTAAPI" xmlns:pfx10="http://www.siebel.com/xml/MOZ1%20Error%20Log%20Res" xmlns:pfx331="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodResponse.xsd" xmlns:pfx210="http://www.zain.com/ZESB/Services/AccountManager" xmlns:pfx15="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Res" xmlns:pfx16="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx13="http://www.tibco.com/ns/no_namespace_schema_location/CDM/CDM.xsd" xmlns:pfx14="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" xmlns:pfx201="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoRes.xsd" xmlns:pfx321="http://siebel.com/BillDeliveryMethodAPI" xmlns:ns="http://www.tibco.com/pe/DeployedVarsType" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns143="http://www.zain.com/schemas/CommonProject/BusinessSchemas/Common/CRM/ListOfValues.xsd" xmlns:ns142="http://www.ericsson.com/CDM/telecom/Resource" xmlns:ns141="http://www.tibco.com/schemas/CommonProject/CommonResources/SharedVariable/Internal/ResponseCodes_Ph2.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns31="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/billingAccount" xmlns:ns32="http://www.ericsson.com/Mozaic/BusinessSchemas/SOAP/XSDs/Fault.xsd" xmlns:pfx281="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTARequest.xsd" xmlns:pfx441="http://CreditTransfer.Services/" xmlns:pfx312="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" xmlns:pfx311="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodRequest.xsd" xmlns:pfx310="http://orm.zain.com/" xmlns:pfx431="http://www.zain.com/ZESB/Services/SalesOrder/Types" xmlns:zainesbcustom1="java://GenUUID" xmlns:ns152="http://xmlns.tibco.com/encodings/mime" xmlns:ns151="http://www.siebel.com/xml/CBiO2%20Order%20Provisioning%20Req%20IO" xmlns:ns311="http://www.zain.com/ZESB/Services/AccountManager/Types" xmlns:ns20="http://schemas.ericsson.com/ema/UserProvisioning/CSSV/" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns23="http://www.zain.com/ZESB/Services/eStoreCustCreation" xmlns:ns22="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:ns21="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/address" xmlns:pfx271="http://www.siebel.com/xml/MOZ1%20Arab%20Bank%20Redemption%20IO" xmlns:pfx391="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd">
    <xsd:import namespace="http://www.zain.com/ZESB/Services/UpsertCustomer/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/UpsertCustomer/UpsertCustomerInbound.wsdl"/>
    <xsd:import namespace="http://siebel.com/CustomUI" schemaLocation="/BusinessWSDLS/Services/CRM/CBiO2NewConnectionExternalOrdeFlow.wsdl"/>
    <wsdl:import namespace="http://www.zain.com/ZESB/Services/UpsertCustomer" location="/BusinessWSDLS/Services/WSDLS/UpsertCustomer/UpsertCustomerInbound.wsdl"/>
    <pd:name>BusinessProcesses/Services/Common/InsertSubscriber/Implementation/InsertSubscriber.process</pd:name>
    <pd:startName>JMS Queue Receiver</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings>
        <pfx:insertSubscriberResponse>
            <response>
                <ns3:GeneralOutput>
                    <ns3:Result>
                        <xsl:value-of select="$CDMToNativeResponse/ns3:GeneralOutput/ns3:Result"/>
                    </ns3:Result>
                </ns3:GeneralOutput>
            </response>
        </pfx:insertSubscriberResponse>
    </pd:returnBindings>
    <pd:starter name="JMS Queue Receiver">
        <pd:type>com.tibco.plugin.jms.JMSQueueEventSource</pd:type>
        <pd:resourceType>ae.activities.JMSQueueEventSource</pd:resourceType>
        <pd:x>71</pd:x>
        <pd:y>203</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%BusinessProcesses/Services/Common/UpsertCustomer/BPI_RequestQueue%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ApplicationProperties>/CommonResources/Connections/JMS/Internal/EAI_EMSApplicationProperties.sharedjmsapp</ApplicationProperties>
            <ConnectionReference>/CommonResources/Connections/JMS/Internal/EAI_EMSConnection.sharedjmscon</ConnectionReference>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endType wsMsgRef="pfx:insertSubscriberResponse"/>
    <pd:endX>1831</pd:endX>
    <pd:endY>227</pd:endY>
    <pd:errorSchemas>
        <Schema0 wsMsgRef="pfx:faultMessage"/>
    </pd:errorSchemas>
    <pd:processVariables>
        <Variable0>
            <xsd:element name="CheckMailID" type="xsd:string"/>
        </Variable0>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1462278417326</pd:targetNamespace>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>260</pd:x>
        <pd:y>4</pd:y>
        <pd:width>1238</pd:width>
        <pd:height>445</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>simpleGroup</pd:groupType>
            <pd:serializable>false</pd:serializable>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>ParseInputNoBundle</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogOut</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>CDMToNativeResponse</pd:from>
            <pd:to>LogOut</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ESI_Call_InsertSubscriber</pd:from>
            <pd:to>CDMToNativeResponse</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ReserveNumber</pd:from>
            <pd:to>ReserveInventory</pd:to>
            <pd:xpathDescription>Success</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($ReserveNumber/ns5:numReservResponse/ns5:reservationNum)&gt;0 and $_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ReservationFlag=1</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>ReserveNumber</pd:from>
            <pd:to>Generate-Error-NumReserve</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ReserveInventory</pd:from>
            <pd:to>Null-3</pd:to>
            <pd:xpathDescription>Success</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($ReserveInventory/pfx3:erp/pfx3:ReservationId)&gt;0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>ReserveInventory</pd:from>
            <pd:to>Generate-Error-ReserveInventory</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ReserveNumber</pd:from>
            <pd:to>Null-3</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($ReserveNumber/ns5:numReservResponse/ns5:reservationNum)&gt;0 and $_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ReservationFlag=0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>GetReservationId</pd:from>
            <pd:to>ReserveInventory</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($GetReservationId/resultSet/Record[1]/RESERVATION_ID)&gt;0 and $_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ReservationFlag=1</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>GetReservationId</pd:from>
            <pd:to>ReserveNumber</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Call SIMSearch</pd:from>
            <pd:to>GetMultiOrderRecords</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetMultiOrderRecords</pd:from>
            <pd:to>GetEquipId</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetEquipId</pd:from>
            <pd:to>GetCommitmentDetails</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetCommitmentDetails</pd:from>
            <pd:to>LogIn-CommitmentDetails</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogIn-CommitmentDetails</pd:from>
            <pd:to>GetReservationId</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>LogIn</pd:from>
            <pd:to>Call_BlockNumber</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Call_BlockNumber</pd:from>
            <pd:to>Call SIMSearch</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetReservationId</pd:from>
            <pd:to>Null-3</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($GetReservationId/resultSet/Record[1]/RESERVATION_ID)&gt;0 and $_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ReservationFlag=0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>Null-3</pd:from>
            <pd:to>ESI_Call_InsertSubscriber</pd:to>
            <pd:xpathDescription>Otherwise</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:description>Prepaid and Flexi Subsciber</pd:description>
            <pd:from>Null-3</pd:from>
            <pd:to>GetFlexiProductID</pd:to>
            <pd:xpathDescription>FlexSubscriber</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>count($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts[ns3:SubscriberProduct/ns3:Code=$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/FlexiInsertSubscriber/FlexSubscriberType]/ns3:SubscriberProduct)&gt;0
and 
upper-case($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:BillingType)="PREPAID"</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>ESI_Call_InsertSubscriber_Flexi</pd:from>
            <pd:to>MapFlexRespose</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>MapFlexRespose</pd:from>
            <pd:to>CDMToNativeResponse</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>GetFlexiProductID</pd:from>
            <pd:to>ESI_Call_InsertSubscriber_Flexi</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ParseInputNoBundle</pd:from>
            <pd:to>LogIn</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="LogIn">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>384</pd:x>
            <pd:y>192</pd:y>
            <config>
                <processName>/CommonProcesses/LoggingProcess/Logging_Message_Masking.process</processName>
                <spawn>true</spawn>
            </config>
            <pd:inputBindings>
                <ns12:LogRequest>
                    <ns22:Header>
                        <ns22:ApplicationID>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ns22:ApplicationID>
                        <ns22:ComponentName>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ComponentName"/>
                        </ns22:ComponentName>
                        <ns22:Hostname>
                            <xsl:value-of select="BW:getHostName()"/>
                        </ns22:Hostname>
                        <ns22:Timestamp>
                            <xsl:value-of select="current-dateTime()"/>
                        </ns22:Timestamp>
                        <ns22:TransactionDomain>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/PROVISIONING"/>
                        </ns22:TransactionDomain>
                        <ns22:TransactionType>
                            <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                        </ns22:TransactionType>
                        <ns22:TransactionID>
                            <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                        </ns22:TransactionID>
                        <ns22:InterfaceID>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN"/>
                        </ns22:InterfaceID>
                        <ns22:Filename>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Deployment"/>
                        </ns22:Filename>
                        <ns22:Message>
                            <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/Body"/>
                        </ns22:Message>
                        <ns22:Transaction>
                            <xsl:value-of select="concat('Without Bundles -->',tib:render-xml($ParseInputNoBundle/ns3:InsertSubscriberInput), false(), true())"/>
                        </ns22:Transaction>
                        <ns22:AltKey>
                            <ns22:AltKeyName>
                                <xsl:value-of select="&quot;SecretValue&quot;"/>
                            </ns22:AltKeyName>
                            <xsl:if test="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber">
                                <ns22:AltKeyValue>
                                    <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber"/>
                                </ns22:AltKeyValue>
                            </xsl:if>
                        </ns22:AltKey>
                        <ns22:AltKey>
                            <ns22:AltKeyName>
                                <xsl:value-of select="&quot;MaskedValue&quot;"/>
                            </ns22:AltKeyName>
                            <ns22:AltKeyValue>
                                <xsl:value-of select="concat(tib:left($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber,6),'XXXXXX',tib:right($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber,4))"/>
                            </ns22:AltKeyValue>
                        </ns22:AltKey>
                    </ns22:Header>
                    <TimeDuration>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </TimeDuration>
                    <Category>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                    </Category>
                    <Status>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Status/BPI/BPI_REQ_RECV"/>
                    </Status>
                    <Audit>
                        <xsl:value-of select="0"/>
                    </Audit>
                </ns12:LogRequest>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="LogOut">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>1420</pd:x>
            <pd:y>69</pd:y>
            <config>
                <processName>/CommonProcesses/LoggingProcess/Logging_Message_Masking.process</processName>
                <spawn>true</spawn>
            </config>
            <pd:inputBindings>
                <ns12:LogRequest>
                    <ns22:Header>
                        <ns22:ApplicationID>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ns22:ApplicationID>
                        <ns22:ComponentName>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ComponentName"/>
                        </ns22:ComponentName>
                        <ns22:Hostname>
                            <xsl:value-of select="BW:getHostName()"/>
                        </ns22:Hostname>
                        <ns22:Timestamp>
                            <xsl:value-of select="current-dateTime()"/>
                        </ns22:Timestamp>
                        <ns22:TransactionDomain>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/PROVISIONING"/>
                        </ns22:TransactionDomain>
                        <ns22:TransactionType>
                            <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                        </ns22:TransactionType>
                        <ns22:TransactionID>
                            <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                        </ns22:TransactionID>
                        <ns22:InterfaceID>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN"/>
                        </ns22:InterfaceID>
                        <ns22:Filename>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Deployment"/>
                        </ns22:Filename>
                        <ns22:Message>
                            <xsl:value-of select="concat(tib:render-xml($CDMToNativeResponse/ns3:GeneralOutput),&#xA;tib:render-xml($ESI_Call_InsertSubscriber),&#xA;tib:render-xml($MapFlexRespose))"/>
                        </ns22:Message>
                        <ns22:AltKey>
                            <ns22:AltKeyName>
                                <xsl:value-of select="&quot;SecretValue&quot;"/>
                            </ns22:AltKeyName>
                            <xsl:if test="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber">
                                <ns22:AltKeyValue>
                                    <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber"/>
                                </ns22:AltKeyValue>
                            </xsl:if>
                        </ns22:AltKey>
                        <ns22:AltKey>
                            <ns22:AltKeyName>
                                <xsl:value-of select="&quot;MaskedValue&quot;"/>
                            </ns22:AltKeyName>
                            <ns22:AltKeyValue>
                                <xsl:value-of select="concat(tib:left($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber,6),'XXXXXX',tib:right($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber,4))"/>
                            </ns22:AltKeyValue>
                        </ns22:AltKey>
                    </ns22:Header>
                    <TimeDuration>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </TimeDuration>
                    <Category>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                    </Category>
                    <Status>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Status/BPI/BPI_RES_SENT"/>
                    </Status>
                    <Audit>
                        <xsl:value-of select="0"/>
                    </Audit>
                </ns12:LogRequest>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="ESI_Call_InsertSubscriber">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>1185</pd:x>
            <pd:y>73</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_CRM_Call_InsertSubscriber.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <TransactionId>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionId>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                    <pfx2:NewConnection_Input>
                        <pfx2:VendorCode>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:vendorCode"/>
                        </pfx2:VendorCode>
                        <pfx2:Requestor>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:Username"/>
                        </pfx2:Requestor>
                        <pfx2:PIN1>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:pin1"/>
                        </pfx2:PIN1>
                        <pfx2:DNID>
                            <xsl:value-of select="$Call_BlockNumber/ns5:numReservResponse/ns5:dnid"/>
                        </pfx2:DNID>
                        <pfx2:SiebelPromotionId>
                            <xsl:value-of select="substring-after($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM_')]/ns3:Code,'PRM_')"/>
                        </pfx2:SiebelPromotionId>
                        <pfx2:ECMPromotionId>
                            <xsl:value-of select="''"/>
                        </pfx2:ECMPromotionId>
                        <pfx2:PUK1>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:puk1"/>
                        </pfx2:PUK1>
                        <pfx2:IMSI>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:imsi"/>
                        </pfx2:IMSI>
                        <pfx2:CommunityId>
                            <xsl:value-of select="if(exists($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:HLRProfile)&#xA;and&#xA;string-length($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:HLRProfile)>0)&#xA;then&#xA;$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:HLRProfile&#xA;else&#xA;&quot;&quot;"/>
                        </pfx2:CommunityId>
                        <pfx2:TransactionReferenceNo>
                            <xsl:value-of select="''"/>
                        </pfx2:TransactionReferenceNo>
                        <pfx2:IMEI>
                            <xsl:value-of select="'456'"/>
                        </pfx2:IMEI>
                        <pfx2:OrderReason>
                            <xsl:value-of select="''"/>
                        </pfx2:OrderReason>
                        <pfx2:SIMType>
                            <xsl:value-of select="if(string-length($Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:simType)>0) then $Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:simType else&#xA;$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardType"/>
                        </pfx2:SIMType>
                        <pfx2:MSISDNReservedFlag>
                            <xsl:value-of select="'Y'"/>
                        </pfx2:MSISDNReservedFlag>
                        <pfx2:KI>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:ki"/>
                        </pfx2:KI>
                        <xsl:variable name="var" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable name="var2" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable name="var3" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable name="var4" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable name="var5" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable name="var6" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <pfx2:EquipId>
                            <xsl:value-of select="if($GetEquipId/Output/EquipId='N_PK35KD')  then 'N_VC35'&#xA;&#xA;else if($GetEquipId/Output/EquipId='N_PK40KD') then 'N_VC40'&#xA;&#xA;else if ($GetEquipId/Output/EquipId='N_PK25KD')  then  'N_VC25'&#xA;&#xA;else if ($GetEquipId/Output/EquipId='N_PK15KD')  then  'N_VC15'&#xA;&#xA;else if ($GetEquipId/Output/EquipId='N_PK15KD')  then  'N_VC15'&#xA;&#xA;else&#xA;$GetEquipId/Output/EquipId"/>
                        </pfx2:EquipId>
                        <pfx2:Channel>
                            <xsl:value-of select="'CS'"/>
                        </pfx2:Channel>
                        <xsl:variable name="var9" select="substring-after($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM')]/ns3:Code,'PRM_')"/>
                        <pfx2:SIMSerialNo>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:simSerialnum"/>
                        </pfx2:SIMSerialNo>
                        <pfx2:PUK2>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:puk2"/>
                        </pfx2:PUK2>
                        <pfx2:SIMItemCode>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'SC') and string-length(ns3:SerialNumber)>0]/ns3:Code"/>
                        </pfx2:SIMItemCode>
                        <pfx2:PIN2>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:pin2"/>
                        </pfx2:PIN2>
                        <pfx2:MSISDN>
                            <xsl:value-of select="format:FormatMSISDN($ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN, $_globalVariables/ns:GlobalVariables/MSISDNBaseLength)"/>
                        </pfx2:MSISDN>
                        <pfx2:Username>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:Username"/>
                        </pfx2:Username>
                        <pfx2:MSISDNReservationId>
                            <xsl:value-of select="if(string-length($GetReservationId/resultSet/Record[1]/RESERVATION_ID)>0) then $GetReservationId/resultSet/Record[1]/RESERVATION_ID else&#xA;$ReserveNumber/ns5:numReservResponse/ns5:reservationNum"/>
                        </pfx2:MSISDNReservationId>
                        <pfx2:MSISDNCategory>
                            <xsl:value-of select="$Call_BlockNumber/ns5:numReservResponse/ns5:dnCodepub"/>
                        </pfx2:MSISDNCategory>
                        <pfx2:LineType>
                            <xsl:value-of select="if($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:BillingType=$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/BillingType/Prepaid) then&#xA;'Prepaid' else 'Postpaid'"/>
                        </pfx2:LineType>
                        <pfx2:CustomerId>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:ContractID"/>
                        </pfx2:CustomerId>
                        <ns17:ListOfServiceDetails>
                            <xsl:if test="count($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts[count(ns3:SubscriberProduct/ns3:Params/ns4:Param[ns4:Name='BundleId'])>0]/ns3:SubscriberProduct)>0">
                                <xsl:for-each select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts[count(ns3:SubscriberProduct/ns3:Params[ns4:Param/ns4:Name='BundleId'])>0]/ns3:SubscriberProduct">
                                    <xsl:variable name="varEquipId" select="if(current()/ns3:Code='N_PK35KD')  then 'N_VC35'&#xA;&#xA;else if(current()//ns3:Code='N_PK40KD') then 'N_VC40'&#xA;&#xA;else if (current()//ns3:Code='N_PK25KD')  then  'N_VC25'&#xA;&#xA;else if (current()//ns3:Code='N_PK15KD')  then  'N_VC15'&#xA;&#xA;else if (current()//ns3:Code='N_PK15KD')  then  'N_VC15'&#xA;&#xA;else&#xA;current()//ns3:Code"/>
                                    <xsl:if test="{--BundleId is present then only--}string-length(tib:trim(current()/ns3:Params/ns4:Param[ns4:Name='BundleId']/ns4:Value))>0">
                                        <ns17:RAFActions>
                                            <ns17:ProductId>
                                                <xsl:value-of select="$varEquipId[1]"/>
                                            </ns17:ProductId>
                                            <xsl:if test="ns3:SerialNumber">
                                                <ns17:ServiceId>
                                                    <xsl:value-of select="ns3:SerialNumber"/>
                                                </ns17:ServiceId>
                                            </xsl:if>
                                            <ns17:LineType>
                                                <xsl:value-of select="current()/ns3:Params/ns4:Param[ns4:Name='ProductType']/ns4:Value"/>
                                            </ns17:LineType>
                                            <ns17:Operation>
                                                <xsl:value-of select="'Add'"/>
                                            </ns17:Operation>
                                            <ns17:AttributeName>
                                                <xsl:value-of select="&quot;PackageType&quot;"/>
                                            </ns17:AttributeName>
                                            <ns17:AttributeValue>
                                                <xsl:value-of select="current()/ns3:Params/ns4:Param[ns4:Name='PackageType']/ns4:Value"/>
                                            </ns17:AttributeValue>
                                            <ns17:BundleId>
                                                <xsl:value-of select="{--BundleId--}current()/ns3:Params/ns4:Param[ns4:Name='BundleId']/ns4:Value"/>
                                            </ns17:BundleId>
                                            <xsl:if test="{-- CR-21-037 --}&#xA;string-length(current()/ns3:Params/ns4:Param[upper-case(ns4:Name)='INSTALLMENTPERIOD']/ns4:Value)>0">
                                                <xsl:if test="current()/ns3:Params/ns4:Param[upper-case(ns4:Name)='INSTALLMENTPERIOD']/ns4:Value">
                                                    <ns17:InstallmentPeriod>
                                                        <xsl:value-of select="current()/ns3:Params/ns4:Param[upper-case(ns4:Name)='INSTALLMENTPERIOD']/ns4:Value"/>
                                                    </ns17:InstallmentPeriod>
                                                </xsl:if>
                                            </xsl:if>
                                        </ns17:RAFActions>
                                    </xsl:if>
                                </xsl:for-each>
                                <xsl:if test="count($GetCommitmentDetails/MultipleServiceRecords/RecordList)>0">
                                    <xsl:for-each select="$GetCommitmentDetails/MultipleServiceRecords/RecordList">
                                        <ns17:RAFActions>
                                            <xsl:if test="CRMProductId">
                                                <ns17:ProductId>
                                                    <xsl:value-of select="CRMProductId"/>
                                                </ns17:ProductId>
                                            </xsl:if>
                                            <ns17:ServiceId>
                                                <xsl:value-of select="{--$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code=current()/TabsEquipId]/ns3:SerialNumber--}&#xA;current()/SerialNumber"/>
                                            </ns17:ServiceId>
                                            <xsl:if test="ServiceType">
                                                <ns17:LineType>
                                                    <xsl:value-of select="ServiceType"/>
                                                </ns17:LineType>
                                            </xsl:if>
                                            <ns17:Operation>
                                                <xsl:value-of select="'Add'"/>
                                            </ns17:Operation>
                                            <ns17:PrimaryDevice>
                                                <xsl:value-of select="if(current()/ServiceType='Primary Device') then 'Y' else 'N'"/>
                                            </ns17:PrimaryDevice>
                                            <xsl:if test="CRMPkgId">
                                                <ns17:ParentProduct>
                                                    <xsl:value-of select="CRMPkgId"/>
                                                </ns17:ParentProduct>
                                            </xsl:if>
                                            <xsl:if test="AttributeName">
                                                <ns17:AttributeName>
                                                    <xsl:value-of select="AttributeName"/>
                                                </ns17:AttributeName>
                                            </xsl:if>
                                            <xsl:if test="AttributeValue">
                                                <ns17:AttributeValue>
                                                    <xsl:value-of select="AttributeValue"/>
                                                </ns17:AttributeValue>
                                            </xsl:if>
                                        </ns17:RAFActions>
                                    </xsl:for-each>
                                </xsl:if>
                                <xsl:if test="string-length($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code='SCD1']/ns3:Code)>0">
                                    <ns17:RAFActions>
                                        <xsl:if test="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PRODUCT_ID">
                                            <ns17:ProductId>
                                                <xsl:value-of select="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PRODUCT_ID"/>
                                            </ns17:ProductId>
                                        </xsl:if>
                                        <ns17:Operation>
                                            <xsl:value-of select="'Add'"/>
                                        </ns17:Operation>
                                        <ns17:PrimaryDevice>
                                            <xsl:value-of select="'N'"/>
                                        </ns17:PrimaryDevice>
                                        <xsl:if test="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PCKG_ID">
                                            <ns17:ParentProduct>
                                                <xsl:value-of select="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PCKG_ID"/>
                                            </ns17:ParentProduct>
                                        </xsl:if>
                                    </ns17:RAFActions>
                                </xsl:if>
                            </xsl:if>
                            <xsl:if test="count($GetCommitmentDetails/MultipleServiceRecords/RecordList)>0&#xA;and&#xA;(count($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts[count(ns3:SubscriberProduct/ns3:Params/ns4:Param[ns4:Name='BundleId'])>0]/ns3:SubscriberProduct)>0) = false()">
                                <xsl:for-each select="$GetCommitmentDetails/MultipleServiceRecords/RecordList">
                                    <ns17:RAFActions>
                                        <xsl:if test="CRMProductId">
                                            <ns17:ProductId>
                                                <xsl:value-of select="CRMProductId"/>
                                            </ns17:ProductId>
                                        </xsl:if>
                                        <ns17:ServiceId>
                                            <xsl:value-of select="{--$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code=current()/TabsEquipId]/ns3:SerialNumber--}&#xA;current()/SerialNumber"/>
                                        </ns17:ServiceId>
                                        <xsl:if test="ServiceType">
                                            <ns17:LineType>
                                                <xsl:value-of select="ServiceType"/>
                                            </ns17:LineType>
                                        </xsl:if>
                                        <ns17:Operation>
                                            <xsl:value-of select="'Add'"/>
                                        </ns17:Operation>
                                        <ns17:PrimaryDevice>
                                            <xsl:value-of select="if(current()/ServiceType='Primary Device') then 'Y' else 'N'"/>
                                        </ns17:PrimaryDevice>
                                        <xsl:if test="CRMPkgId">
                                            <ns17:ParentProduct>
                                                <xsl:value-of select="CRMPkgId"/>
                                            </ns17:ParentProduct>
                                        </xsl:if>
                                        <xsl:if test="AttributeName">
                                            <ns17:AttributeName>
                                                <xsl:value-of select="AttributeName"/>
                                            </ns17:AttributeName>
                                        </xsl:if>
                                        <xsl:if test="AttributeValue">
                                            <ns17:AttributeValue>
                                                <xsl:value-of select="AttributeValue"/>
                                            </ns17:AttributeValue>
                                        </xsl:if>
                                    </ns17:RAFActions>
                                </xsl:for-each>
                            </xsl:if>
                            <xsl:if test="string-length($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code='SCD1']/ns3:Code)>0&#xA;and&#xA;(count($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts[count(ns3:SubscriberProduct/ns3:Params/ns4:Param[ns4:Name='BundleId'])>0]/ns3:SubscriberProduct)>0) = false()">
                                <ns17:RAFActions>
                                    <xsl:if test="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PRODUCT_ID">
                                        <ns17:ProductId>
                                            <xsl:value-of select="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PRODUCT_ID"/>
                                        </ns17:ProductId>
                                    </xsl:if>
                                    <ns17:Operation>
                                        <xsl:value-of select="'Add'"/>
                                    </ns17:Operation>
                                    <ns17:PrimaryDevice>
                                        <xsl:value-of select="'N'"/>
                                    </ns17:PrimaryDevice>
                                    <xsl:if test="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PCKG_ID">
                                        <ns17:ParentProduct>
                                            <xsl:value-of select="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var9 and ns11:TABS_EQUIP_ID='SCD1']/ns11:CRM_PCKG_ID"/>
                                        </ns17:ParentProduct>
                                    </xsl:if>
                                </ns17:RAFActions>
                            </xsl:if>
                        </ns17:ListOfServiceDetails>
                        <pfx2:ICCID>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber"/>
                        </pfx2:ICCID>
                        <pfx2:Source>
                            <xsl:value-of select="'Extrenal Channel'"/>
                        </pfx2:Source>
                        <pfx2:SIMReservationFlag>
                            <xsl:value-of select="'Y'"/>
                        </pfx2:SIMReservationFlag>
                    </pfx2:NewConnection_Input>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="CDMToNativeResponse">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>1315</pd:x>
            <pd:y>70</pd:y>
            <config>
                <element ref="ns3:GeneralOutput"/>
            </config>
            <pd:inputBindings>
                <xsl:choose>
                    <xsl:when test="$ESI_Call_InsertSubscriber_Flexi/pfx2:PrepaidFlexiNewContract_Output/pfx2:ErrorSourceErrDesc">
                        <ns3:GeneralOutput>
                            <ns3:Result>
                                <xsl:value-of select="$ESI_Call_InsertSubscriber_Flexi/pfx2:PrepaidFlexiNewContract_Output/pfx2:ErrorSourceErrDesc"/>
                            </ns3:Result>
                        </ns3:GeneralOutput>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns3:GeneralOutput>
                            <ns3:Result>
                                <xsl:value-of select="$ESI_Call_InsertSubscriber/pfx2:NewConnection_Output/pfx2:ErrorSourceErrDesc"/>
                            </ns3:Result>
                        </ns3:GeneralOutput>
                    </xsl:otherwise>
                </xsl:choose>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="ReserveNumber">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>829</pd:x>
            <pd:y>243</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_Call_ReserveNumber.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns16:numReservRequest>
                        <xsl:if test="$Call_BlockNumber/ns5:numReservResponse/ns5:dnid">
                            <ns16:dnid>
                                <xsl:value-of select="$Call_BlockNumber/ns5:numReservResponse/ns5:dnid"/>
                            </ns16:dnid>
                        </xsl:if>
                        <ns16:number>
                            <xsl:value-of select="format:FormatMSISDN($ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN, $_globalVariables/ns:GlobalVariables/MSISDNBaseLength)"/>
                        </ns16:number>
                        <ns16:billingType>
                            <xsl:value-of select="upper-case($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:BasicServiceType)"/>
                        </ns16:billingType>
                        <ns16:bsType>
                            <xsl:value-of select="if($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:BillingType='Prepaid') then 'PREP' else&#xA;'POST'"/>
                        </ns16:bsType>
                        <ns16:channelName>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ChannelName"/>
                        </ns16:channelName>
                    </ns16:numReservRequest>
                    <TransactionID>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                    <SourceSystem>
                        <xsl:value-of select="'TIBCO'"/>
                    </SourceSystem>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Call SIMSearch">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>564</pd:x>
            <pd:y>360</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_Call_SIMSearch.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns6:StorageMediumDetailsReadInput>
                        <ns6:smserialno>
                            <xsl:value-of select="substring($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber,1,18)"/>
                        </ns6:smserialno>
                    </ns6:StorageMediumDetailsReadInput>
                    <TransactionID>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                    <SourceSystem>
                        <xsl:value-of select="'TIBCO'"/>
                    </SourceSystem>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate-Error-NumReserve">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>770</pd:x>
            <pd:y>353</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns13:ActivityInput>
                    <xsl:if test="$ReserveNumber/ns5:numReservResponse/ns9:ErrorResponse/ns9:Error_SourceErrDesc">
                        <message>
                            <xsl:value-of select="$ReserveNumber/ns5:numReservResponse/ns9:ErrorResponse/ns9:Error_SourceErrDesc"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="$ReserveNumber/ns5:numReservResponse/ns9:ErrorResponse/ns9:Error_SourceErrCode">
                        <messageCode>
                            <xsl:value-of select="$ReserveNumber/ns5:numReservResponse/ns9:ErrorResponse/ns9:Error_SourceErrCode"/>
                        </messageCode>
                    </xsl:if>
                </ns13:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="ReserveInventory">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>1045</pd:x>
            <pd:y>244</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_Call_ReserveInventory.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns0:reserveInventoryRequest>
                        <ns0:orgCode>
                            <xsl:value-of select="''"/>
                        </ns0:orgCode>
                        <ns0:storeCode>
                            <xsl:value-of select="if(upper-case($ParseInput/ns3:InsertSubscriberInput/ns3:Username)=&#xA;upper-case(tib:tokenize($_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/UserCode, '|')[1]))&#xA;then&#xA;tib:tokenize($_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/WarehouseCode, '|')[1]&#xA;else&#xA;if(upper-case($ParseInput/ns3:InsertSubscriberInput/ns3:Username)=&#xA;upper-case(tib:tokenize($_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/UserCode, '|')[2]))&#xA;then&#xA;tib:tokenize($_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/WarehouseCode, '|')[2]&#xA;else&#xA;&quot;&quot;"/>
                        </ns0:storeCode>
                        <ns0:userName>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:Username"/>
                        </ns0:userName>
                        <ns0:orderId>
                            <xsl:value-of select="tib:timestamp()"/>
                        </ns0:orderId>
                        <ns0:itemList>
                            <ns0:itemCode>
                                <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Category='SIM']/ns3:Code"/>
                            </ns0:itemCode>
                            <ns0:serialNumberFrom>
                                <xsl:value-of select="if(string-length($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber)>17) then&#xA;substring($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber,1,18) else&#xA;$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber"/>
                            </ns0:serialNumberFrom>
                            <ns0:serialNumberTo>
                                <xsl:value-of select="if(string-length($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber)>17) then&#xA;substring($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber,1,18) else&#xA;$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber"/>
                            </ns0:serialNumberTo>
                            <ns0:quantity>
                                <xsl:value-of select="1"/>
                            </ns0:quantity>
                            <ns0:orderLineItemId>
                                <xsl:value-of select="tib:timestamp()"/>
                            </ns0:orderLineItemId>
                        </ns0:itemList>
                        <xsl:if test="count($GetCommitmentDetails/MultipleServiceRecords/RecordList)>0">
                            <xsl:for-each select="$GetCommitmentDetails/MultipleServiceRecords/RecordList">
                                <ns0:itemList>
                                    <ns0:itemCode>
                                        <xsl:value-of select="current()/TabsEquipId"/>
                                    </ns0:itemCode>
                                    <xsl:if test="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code=current()/TabsEquipId]/ns3:SerialNumber">
                                        <ns0:serialNumberFrom>
                                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code=current()/TabsEquipId]/ns3:SerialNumber"/>
                                        </ns0:serialNumberFrom>
                                    </xsl:if>
                                    <xsl:if test="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code=current()/TabsEquipId]/ns3:SerialNumber">
                                        <ns0:serialNumberTo>
                                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[ns3:Code=current()/TabsEquipId]/ns3:SerialNumber"/>
                                        </ns0:serialNumberTo>
                                    </xsl:if>
                                    <ns0:quantity>
                                        <xsl:value-of select="1"/>
                                    </ns0:quantity>
                                    <ns0:orderLineItemId>
                                        <xsl:value-of select="tib:timestamp()"/>
                                    </ns0:orderLineItemId>
                                </ns0:itemList>
                            </xsl:for-each>
                        </xsl:if>
                    </ns0:reserveInventoryRequest>
                    <TransactionID>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                    <SourceSystem>
                        <xsl:value-of select="'TIBCO'"/>
                    </SourceSystem>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Generate-Error-ReserveInventory">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>984</pd:x>
            <pd:y>371</pd:y>
            <config>
                <faultName/>
            </config>
            <pd:inputBindings>
                <ns13:ActivityInput>
                    <xsl:if test="$ReserveInventory/pfx3:erp/ns8:Response/ns8:Error/ns8:errorDescription">
                        <message>
                            <xsl:value-of select="$ReserveInventory/pfx3:erp/ns8:Response/ns8:Error/ns8:errorDescription"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="$ReserveInventory/pfx3:erp/ns8:Response/ns8:Error/ns8:errorCode">
                        <messageCode>
                            <xsl:value-of select="$ReserveInventory/pfx3:erp/ns8:Response/ns8:Error/ns8:errorCode"/>
                        </messageCode>
                    </xsl:if>
                </ns13:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="GetReservationId">
            <pd:type>com.tibco.plugin.jdbc.JDBCQueryActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCQueryActivity</pd:resourceType>
            <pd:x>830</pd:x>
            <pd:y>72</pd:y>
            <config>
                <timeout>10</timeout>
                <commit>false</commit>
                <maxRows>100</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/CommonResources/Connections/JDBC/External/BSCSDBConnection.sharedjdbc</jdbcSharedConfig>
                <statement>SELECT RESERVATION_ID FROM DIRECTORY_NUMBER A,DN_RESERVATION B WHERE A.DN_ID=B.DN_ID AND B.RESERVED_UNTIL&gt;SYSDATE AND A.DN_STATUS='r' AND A.DN_NUM = ?</statement>
                <Prepared_Param_DataType>
                    <parameter>
                        <parameterName>MSISDN</parameterName>
                        <dataType>VARCHAR</dataType>
                    </parameter>
                </Prepared_Param_DataType>
                <oraObjects/>
                <oraTables/>
                <QueryOutputCachedSchemaColumns>RESERVATION_ID</QueryOutputCachedSchemaColumns>
                <QueryOutputCachedSchemaDataTypes>12</QueryOutputCachedSchemaDataTypes>
                <QueryOutputCachedSchemaDataTypesName>VARCHAR2</QueryOutputCachedSchemaDataTypesName>
                <QueryOutputCachedSchemaStatus>RequiredElement</QueryOutputCachedSchemaStatus>
            </config>
            <pd:inputBindings>
                <jdbcQueryActivityInput>
                    <MSISDN>
                        <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN"/>
                    </MSISDN>
                </jdbcQueryActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="GetCommitmentDetails">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>682</pd:x>
            <pd:y>77</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/GetCommitmentDetailsBundle.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <PromoId>
                        <xsl:value-of select="substring-after($ParseInputNoBundle/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM_')]/ns3:Code,'PRM_')"/>
                    </PromoId>
                    <EquipId>
                        <xsl:value-of select="$GetEquipId/Output/EquipId"/>
                    </EquipId>
                    <xsl:variable name="var" select="substring-after($ParseInputNoBundle/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM_')]/ns3:Code,'PRM_')"/>
                    <xsl:for-each select="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:CRM_PROMO_ID=$var]">
                        <RecordList>
                            <xsl:if test="ns11:TABS_EQUIP_ID">
                                <TabsEquipId>
                                    <xsl:value-of select="ns11:TABS_EQUIP_ID"/>
                                </TabsEquipId>
                            </xsl:if>
                            <xsl:if test="ns11:TABS_PCKG_ID">
                                <TabsPkgId>
                                    <xsl:value-of select="ns11:TABS_PCKG_ID"/>
                                </TabsPkgId>
                            </xsl:if>
                            <xsl:if test="ns11:CRM_PRODUCT_ID">
                                <CRMProductId>
                                    <xsl:value-of select="ns11:CRM_PRODUCT_ID"/>
                                </CRMProductId>
                            </xsl:if>
                            <xsl:if test="ns11:ATTRIBUTE_NAME">
                                <AttributeName>
                                    <xsl:value-of select="ns11:ATTRIBUTE_NAME"/>
                                </AttributeName>
                            </xsl:if>
                            <xsl:if test="ns11:ATTRIBUTE_VALUE">
                                <AttributeValue>
                                    <xsl:value-of select="ns11:ATTRIBUTE_VALUE"/>
                                </AttributeValue>
                            </xsl:if>
                            <xsl:if test="ns11:SERVICE_TYPE">
                                <ServiceType>
                                    <xsl:value-of select="ns11:SERVICE_TYPE"/>
                                </ServiceType>
                            </xsl:if>
                            <xsl:if test="ns11:CRM_PCKG_ID">
                                <CRMPkgId>
                                    <xsl:value-of select="ns11:CRM_PCKG_ID"/>
                                </CRMPkgId>
                            </xsl:if>
                            <xsl:if test="ns11:CRM_PROMO_ID">
                                <CRMPromoId>
                                    <xsl:value-of select="ns11:CRM_PROMO_ID"/>
                                </CRMPromoId>
                            </xsl:if>
                        </RecordList>
                    </xsl:for-each>
                    <PkgIdList>
                        <xsl:for-each select="$ParseInputNoBundle/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[not(exists(ns3:SerialNumber))]">
                            <pkgId>
                                <xsl:value-of select="ns3:Code"/>
                            </pkgId>
                        </xsl:for-each>
                    </PkgIdList>
                    <DeviceIdList>
                        <xsl:for-each select="$ParseInputNoBundle/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[string-length(ns3:SerialNumber)>0 and not(contains(ns3:Code,'SC'))]">
                            <deviceId>
                                <xsl:value-of select="concat(ns3:Code,&quot;|&quot;,current()/ns3:SerialNumber)&#xA;{--current()/ns3:Code--}"/>
                            </deviceId>
                        </xsl:for-each>
                    </DeviceIdList>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="GetMultiOrderRecords">
            <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
            <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
            <pd:x>562</pd:x>
            <pd:y>184</pd:y>
            <config>
                <variableConfig>/CommonResources/SharedVariables/Internal/MultipleServiceOrder.sharedvariable</variableConfig>
            </config>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="GetEquipId">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>564</pd:x>
            <pd:y>78</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/GetEquipId.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$GetMultiOrderRecords/ns11:MultipleServiceOrder/ns11:MultipleOrder[ns11:TABS_PCKG_ID='Y']">
                        <xsl:if test="ns11:CRM_PROMO_ID=substring-after($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM')]/ns3:Code,'PRM_')">
                            <TableEquipId>
                                <TableEquipId>
                                    <xsl:value-of select="ns11:TABS_EQUIP_ID"/>
                                </TableEquipId>
                            </TableEquipId>
                        </xsl:if>
                    </xsl:for-each>
                    <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$ParseInputNoBundle/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct">
                        <ChannelCode>
                            <ChannelCode>
                                <xsl:value-of select="ns3:Code"/>
                            </ChannelCode>
                        </ChannelCode>
                    </xsl:for-each>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="LogIn-CommitmentDetails">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>686</pd:x>
            <pd:y>200</pd:y>
            <config>
                <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
                <spawn>true</spawn>
            </config>
            <pd:inputBindings>
                <ns12:LogRequest>
                    <ns22:Header>
                        <ns22:ApplicationID>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ns22:ApplicationID>
                        <ns22:ComponentName>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ComponentName"/>
                        </ns22:ComponentName>
                        <ns22:Hostname>
                            <xsl:value-of select="BW:getHostName()"/>
                        </ns22:Hostname>
                        <ns22:Timestamp>
                            <xsl:value-of select="current-dateTime()"/>
                        </ns22:Timestamp>
                        <ns22:TransactionDomain>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/PROVISIONING"/>
                        </ns22:TransactionDomain>
                        <ns22:TransactionID>
                            <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                        </ns22:TransactionID>
                        <ns22:InterfaceID>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN"/>
                        </ns22:InterfaceID>
                        <ns22:Filename>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Deployment"/>
                        </ns22:Filename>
                        <ns22:Message>
                            <xsl:value-of select="tib:render-xml($GetCommitmentDetails/MultipleServiceRecords)"/>
                        </ns22:Message>
                    </ns22:Header>
                    <TimeDuration>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </TimeDuration>
                    <Category>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                    </Category>
                    <Status>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Status/BPI/BPI_REQ_RECV"/>
                    </Status>
                    <Audit>
                        <xsl:value-of select="0"/>
                    </Audit>
                </ns12:LogRequest>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Call_BlockNumber">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>386</pd:x>
            <pd:y>361</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_Call_BlockNumber.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <CustomerString>
                        <xsl:value-of select="tib:render-xml($ParseInput/ns3:InsertSubscriberInput)"/>
                    </CustomerString>
                    <TransactionId>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionId>
                    <SourceSystem>
                        <xsl:value-of select="'TIBCO'"/>
                    </SourceSystem>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Null-3">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>1043</pd:x>
            <pd:y>74</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="ESI_Call_InsertSubscriber_Flexi">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>1298</pd:x>
            <pd:y>229</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_CRM_Call_InsertSubscriber_Flexi.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <TransactionId>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionId>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                    <pfx2:PrepaidFlexiNewContract_Input>
                        <pfx2:VendorCode>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:vendorCode"/>
                        </pfx2:VendorCode>
                        <pfx2:Requestor>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:Username"/>
                        </pfx2:Requestor>
                        <pfx2:PIN1>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:pin1"/>
                        </pfx2:PIN1>
                        <pfx2:DNID>
                            <xsl:value-of select="$Call_BlockNumber/ns5:numReservResponse/ns5:dnid"/>
                        </pfx2:DNID>
                        <pfx2:SiebelPromotionId>
                            <xsl:value-of select="substring-after($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM_')]/ns3:Code,'PRM_')"/>
                        </pfx2:SiebelPromotionId>
                        <xsl:choose>
                            <xsl:when test="exists($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:ExpiryDate)and &#xA;string-length(tib:trim($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:ExpiryDate))>0">
                                <pfx2:P_ExpiryYear>
                                    <xsl:value-of select="tib:get-year-from-date(tib:parse-date(&quot;MMyyyy&quot;,$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:ExpiryDate))"/>
                                </pfx2:P_ExpiryYear>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx2:P_ExpiryYear>
                                    <xsl:value-of select="&quot;&quot;"/>
                                </pfx2:P_ExpiryYear>
                            </xsl:otherwise>
                        </xsl:choose>
                        <pfx2:PUK1>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:puk1"/>
                        </pfx2:PUK1>
                        <pfx2:IMSI>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:imsi"/>
                        </pfx2:IMSI>
                        <pfx2:TransactionReferenceNo>
                            <xsl:value-of select="''"/>
                        </pfx2:TransactionReferenceNo>
                        <pfx2:IMEI>
                            <xsl:value-of select="'456'"/>
                        </pfx2:IMEI>
                        <pfx2:P_CVV>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CVV"/>
                        </pfx2:P_CVV>
                        <pfx2:OrderReason>
                            <xsl:value-of select="''"/>
                        </pfx2:OrderReason>
                        <pfx2:SIMType>
                            <xsl:value-of select="if(string-length($Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:simType)>0) then $Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:simType else&#xA;$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardType"/>
                        </pfx2:SIMType>
                        <pfx2:P_CardNumber>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardNumber"/>
                        </pfx2:P_CardNumber>
                        <pfx2:MSISDNReservedFlag>
                            <xsl:value-of select="'Y'"/>
                        </pfx2:MSISDNReservedFlag>
                        <pfx2:KI>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:ki"/>
                        </pfx2:KI>
                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="var" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="var2" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="var3" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="var4" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="var5" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="var6" select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Category"/>
                        <pfx2:Channel>
                            <xsl:value-of select="'CS'"/>
                        </pfx2:Channel>
                        <xsl:variable xmlns:xsl="http://www.w3.org/1999/XSL/Transform" name="var9" select="substring-after($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM')]/ns3:Code,'PRM_')"/>
                        <pfx2:P_TerminalId>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:TerminalId"/>
                        </pfx2:P_TerminalId>
                        <pfx2:SIMSerialNo>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:simSerialnum"/>
                        </pfx2:SIMSerialNo>
                        <pfx2:PUK2>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:puk2"/>
                        </pfx2:PUK2>
                        <pfx2:SIMItemCode>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'SC') and string-length(ns3:SerialNumber)>0]/ns3:Code"/>
                        </pfx2:SIMItemCode>
                        <pfx2:P_PaymentTransactionReference>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:TransactionReference"/>
                        </pfx2:P_PaymentTransactionReference>
                        <pfx2:P_MerchantId>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:MerchantId"/>
                        </pfx2:P_MerchantId>
                        <xsl:choose>
                            <xsl:when test="string-length($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:Amount)>0 and &#xA;$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:Amount!=0">
                                <pfx2:P_Amount>
                                    <xsl:value-of select="tib:string-round-fraction($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:Amount,3)"/>
                                </pfx2:P_Amount>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx2:P_Amount>
                                    <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:Amount"/>
                                </pfx2:P_Amount>
                            </xsl:otherwise>
                        </xsl:choose>
                        <pfx2:PIN2>
                            <xsl:value-of select="$Call-SIMSearch/ns6:StorageMediumDetailsReadOutput/ns6:Item[1]/ns6:pin2"/>
                        </pfx2:PIN2>
                        <pfx2:MSISDN>
                            <xsl:value-of select="format:FormatMSISDN($ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN, $_globalVariables/ns:GlobalVariables/MSISDNBaseLength)"/>
                        </pfx2:MSISDN>
                        <xsl:choose>
                            <xsl:when test="exists($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:ExpiryDate)and &#xA;string-length(tib:trim($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:ExpiryDate))>0">
                                <pfx2:P_ExpiryMonth>
                                    <xsl:value-of select="tib:pad-front(tib:get-month-from-date(tib:parse-date(&quot;MMyyyy&quot;,$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:ExpiryDate)), '2', '0')"/>
                                </pfx2:P_ExpiryMonth>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx2:P_ExpiryMonth>
                                    <xsl:value-of select="&quot;&quot;"/>
                                </pfx2:P_ExpiryMonth>
                            </xsl:otherwise>
                        </xsl:choose>
                        <pfx2:Username>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:Username"/>
                        </pfx2:Username>
                        <pfx2:P_CardType>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardType"/>
                        </pfx2:P_CardType>
                        <pfx2:P_AuthCode>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:AuthCode"/>
                        </pfx2:P_AuthCode>
                        <pfx2:MSISDNReservationId>
                            <xsl:value-of select="if(string-length($GetReservationId/resultSet/Record[1]/RESERVATION_ID)>0) then $GetReservationId/resultSet/Record[1]/RESERVATION_ID else&#xA;$ReserveNumber/ns5:numReservResponse/ns5:reservationNum"/>
                        </pfx2:MSISDNReservationId>
                        <pfx2:MSISDNCategory>
                            <xsl:value-of select="$Call_BlockNumber/ns5:numReservResponse/ns5:dnCodepub"/>
                        </pfx2:MSISDNCategory>
                        <pfx2:LineType>
                            <xsl:value-of select="if($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:BillingType=$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/BillingType/Prepaid) then&#xA;'Prepaid' else 'Postpaid'"/>
                        </pfx2:LineType>
                        <pfx2:CustomerId>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:ContractID"/>
                        </pfx2:CustomerId>
                        <ns18:CBiO2PrepaidOrderProductDetails>
                            <xsl:for-each select="$GetFlexiProductID/Resultsets/ResultSet1/Record1">
                                <ns18:ProductDetails>
                                    <ns18:ProductId>
                                        <xsl:value-of select="current()/PROD_ID"/>
                                    </ns18:ProductId>
                                    <ns18:ParentProduct>
                                        <xsl:value-of select="current()/PARENT_PROD_ID"/>
                                    </ns18:ParentProduct>
                                    <xsl:if test="TYPE=$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/FlexiInsertSubscriber/FlexSubscriberType">
                                        <xsl:for-each select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct/ns3:Params/ns4:Param[contains(../../ns3:Code,$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/FlexiInsertSubscriber/FlexSubscriberType)]">
                                            <ns18:FlexiAttributeName>
                                                <ns18:ParameterName>
                                                    <xsl:value-of select="ns4:Name"/>
                                                </ns18:ParameterName>
                                                <ns18:ParameterValue>
                                                    <xsl:value-of select="ns4:Value"/>
                                                </ns18:ParameterValue>
                                            </ns18:FlexiAttributeName>
                                        </xsl:for-each>
                                    </xsl:if>
                                    <ns18:Operation>
                                        <xsl:value-of select="&quot;Add&quot;"/>
                                    </ns18:Operation>
                                </ns18:ProductDetails>
                            </xsl:for-each>
                        </ns18:CBiO2PrepaidOrderProductDetails>
                        <pfx2:ICCID>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo/ns3:Details/ns3:SimCard/ns3:CardNumber"/>
                        </pfx2:ICCID>
                        <pfx2:P_PaymentMethod>
                            <xsl:value-of select="if ($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:PaymentMethod = 'Cash') then  'CN-VIA ZAIN - CASH'&#xA;                        else if ($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:PaymentMethod= 'Card') then&#xA;                            if ($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardType = 'Debit') then 'WB-K-NET GATEWAY ON Zain WEBSI'&#xA;                            else if ($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardType = 'Visa') then 'WV-eCRM - Visa Card'&#xA;                            else if ($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardType = 'MasterCard') then 'WM-eCRM- Master Card'&#xA;                            else if ($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardType = 'Amex') then 'AX-Direct Debit - AMEX'&#xA;                            else if ($ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardType = 'Diners Club') then 'WD-eCRM - Diners Card'&#xA;                            else $ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:CardType&#xA;                        else&#xA;$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:PaymentMethod"/>
                        </pfx2:P_PaymentMethod>
                        <pfx2:P_IssuingBank>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:IssuingBank"/>
                        </pfx2:P_IssuingBank>
                        <pfx2:SIMReservationFlag>
                            <xsl:value-of select="'Y'"/>
                        </pfx2:SIMReservationFlag>
                        <pfx2:P_HolderName>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:CardDetails/ns3:HolderName"/>
                        </pfx2:P_HolderName>
                        <pfx2:P_AuthorizeCredit>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo/ns3:AuthorizeCredit"/>
                        </pfx2:P_AuthorizeCredit>
                    </pfx2:PrepaidFlexiNewContract_Input>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="MapFlexRespose">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:description>to existing XSD to minimize change</pd:description>
            <pd:x>1412</pd:x>
            <pd:y>230</pd:y>
            <config>
                <element ref="pfx2:NewConnection_Output"/>
            </config>
            <pd:inputBindings>
                <xsl:for-each select="$ESI_Call_InsertSubscriber_Flexi/pfx2:PrepaidFlexiNewContract_Output">
                    <pfx2:NewConnection_Output>
                        <pfx2:ErrorAdditionalDesc1>
                            <xsl:value-of select="pfx2:ErrorAdditionalDesc1"/>
                        </pfx2:ErrorAdditionalDesc1>
                        <pfx2:ErrorAdditionalDesc2>
                            <xsl:value-of select="pfx2:ErrorAdditionalDesc2"/>
                        </pfx2:ErrorAdditionalDesc2>
                        <pfx2:ErrorOccuranceTime>
                            <xsl:value-of select="pfx2:ErrorOccuranceTime"/>
                        </pfx2:ErrorOccuranceTime>
                        <pfx2:ErrorSourceErrCode>
                            <xsl:value-of select="pfx2:ErrorSourceErrCode"/>
                        </pfx2:ErrorSourceErrCode>
                        <pfx2:ErrorSourceErrDesc>
                            <xsl:value-of select="pfx2:ErrorSourceErrDesc"/>
                        </pfx2:ErrorSourceErrDesc>
                        <pfx2:ErrorSourceSystem>
                            <xsl:value-of select="pfx2:ErrorSourceSystem"/>
                        </pfx2:ErrorSourceSystem>
                        <pfx2:ErrorType>
                            <xsl:value-of select="pfx2:ErrorType"/>
                        </pfx2:ErrorType>
                        <pfx2:ErrorUserErrCode>
                            <xsl:value-of select="pfx2:ErrorUserErrCode"/>
                        </pfx2:ErrorUserErrCode>
                        <pfx2:ErrorUserErrDesc>
                            <xsl:value-of select="pfx2:ErrorUserErrDesc"/>
                        </pfx2:ErrorUserErrDesc>
                        <pfx2:OrderNumber>
                            <xsl:value-of select="pfx2:OrderNumber"/>
                        </pfx2:OrderNumber>
                    </pfx2:NewConnection_Output>
                </xsl:for-each>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="GetFlexiProductID">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>1154</pd:x>
            <pd:y>228</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/GetFlexiProductID.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <PromotionID>
                        <xsl:value-of select="substring-after($ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct[contains(ns3:Code,'PRM')]/ns3:Code,'PRM_')"/>
                    </PromotionID>
                    <EquipID>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/FlexiInsertSubscriber/FlexSubscriberType"/>
                    </EquipID>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                    <TransactionID>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="ParseInputNoBundle">
            <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
            <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
            <pd:x>383</pd:x>
            <pd:y>61</pd:y>
            <config>
                <element ref="ns3:InsertSubscriberInput"/>
            </config>
            <pd:inputBindings>
                <ns3:InsertSubscriberInput>
                    <ns3:ContractID>
                        <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:ContractID"/>
                    </ns3:ContractID>
                    <ns3:MSISDN>
                        <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:MSISDN"/>
                    </ns3:MSISDN>
                    <ns3:Username>
                        <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:Username"/>
                    </ns3:Username>
                    <xsl:if test="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberArea">
                        <ns3:SubscriberArea>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberArea"/>
                        </ns3:SubscriberArea>
                    </xsl:if>
                    <xsl:if test="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberType">
                        <ns3:SubscriberType>
                            <xsl:value-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberType"/>
                        </ns3:SubscriberType>
                    </xsl:if>
                    <xsl:copy-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberInfo"/>
                    <ns3:SubscriberProducts>
                        <xsl:for-each select="$ParseInput/ns3:InsertSubscriberInput/ns3:SubscriberProducts/ns3:SubscriberProduct">
                            <xsl:if test="count(ns3:Params/ns4:Param[ns4:Name='BundleId'])=0">
                                <ns3:SubscriberProduct>
                                    <xsl:if test="ns3:Code">
                                        <ns3:Code>
                                            <xsl:value-of select="ns3:Code"/>
                                        </ns3:Code>
                                    </xsl:if>
                                    <xsl:if test="ns3:Status">
                                        <ns3:Status>
                                            <xsl:value-of select="ns3:Status"/>
                                        </ns3:Status>
                                    </xsl:if>
                                    <xsl:if test="ns3:SerialNumber">
                                        <ns3:SerialNumber>
                                            <xsl:value-of select="ns3:SerialNumber"/>
                                        </ns3:SerialNumber>
                                    </xsl:if>
                                    <xsl:if test="ns3:DisplayName">
                                        <ns3:DisplayName>
                                            <xsl:value-of select="ns3:DisplayName"/>
                                        </ns3:DisplayName>
                                    </xsl:if>
                                    <xsl:if test="ns3:ArabicDisplayName">
                                        <ns3:ArabicDisplayName>
                                            <xsl:value-of select="ns3:ArabicDisplayName"/>
                                        </ns3:ArabicDisplayName>
                                    </xsl:if>
                                    <xsl:if test="ns3:Category">
                                        <ns3:Category>
                                            <xsl:value-of select="ns3:Category"/>
                                        </ns3:Category>
                                    </xsl:if>
                                    <xsl:if test="ns3:SubCategory">
                                        <ns3:SubCategory>
                                            <xsl:value-of select="ns3:SubCategory"/>
                                        </ns3:SubCategory>
                                    </xsl:if>
                                    <xsl:if test="ns3:Classification">
                                        <ns3:Classification>
                                            <xsl:value-of select="ns3:Classification"/>
                                        </ns3:Classification>
                                    </xsl:if>
                                    <xsl:if test="ns3:StartDate">
                                        <ns3:StartDate>
                                            <xsl:copy-of select="ns3:StartDate/@xsi:nil"/>
                                            <xsl:value-of select="ns3:StartDate"/>
                                        </ns3:StartDate>
                                    </xsl:if>
                                    <xsl:if test="ns3:EndDate">
                                        <ns3:EndDate>
                                            <xsl:copy-of select="ns3:EndDate/@xsi:nil"/>
                                            <xsl:value-of select="ns3:EndDate"/>
                                        </ns3:EndDate>
                                    </xsl:if>
                                    <xsl:for-each select="ns3:RatingInfo">
                                        <ns3:RatingInfo>
                                            <xsl:for-each select="ns3:RatingInfoItem">
                                                <ns3:RatingInfoItem>
                                                    <xsl:if test="ns3:Unit">
                                                        <ns3:Unit>
                                                            <xsl:value-of select="ns3:Unit"/>
                                                        </ns3:Unit>
                                                    </xsl:if>
                                                    <xsl:if test="ns3:Quantity">
                                                        <ns3:Quantity>
                                                            <xsl:value-of select="ns3:Quantity"/>
                                                        </ns3:Quantity>
                                                    </xsl:if>
                                                    <xsl:if test="ns3:UsedQuantity">
                                                        <ns3:UsedQuantity>
                                                            <xsl:value-of select="ns3:UsedQuantity"/>
                                                        </ns3:UsedQuantity>
                                                    </xsl:if>
                                                    <xsl:if test="ns3:MaxLimit">
                                                        <ns3:MaxLimit>
                                                            <xsl:value-of select="ns3:MaxLimit"/>
                                                        </ns3:MaxLimit>
                                                    </xsl:if>
                                                    <xsl:if test="ns3:MinLimit">
                                                        <ns3:MinLimit>
                                                            <xsl:value-of select="ns3:MinLimit"/>
                                                        </ns3:MinLimit>
                                                    </xsl:if>
                                                    <xsl:if test="ns3:WarningLimit">
                                                        <ns3:WarningLimit>
                                                            <xsl:value-of select="ns3:WarningLimit"/>
                                                        </ns3:WarningLimit>
                                                    </xsl:if>
                                                    <xsl:if test="ns3:ExpirationDate">
                                                        <ns3:ExpirationDate>
                                                            <xsl:copy-of select="ns3:ExpirationDate/@xsi:nil"/>
                                                            <xsl:value-of select="ns3:ExpirationDate"/>
                                                        </ns3:ExpirationDate>
                                                    </xsl:if>
                                                </ns3:RatingInfoItem>
                                            </xsl:for-each>
                                        </ns3:RatingInfo>
                                    </xsl:for-each>
                                    <xsl:for-each select="ns3:ProductSpecs">
                                        <ns3:ProductSpecs>
                                            <xsl:for-each select="ns3:ProductSpec">
                                                <ns3:ProductSpec>
                                                    <ns3:Name>
                                                        <xsl:value-of select="ns3:Name"/>
                                                    </ns3:Name>
                                                    <ns3:Value>
                                                        <xsl:value-of select="ns3:Value"/>
                                                    </ns3:Value>
                                                    <ns3:Measure>
                                                        <xsl:value-of select="ns3:Measure"/>
                                                    </ns3:Measure>
                                                </ns3:ProductSpec>
                                            </xsl:for-each>
                                        </ns3:ProductSpecs>
                                    </xsl:for-each>
                                    <xsl:if test="ns3:CommitmentStartDate">
                                        <ns3:CommitmentStartDate>
                                            <xsl:copy-of select="ns3:CommitmentStartDate/@xsi:nil"/>
                                            <xsl:value-of select="ns3:CommitmentStartDate"/>
                                        </ns3:CommitmentStartDate>
                                    </xsl:if>
                                    <xsl:if test="ns3:CommitmentEndDate">
                                        <ns3:CommitmentEndDate>
                                            <xsl:copy-of select="ns3:CommitmentEndDate/@xsi:nil"/>
                                            <xsl:value-of select="ns3:CommitmentEndDate"/>
                                        </ns3:CommitmentEndDate>
                                    </xsl:if>
                                    <xsl:for-each select="ns3:Params">
                                        <ns3:Params>
                                            <xsl:for-each select="ns4:Param">
                                                <ns4:Param>
                                                    <ns4:Name>
                                                        <xsl:value-of select="ns4:Name"/>
                                                    </ns4:Name>
                                                    <ns4:Value>
                                                        <xsl:value-of select="ns4:Value"/>
                                                    </ns4:Value>
                                                </ns4:Param>
                                            </xsl:for-each>
                                        </ns3:Params>
                                    </xsl:for-each>
                                </ns3:SubscriberProduct>
                            </xsl:if>
                        </xsl:for-each>
                    </ns3:SubscriberProducts>
                    <xsl:copy-of select="$ParseInput/ns3:InsertSubscriberInput/ns3:PaymentInfo"/>
                </ns3:InsertSubscriberInput>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="ErrorHandler">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>60</pd:x>
        <pd:y>604</pd:y>
        <config>
            <processName>/CommonProcesses/ErrorHandlingProcess/Exception_Message.process</processName>
        </config>
        <pd:inputBindings>
            <ns14:ExceptionRequest>
                <ns22:Header>
                    <ns22:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns22:ApplicationID>
                    <ns22:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ComponentName"/>
                    </ns22:ComponentName>
                    <ns22:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns22:Hostname>
                    <ns22:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns22:Timestamp>
                    <ns22:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/PROVISIONING"/>
                    </ns22:TransactionDomain>
                    <ns22:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                    </ns22:TransactionType>
                    <ns22:TransactionID>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </ns22:TransactionID>
                    <ns22:Message>
                        <xsl:value-of select="concat(tib:render-xml($_error),&#xA;tib:render-xml($_error_Call-SIMSearch),tib:render-xml($_error_GetReservationId),&#xA;tib:render-xml($_error_ReserveNumber),&#xA;tib:render-xml($_error_ReserveInventory))&#xA;&#xA;{--Due to card number in exception kogging input request can not be mapped Thanks --}"/>
                    </ns22:Message>
                </ns22:Header>
                <ExceptionCode>
                    <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                </ExceptionCode>
                <StackTrace>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </StackTrace>
            </ns14:ExceptionRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log">
        <pd:type>com.tibco.pe.core.WriteToLogActivity</pd:type>
        <pd:resourceType>ae.activities.log</pd:resourceType>
        <pd:x>241</pd:x>
        <pd:y>693</pd:y>
        <config>
            <role>User</role>
        </config>
        <pd:inputBindings>
            <ns15:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                </message>
                <msgCode>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </msgCode>
            </ns15:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseInput">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>184</pd:x>
        <pd:y>203</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="ns3:InsertSubscriberInput"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/Body"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-ErrorResponse">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1291</pd:x>
        <pd:y>613</pd:y>
        <config>
            <element ref="pfx2:NewConnection_Output"/>
        </config>
        <pd:inputBindings>
            <xsl:choose>
                <xsl:when test="string-length($Populate-Error-Response/root/ErrorSourceErrCode)>0">
                    <pfx2:NewConnection_Output>
                        <pfx2:ErrorAdditionalDesc1>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorAdditionalDesc1"/>
                        </pfx2:ErrorAdditionalDesc1>
                        <pfx2:ErrorAdditionalDesc2>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorAdditionalDesc2"/>
                        </pfx2:ErrorAdditionalDesc2>
                        <pfx2:ErrorOccuranceTime>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorOccuranceTime"/>
                        </pfx2:ErrorOccuranceTime>
                        <pfx2:ErrorSourceErrCode>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorSourceErrCode"/>
                        </pfx2:ErrorSourceErrCode>
                        <pfx2:ErrorSourceErrDesc>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorSourceErrDesc"/>
                        </pfx2:ErrorSourceErrDesc>
                        <pfx2:ErrorSourceSystem>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorSourceSystem"/>
                        </pfx2:ErrorSourceSystem>
                        <pfx2:ErrorType>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorType"/>
                        </pfx2:ErrorType>
                        <pfx2:ErrorUserErrCode>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorUserErrCode"/>
                        </pfx2:ErrorUserErrCode>
                        <pfx2:ErrorUserErrDesc>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorUserErrDesc"/>
                        </pfx2:ErrorUserErrDesc>
                        <pfx2:OrderNumber>
                            <xsl:value-of select="'Error'"/>
                        </pfx2:OrderNumber>
                    </pfx2:NewConnection_Output>
                </xsl:when>
                <xsl:otherwise>
                    <pfx2:NewConnection_Output>
                        <pfx2:ErrorAdditionalDesc1>
                            <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                        </pfx2:ErrorAdditionalDesc1>
                        <pfx2:ErrorAdditionalDesc2>
                            <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                        </pfx2:ErrorAdditionalDesc2>
                        <pfx2:ErrorOccuranceTime>
                            <xsl:value-of select="$Populate-Error-Response/root/ErrorOccuranceTime"/>
                        </pfx2:ErrorOccuranceTime>
                        <pfx2:ErrorSourceErrCode>
                            <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                        </pfx2:ErrorSourceErrCode>
                        <pfx2:ErrorSourceErrDesc>
                            <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                        </pfx2:ErrorSourceErrDesc>
                        <pfx2:ErrorSourceSystem>
                            <xsl:value-of select="&quot;TIBCO&quot;"/>
                        </pfx2:ErrorSourceSystem>
                        <pfx2:ErrorType>
                            <xsl:value-of select="&quot;Technical&quot;"/>
                        </pfx2:ErrorType>
                        <pfx2:ErrorUserErrCode>
                            <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                        </pfx2:ErrorUserErrCode>
                        <pfx2:ErrorUserErrDesc>
                            <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                        </pfx2:ErrorUserErrDesc>
                        <pfx2:OrderNumber>
                            <xsl:value-of select="'Error'"/>
                        </pfx2:OrderNumber>
                    </pfx2:NewConnection_Output>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Reply to JMS Message">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>1455</pd:x>
        <pd:y>616</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>JMS Queue Receiver</EventSource>
            </ConfigurableHeaders>
        </config>
        <pd:inputBindings>
            <ns7:ActivityInput>
                <Body>
                    <xsl:value-of select="tib:render-xml($Map-ErrorResponse/pfx2:NewConnection_Output)"/>
                </Body>
            </ns7:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Reply-to-JMS-Message-For-Success">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>1634</pd:x>
        <pd:y>229</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>JMS Queue Receiver</EventSource>
            </ConfigurableHeaders>
            <ApplicationProperties>/CommonResources/Connections/JMS/Internal/EAI_EMSApplicationProperties.sharedjmsapp</ApplicationProperties>
        </config>
        <pd:inputBindings>
            <ns7:ActivityInput>
                <xsl:copy-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties"/>
                <xsl:choose>
                    <xsl:when test="$MapFlexRespose/pfx2:NewConnection_Output">
                        <Body>
                            <xsl:value-of select="tib:render-xml($MapFlexRespose/pfx2:NewConnection_Output)"/>
                        </Body>
                    </xsl:when>
                    <xsl:otherwise>
                        <Body>
                            <xsl:value-of select="tib:render-xml($ESI_Call_InsertSubscriber/pfx2:NewConnection_Output)"/>
                        </Body>
                    </xsl:otherwise>
                </xsl:choose>
            </ns7:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Group (1)">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>385</pd:x>
        <pd:y>487</pd:y>
        <pd:width>745</pd:width>
        <pd:height>249</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>simpleGroup</pd:groupType>
            <pd:serializable>false</pd:serializable>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>Populate Error Response</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ErrorLog</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Populate Error Response</pd:from>
            <pd:to>UnReserveNumber</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($ReserveNumber/ns5:numReservResponse/ns5:reservationNum)&gt;0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>UnReserveNumber</pd:from>
            <pd:to>Null-1</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Populate Error Response</pd:from>
            <pd:to>Null</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null</pd:from>
            <pd:to>Null-1</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null-1</pd:from>
            <pd:to>UnReserveInventory</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($ReserveInventory/pfx3:erp/pfx3:ReservationId)&gt;0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>UnReserveInventory</pd:from>
            <pd:to>ErrorLog</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null-1</pd:from>
            <pd:to>Null-2</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null-2</pd:from>
            <pd:to>ErrorLog</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="ErrorLog">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>1060</pd:x>
            <pd:y>547</pd:y>
            <config>
                <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
                <spawn>true</spawn>
            </config>
            <pd:inputBindings>
                <ns12:LogRequest>
                    <ns22:Header>
                        <ns22:ApplicationID>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                        </ns22:ApplicationID>
                        <ns22:ComponentName>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ComponentName"/>
                        </ns22:ComponentName>
                        <ns22:Hostname>
                            <xsl:value-of select="BW:getHostName()"/>
                        </ns22:Hostname>
                        <ns22:Timestamp>
                            <xsl:value-of select="current-dateTime()"/>
                        </ns22:Timestamp>
                        <ns22:TransactionDomain>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/PROVISIONING"/>
                        </ns22:TransactionDomain>
                        <ns22:TransactionType>
                            <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                        </ns22:TransactionType>
                        <xsl:if test="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID">
                            <ns22:TransactionID>
                                <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                            </ns22:TransactionID>
                        </xsl:if>
                        <ns22:Filename>
                            <xsl:value-of select="$_globalVariables/ns:GlobalVariables/Deployment"/>
                        </ns22:Filename>
                        <ns22:Message>
                            <xsl:value-of select="tib:render-xml($_error/ns1:ErrorReport)"/>
                        </ns22:Message>
                    </ns22:Header>
                    <xsl:if xmlns:xsl="http://www.w3.org/1999/XSL/Transform" test="string-length($JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp)>0">
                        <xsl:if test="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp">
                            <TimeDuration>
                                <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                            </TimeDuration>
                        </xsl:if>
                    </xsl:if>
                    <Category>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                    </Category>
                    <Status>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_ERR_RES_SENT"/>
                    </Status>
                    <Audit>
                        <xsl:value-of select="0"/>
                    </Audit>
                </ns12:LogRequest>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Populate Error Response">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>448</pd:x>
            <pd:y>549</pd:y>
            <config>
                <processName>/CommonProcesses/ErrorHandlingProcess/ErrorResponseMapFromEOM.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <SourceSystem>
                        <xsl:value-of select="if(exists($ESI_Call_InsertSubscriber/pfx2:NewConnection_Output)) then 'CRM'  else&#xA;if($Call_BlockNumber/ns5:numReservResponse) then 'BSCS' else&#xA;if($Call-SIMSearch/ns6:StorageMediumDetailsReadOutput) then 'BSCS' else&#xA;if($ReserveNumber/ns5:numReservResponse) then 'BSCS' else&#xA;'TIBCO'"/>
                    </SourceSystem>
                    <ChannelName>
                        <xsl:value-of select="'Selfcare'"/>
                    </ChannelName>
                    <ChannelType>
                        <xsl:value-of select="'External'"/>
                    </ChannelType>
                    <ResponseCode>
                        <xsl:value-of select="if(exists($ESI_Call_InsertSubscriber/pfx2:NewConnection_Output/pfx2:ErrorSourceErrCode)) then $ESI_Call_InsertSubscriber/pfx2:NewConnection_Output/pfx2:ErrorSourceErrCode else&#xA;$ErrorHandler/ns14:ExceptionRequest/ExceptionCode"/>
                    </ResponseCode>
                    <ResponseDescription>
                        <xsl:value-of select="if(exists($ESI_Call_InsertSubscriber/pfx2:NewConnection_Output/pfx2:ErrorSourceErrCode)) then $ESI_Call_InsertSubscriber/pfx2:NewConnection_Output/pfx2:ErrorSourceErrDesc else&#xA;$ErrorHandler/ns14:ExceptionRequest/StackTrace"/>
                    </ResponseDescription>
                    <TIBCOServiceName>
                        <xsl:value-of select="$_globalVariables/ns:GlobalVariables/BusinessProcesses/Services/Common/UpsertCustomer/ComponentName"/>
                    </TIBCOServiceName>
                    <ErrorCategory>
                        <xsl:value-of select="'2'"/>
                    </ErrorCategory>
                    <TargetSystem>
                        <xsl:value-of select="''"/>
                    </TargetSystem>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="UnReserveNumber">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>614</pd:x>
            <pd:y>544</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_Call_UnReserveNumber.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns16:numReservRequest>
                        <ns16:dnid>
                            <xsl:value-of select="$ReserveNumber/ns5:numReservResponse/ns5:dnid"/>
                        </ns16:dnid>
                        <ns16:number>
                            <xsl:value-of select="$ReserveNumber/ns5:numReservResponse/ns5:number"/>
                        </ns16:number>
                        <ns16:ReservationNumber>
                            <xsl:value-of select="$ReserveNumber/ns5:numReservResponse/ns5:reservationNum"/>
                        </ns16:ReservationNumber>
                        <ns16:userName>
                            <xsl:value-of select="'Tibco'"/>
                        </ns16:userName>
                    </ns16:numReservRequest>
                    <TransactionID>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                    <SourceSystem>
                        <xsl:value-of select="'TIBCO'"/>
                    </SourceSystem>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Null">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>609</pd:x>
            <pd:y>665</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="Null-1">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>747</pd:x>
            <pd:y>544</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="UnReserveInventory">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>892</pd:x>
            <pd:y>547</pd:y>
            <config>
                <processName>/BusinessProcesses/Services/Common/InsertSubscriber/HelperProcess/ESI_Call_UnreserveInventory.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <ns10:releaseInventoryRequest>
                        <xsl:if test="$ReserveInventory/pfx3:erp/pfx3:OrgCode">
                            <ns10:orgCode>
                                <xsl:value-of select="$ReserveInventory/pfx3:erp/pfx3:OrgCode"/>
                            </ns10:orgCode>
                        </xsl:if>
                        <ns10:reservationId>
                            <xsl:value-of select="$ReserveInventory/pfx3:erp/pfx3:ReservationId"/>
                        </ns10:reservationId>
                    </ns10:releaseInventoryRequest>
                    <TransactionID>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                    <SourceSystem>
                        <xsl:value-of select="'TIBCO'"/>
                    </SourceSystem>
                    <StartTimeStamp>
                        <xsl:value-of select="$JMS-Queue-Receiver/ns7:ActivityOutput/OtherProperties/StartTimeStamp"/>
                    </StartTimeStamp>
                </root>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Null-2">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>864</pd:x>
            <pd:y>670</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
    </pd:group>
    <pd:activity name="Log-1">
        <pd:type>com.tibco.pe.core.WriteToLogActivity</pd:type>
        <pd:resourceType>ae.activities.log</pd:resourceType>
        <pd:x>760</pd:x>
        <pd:y>819</pd:y>
        <config>
            <role>User</role>
        </config>
        <pd:inputBindings>
            <ns15:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                </message>
                <xsl:if test="$_error/ns1:ErrorReport/MsgCode">
                    <msgCode>
                        <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                    </msgCode>
                </xsl:if>
            </ns15:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>JMS Queue Receiver</pd:from>
        <pd:to>ErrorHandler</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-39424</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorHandler</pd:from>
        <pd:to>Log</pd:to>
        <pd:lineType>Curved</pd:lineType>
        <pd:lineColor>-52480</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>Reply-to-JMS-Message-For-Success</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$ESI_Call_InsertSubscriber/pfx2:NewConnection_Output/pfx2:ErrorSourceErrCode=0
or
$ESI_Call_InsertSubscriber_Flexi/pfx2:PrepaidFlexiNewContract_Output/pfx2:ErrorSourceErrCode=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>ErrorHandler</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-52480</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Receiver</pd:from>
        <pd:to>ParseInput</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseInput</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-ErrorResponse</pd:from>
        <pd:to>Reply to JMS Message</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reply to JMS Message</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reply-to-JMS-Message-For-Success</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorHandler</pd:from>
        <pd:to>Group (1)</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log</pd:from>
        <pd:to>Group (1)</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group (1)</pd:from>
        <pd:to>Map-ErrorResponse</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>Group (1)</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group (1)</pd:from>
        <pd:to>Log-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-52429</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log-1</pd:from>
        <pd:to>Map-ErrorResponse</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>