<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:ns="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd">
    <xsd:import namespace="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryOutput.xsd"/>
    <pd:name>BusinessProcesses/Services/Query/GetRatingBundles/HelperProcess/FormatResult.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Filter" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Type" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="pfx:GetCallHistoryOutput"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>27</pd:startX>
    <pd:startY>112</pd:startY>
    <pd:returnBindings>
        <root>
            <pfx:GetCallHistoryOutput>
                <pfx:Records>
                    <xsl:copy-of select="$FinalRecord/AccumulatedOutput/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record"/>
                </pfx:Records>
            </pfx:GetCallHistoryOutput>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="Filter" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="Type" type="xsd:string" minOccurs="0"/>
                                <xsd:element name="Value" type="xsd:string" minOccurs="0"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element ref="pfx:GetCallHistoryOutput"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>924</pd:endX>
    <pd:endY>111</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1464604961895</pd:targetNamespace>
    <pd:group name="Group (2)">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>101</pd:x>
        <pd:y>0</pd:y>
        <pd:width>748</pd:width>
        <pd:height>212</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>simpleGroup</pd:groupType>
            <pd:serializable>false</pd:serializable>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>Group</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Group (1)</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Group</pd:from>
            <pd:to>Group (1)</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:group name="Group">
            <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
            <pd:resourceType>ae.process.group</pd:resourceType>
            <pd:x>140</pd:x>
            <pd:y>32</pd:y>
            <pd:width>292</pd:width>
            <pd:height>140</pd:height>
            <pd:collapsedWidth>57</pd:collapsedWidth>
            <pd:collapsedHeight>70</pd:collapsedHeight>
            <pd:groupVariables/>
            <pd:joinToggle>inherit</pd:joinToggle>
            <config>
                <pd:groupType>inputLoop</pd:groupType>
                <pd:serializable>false</pd:serializable>
                <pd:over>tib:tokenize($Start/root/Filter/Value,",")</pd:over>
                <pd:iterationElementSlot>type</pd:iterationElementSlot>
                <pd:indexSlot>i</pd:indexSlot>
                <pd:outSlot>AllTypes</pd:outSlot>
                <pd:activityOutputName>GetFilter</pd:activityOutputName>
                <pd:accumulateOutput>true</pd:accumulateOutput>
            </config>
            <pd:inputBindings/>
            <pd:expanded>true</pd:expanded>
            <pd:transition>
                <pd:from>start</pd:from>
                <pd:to>GetFilter</pd:to>
                <pd:lineType>Default</pd:lineType>
                <pd:lineColor>-16777216</pd:lineColor>
                <pd:conditionType>always</pd:conditionType>
            </pd:transition>
            <pd:transition>
                <pd:from>GetFilter</pd:from>
                <pd:to>end</pd:to>
                <pd:lineType>Default</pd:lineType>
                <pd:lineColor>-16777216</pd:lineColor>
                <pd:conditionType>always</pd:conditionType>
            </pd:transition>
            <pd:activity name="GetFilter">
                <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
                <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
                <pd:x>292</pd:x>
                <pd:y>107</pd:y>
                <config>
                    <element>
                        <xsd:element name="root">
                            <xsd:complexType>
                                <xsd:sequence>
                                    <xsd:element name="Filter" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                                </xsd:sequence>
                            </xsd:complexType>
                        </xsd:element>
                    </element>
                </config>
                <pd:inputBindings>
                    <root>
                        <xsl:if test="tib:tokenize($Start/root/Filter/Value,&quot;,&quot;)[$i]">
                            <Filter>
                                <xsl:value-of select="tib:tokenize($Start/root/Filter/Value,&quot;,&quot;)[$i]"/>
                            </Filter>
                        </xsl:if>
                    </root>
                </pd:inputBindings>
            </pd:activity>
        </pd:group>
        <pd:group name="Group (1)">
            <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
            <pd:resourceType>ae.process.group</pd:resourceType>
            <pd:x>448</pd:x>
            <pd:y>31</pd:y>
            <pd:width>329</pd:width>
            <pd:height>137</pd:height>
            <pd:collapsedWidth>57</pd:collapsedWidth>
            <pd:collapsedHeight>70</pd:collapsedHeight>
            <pd:groupVariables/>
            <pd:joinToggle>inherit</pd:joinToggle>
            <config>
                <pd:groupType>inputLoop</pd:groupType>
                <pd:serializable>false</pd:serializable>
                <pd:over>$AllTypes/AccumulatedOutput/root/Filter</pd:over>
                <pd:indexSlot>Map</pd:indexSlot>
                <pd:outSlot>FinalRecord</pd:outSlot>
                <pd:activityOutputName>MapResponse</pd:activityOutputName>
                <pd:accumulateOutput>true</pd:accumulateOutput>
            </config>
            <pd:inputBindings/>
            <pd:expanded>true</pd:expanded>
            <pd:transition>
                <pd:from>start</pd:from>
                <pd:to>MapResponse</pd:to>
                <pd:lineType>Default</pd:lineType>
                <pd:lineColor>-16777216</pd:lineColor>
                <pd:conditionType>always</pd:conditionType>
            </pd:transition>
            <pd:transition>
                <pd:from>MapResponse</pd:from>
                <pd:to>end</pd:to>
                <pd:lineType>Default</pd:lineType>
                <pd:lineColor>-16777216</pd:lineColor>
                <pd:conditionType>always</pd:conditionType>
            </pd:transition>
            <pd:activity name="MapResponse">
                <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
                <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
                <pd:x>599</pd:x>
                <pd:y>107</pd:y>
                <config>
                    <element>
                        <xsd:element name="root">
                            <xsd:complexType>
                                <xsd:sequence>
                                    <xsd:element ref="pfx:GetCallHistoryOutput"/>
                                </xsd:sequence>
                            </xsd:complexType>
                        </xsd:element>
                    </element>
                </config>
                <pd:inputBindings>
                    <root>
                        <pfx:GetCallHistoryOutput>
                            <xsl:choose>
                                <xsl:when test="$Start/root/Filter/Type='Only'">
                                    <pfx:Records>
                                        <xsl:for-each select="$Start/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record[pfx:Category=$GetFilter/root/Filter[$Map]]">
                                            <pfx:Record>
                                                <xsl:if test="pfx:Aparty">
                                                    <pfx:Aparty>
                                                        <xsl:value-of select="pfx:Aparty"/>
                                                    </pfx:Aparty>
                                                </xsl:if>
                                                <xsl:if test="pfx:BParty">
                                                    <pfx:BParty>
                                                        <xsl:value-of select="pfx:BParty"/>
                                                    </pfx:BParty>
                                                </xsl:if>
                                                <xsl:if test="pfx:Duration">
                                                    <pfx:Duration>
                                                        <xsl:value-of select="pfx:Duration"/>
                                                    </pfx:Duration>
                                                </xsl:if>
                                                <xsl:if test="pfx:DateTime">
                                                    <pfx:DateTime>
                                                        <xsl:value-of select="pfx:DateTime"/>
                                                    </pfx:DateTime>
                                                </xsl:if>
                                                <xsl:if test="pfx:Amount">
                                                    <pfx:Amount>
                                                        <xsl:value-of select="pfx:Amount"/>
                                                    </pfx:Amount>
                                                </xsl:if>
                                                <xsl:if test="pfx:Category">
                                                    <pfx:Category>
                                                        <xsl:value-of select="pfx:Category"/>
                                                    </pfx:Category>
                                                </xsl:if>
                                            </pfx:Record>
                                        </xsl:for-each>
                                    </pfx:Records>
                                </xsl:when>
                                <xsl:otherwise>
                                    <pfx:Records>
                                        <xsl:for-each select="$Start/root/pfx:GetCallHistoryOutput/pfx:Records/pfx:Record[pfx:Category!=$GetFilter/root/Filter[$Map]]">
                                            <pfx:Record>
                                                <xsl:if test="pfx:Aparty">
                                                    <pfx:Aparty>
                                                        <xsl:value-of select="pfx:Aparty"/>
                                                    </pfx:Aparty>
                                                </xsl:if>
                                                <xsl:if test="pfx:BParty">
                                                    <pfx:BParty>
                                                        <xsl:value-of select="pfx:BParty"/>
                                                    </pfx:BParty>
                                                </xsl:if>
                                                <xsl:if test="pfx:Duration">
                                                    <pfx:Duration>
                                                        <xsl:value-of select="pfx:Duration"/>
                                                    </pfx:Duration>
                                                </xsl:if>
                                                <xsl:if test="pfx:DateTime">
                                                    <pfx:DateTime>
                                                        <xsl:value-of select="pfx:DateTime"/>
                                                    </pfx:DateTime>
                                                </xsl:if>
                                                <xsl:if test="pfx:Amount">
                                                    <pfx:Amount>
                                                        <xsl:value-of select="pfx:Amount"/>
                                                    </pfx:Amount>
                                                </xsl:if>
                                                <xsl:if test="pfx:Category">
                                                    <pfx:Category>
                                                        <xsl:value-of select="pfx:Category"/>
                                                    </pfx:Category>
                                                </xsl:if>
                                            </pfx:Record>
                                        </xsl:for-each>
                                    </pfx:Records>
                                </xsl:otherwise>
                            </xsl:choose>
                        </pfx:GetCallHistoryOutput>
                    </root>
                </pd:inputBindings>
            </pd:activity>
        </pd:group>
    </pd:group>
    <pd:activity name="formattingErr">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>476</pd:x>
        <pd:y>299</pd:y>
        <config>
            <faultName/>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/Msg"/>
                </message>
                <xsl:if test="$_error/ns1:ErrorReport/MsgCode">
                    <messageCode>
                        <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                    </messageCode>
                </xsl:if>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Group (2)</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group (2)</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group (2)</pd:from>
        <pd:to>formattingErr</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>