<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx61="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/ImmediateSimulationBillQuery.xsd" xmlns:pfx60="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Query/ImmediateSimulationBillQuery/Schema/ImmediateSIMBillQueryOutput.xsd" xmlns:ns="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pfx63="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Query/CallHistoryQuery/Schema/CallHistoryQueryOutput.xsd" xmlns:pfx62="http://www.zain.com/ZESB/Services/CallHistory/Types" xmlns:ns101="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:ns41="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/portfolio" xmlns:pfx57="http://schemas.tibco.com/bw/plugins/jdbc/5.0/jdbcExceptions" xmlns:pfx58="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetBilledUsage/Schema/BilledUsageOutput.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx59="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Query/GetBilledUsage/Schema/BilledUsageOutput.xsd" xmlns:pfx53="http://lhsgroup.com/lhsws/money" xmlns:pfx54="http://ericsson.com/services/ws_CIL_5/storagemediumsearch" xmlns:pfx55="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/GetUsageDetails.xsd" xmlns:pfx56="http://www.ericsson.com/ZainKW/Services/BSCS/Query/BilledUsageOutput.xsd" xmlns:pfx52="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderRes.xsd" xmlns:pfx51="http://xmlns.example.com/1323156482391/OperationImpl" xmlns:pfx50="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderReq.xsd" xmlns:pfx="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoReq.xsd" xmlns:ns51="www.tibco.com/createcustomer" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:pfx48="http://ericsson.com/services/ws_CIL_5" xmlns:pfx49="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/Response.xsd" xmlns:pfx46="http://ericsson.com/services/ws_CIL_5/contractserviceresourceswrite" xmlns:pfx47="http://ericsson.com/services/ws_CIL_5/contractwrite" xmlns:pfx44="http://ericsson.com/services/ws_CIL_5/contractdeviceadd" xmlns:pfx45="http://ericsson.com/services/ws_CIL_5/contractservicesadd" xmlns:pfx42="http://ericsson.com/services/ws_CIL_5/contractcreatezain" xmlns:pfx43="http://ericsson.com/services/ws_CIL_5/contractnew" xmlns:pfx41="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Res" xmlns:pfx40="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/Request.xsd" xmlns:pfx39="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" xmlns:pfx31="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodRequest.xsd" xmlns:pfx32="http://siebel.com/BillDeliveryMethodAPI" xmlns:pfx33="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodResponse.xsd" xmlns:pfx34="http://www.zain.com/ZESB/Services/eAccountManagement/Types" xmlns:pfx35="http://www.zain.com/ZESB/Services/eAccountManagement" xmlns:pfx36="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:pfx37="http://www.tibco.com/schemas/CommonProject/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" xmlns:pfx38="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx30="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTAResponse.xsd" xmlns:pfx28="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTARequest.xsd" xmlns:pfx29="http://siebel.com/GetRTAAPI" xmlns:pfx22="http://tempuri.org/ZainWS/Service1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx23="http://www.ericsson.com/Mozaic/BusinessSchemas/Generic/SendNotificationAck.xsd" xmlns:pfx20="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoRes.xsd" xmlns:pfx21="http://www.siebel.com/xml/MOZ1%20Account%20Creation%20Req" xmlns:pfx26="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetCustomerDemographicsReq.xsd" xmlns:pfx27="http://www.siebel.com/xml/MOZ1%20Arab%20Bank%20Redemption%20IO" xmlns:pfx24="http://siebel.com/ArabKurmalakPoint" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:pfx25="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetInvoiceCDMRes.xsd" xmlns:pfx16="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx15="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Res" xmlns:pfx14="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeReq.xsd" xmlns:pfx13="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" xmlns:pfx12="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerRes.xsd" xmlns:pfx11="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerReq.xsd" xmlns:pfx10="http://www.siebel.com/xml/MOZ1%20Error%20Log%20Res" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:pfx19="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd" xmlns:pfx18="http://www.lhsgroup.com/ws_v3_CBIO_2_1" xmlns:ns02="www.tibco.com/plugin/Sleep" xmlns:pfx17="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeRes.xsd" xmlns:ns16="http://www.siebel.com/xml/MOZ1%20Kurmalak%20Inbound%20IO" xmlns:ns17="http://www.siebel.com/xml/MOZ1%20Arab%20Bank%20IO" xmlns:ns14="http://www.zain.com/schemas/CommonProject/BusinessSchemas/Common/CRM/ListOfValues.xsd" xmlns:ns15="http://xmlns.tibco.com/encodings/mime" xmlns:ns18="http://www.siebel.com/xml/MOZ1%20Kurmalak%20Redemption%20Points%20IO" xmlns:ns19="http://ericsson.com/services/ws_CIL_5/customerread" xmlns:ns12="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:ns13="http://tibco.com/namespaces/tnt/plugins/soap" xmlns:ns10="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:ns11="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:ns25="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns21="http://ericsson.com/services/ws_CIL_5/fafnumberwrite" xmlns:ns22="http://xmlns.zain.com/BSS/ESB/CDM/Base" xmlns:ns23="http://www.ericsson.com/ZainKW/CommonResources/SharedVariables/External/ListOfValues.xsd" xmlns:ns24="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" xmlns:pfx81="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XML/AccountCreationReq_13Jan2012.xsd" xmlns:ns20="http://ericsson.com/services/ws_CIL_5/sessionchange" xmlns:pfx5="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" xmlns:pfx4="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" xmlns:pfx2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx9="http://www.tibco.com/pe/DeployedVarsType" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/CDM/CDM.xsd" xmlns:pfx7="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" xmlns:pfx6="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" xmlns:ns9="http://schemas.tibco.com/bw/plugins/http/5.0/httpExceptions" xmlns:ns5="http://xmlns.zain.jo.org/CDM/CustomerAndOrder" xmlns:ns6="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:ns7="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pfx71="http://www.tibco.com/pe/SignalInActivitySchema" xmlns:ns8="http://www.tibco.com/pe/EngineTypes" xmlns:ns2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/billingAccount" xmlns:ns1="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customer" xmlns:ns4="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/contactPerson" xmlns:pfx64="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryInput.xsd" xmlns:ns3="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/address" xmlns:ns0="http://xml.apache.org/axis/wsdd/providers/java">
    <xsd:import namespace="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" schemaLocation="/CDM/customerAccount.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" schemaLocation="/CustomerAndOrder.xsd"/>
    <xsd:import namespace="http://xmlns.zain.jo.org/CDM/CustomerAndOrder"/>
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" schemaLocation="/AccountCreationRes_22Jan2012.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" schemaLocation="/CDM/Zain_EAIV2.3.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" schemaLocation="/CDM/Zain_EAIV2.8.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" schemaLocation="/BusinessSchemas/Common/CLE/ExceptionRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerReq.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateCustomer/CreateCustomerReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Provisioning/CreateCustomerRes.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateCustomer/CreateCustomerRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" schemaLocation="/CDM/CDM.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeReq.xsd" schemaLocation="/BusinessSchemas/Services/Modification/AddressChange/AddressChangeReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/AddressChangeRes.xsd" schemaLocation="/BusinessSchemas/Services/Modification/AddressChange/AddressChangeRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoRes.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetBalance/GetBalanceInfoRes.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd" schemaLocation="/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/GetBalanceInfoReq.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetBalance/GetBalanceInfoReq.xsd"/>
    <xsd:import namespace="http://www.lhsgroup.com/ws_v3_CBIO_2_1" schemaLocation="/BusinessSchemas/ESI/BSCS/Query/WSDLs/UnbilledUsageRead.wsdl"/>
    <xsd:import namespace="http://tempuri.org/ZainWS/Service1" schemaLocation="/BusinessSchemas/ESI/EPoints/Epoints.wsdl"/>
    <xsd:import namespace="http://siebel.com/ArabKurmalakPoint" schemaLocation="/BusinessSchemas/ESI/CRM/Query/WSDLs/ArabKurmalakPoint.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTARequest.xsd" schemaLocation="/BusinessSchemas/Services/Query/RTA/RTARequest.xsd"/>
    <xsd:import namespace="http://siebel.com/GetRTAAPI" schemaLocation="/BusinessSchemas/ESI/CRM/Query/WSDLs/GetRTA.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Query/RTAResponse.xsd" schemaLocation="/BusinessSchemas/Services/Query/RTA/RTAResponse.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodRequest.xsd" schemaLocation="/BusinessSchemas/Services/Modification/BillDeliveryMethod/BillDeliveryMethodRequest.xsd"/>
    <xsd:import namespace="http://siebel.com/BillDeliveryMethodAPI" schemaLocation="/BusinessSchemas/ESI/CRM/Modification/WSDLs/BillDeliveryMethod.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/BillDeliveryMethodResponse.xsd" schemaLocation="/BusinessSchemas/Services/Modification/BillDeliveryMethod/BillDeliveryMethodResponse.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/eAccountManagement/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/eAccountManagementOutbound/eAccountManagementOutbound.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerRequest.xsd" schemaLocation="/BusinessSchemas/Services/Modification/eAccountManager/eAccountManagerRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/eAccountManagerResponse.xsd" schemaLocation="/BusinessSchemas/Services/Modification/eAccountManager/eAccountManagerResponse.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/Request.xsd" schemaLocation="/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/CreateOrderRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/Response.xsd" schemaLocation="/BusinessSchemas/Services/Applications/ConceptWave/CreateOrder/CreateOrderResponse.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderReq.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateOrder/CreateOrderReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Provisioning/CreateOrderRes.xsd" schemaLocation="/BusinessSchemas/Services/Provisioning/CreateOrder/CreateOrderRes.xsd"/>
    <xsd:import namespace="http://ericsson.com/services/ws_CIL_5/contractcreatezain" schemaLocation="/ContractCreatezainService.wsdl"/>
    <xsd:import namespace="http://ericsson.com/services/ws_CIL_5/storagemediumsearch" schemaLocation="/BusinessWSDLS/Services/BSCS/StorageMediumSearch/StorageMediumSearchService.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/GetUsageDetails.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetUsageDetails/GetUsageDetails.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetBilledUsage/Schema/BilledUsageOutput.xsd" schemaLocation="/BusinessProcesses/Services/BSCS/Query/GetBilledUsage/Schema/BilledUsageOutput.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Query/GetBilledUsage/Schema/BilledUsageOutput.xsd" schemaLocation="/BusinessProcesses/Services/Query/GetBilledUsage/Schema/BilledUsageOutput.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Query/ImmediateSimulationBillQuery/Schema/ImmediateSIMBillQueryOutput.xsd" schemaLocation="/BusinessProcesses/Services/Query/ImmediateSimulationBillQuery/Schema/ImmediateSIMBillQueryOutput.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Query/ImmediateSimulationBillQuery.xsd" schemaLocation="/BusinessSchemas/Services/Query/ImmediateSimulationBillQuery/ImmediateSimulationBillQuery.xsd"/>
    <xsd:import namespace="http://www.zain.com/ZESB/Services/CallHistory/Types" schemaLocation="/BusinessWSDLS/Services/WSDLS/CallHistory/CallHistoryInbound.wsdl"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/Query/CallHistoryQuery/Schema/CallHistoryQueryOutput.xsd" schemaLocation="/BusinessProcesses/Services/Query/CallHistoryQuery/Schema/CallHistoryQueryOutput.xsd"/>
    <xsd:import namespace="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryInput.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryInput.xsd"/>
    <xsd:import namespace="http://www.tibco.com//BusinessSchemas/Services/Query/GetCallHistoryoutput.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryOutput.xsd"/>
    <xsd:import namespace="http://www.xmlns.zain.com/BSS/ESB/ZainKWFault.xsd" schemaLocation="/CDM/ZainKWFault.xsd"/>
    <wsdl:import namespace="http://www.lhsgroup.com/ws_v3_CBIO_2_1" location="/BusinessSchemas/ESI/BSCS/Query/WSDLs/UnbilledUsageRead.wsdl"/>
    <wsdl:import namespace="http://tempuri.org/ZainWS/Service1" location="/BusinessSchemas/ESI/EPoints/Epoints.wsdl"/>
    <wsdl:import namespace="http://siebel.com/ArabKurmalakPoint" location="/BusinessSchemas/ESI/CRM/Query/WSDLs/ArabKurmalakPoint.wsdl"/>
    <wsdl:import namespace="http://siebel.com/GetRTAAPI" location="/BusinessSchemas/ESI/CRM/Query/WSDLs/GetRTA.wsdl"/>
    <wsdl:import namespace="http://siebel.com/BillDeliveryMethodAPI" location="/BusinessSchemas/ESI/CRM/Modification/WSDLs/BillDeliveryMethod.wsdl"/>
    <wsdl:import namespace="http://www.zain.com/ZESB/Services/eAccountManagement" location="/BusinessWSDLS/Services/WSDLS/eAccountManagementOutbound/eAccountManagementOutbound.wsdl"/>
    <wsdl:import namespace="http://ericsson.com/services/ws_CIL_5" location="/BusinessWSDLS/Services/BSCS/StorageMediumSearch/StorageMediumSearchService.wsdl"/>
    <pd:name>BusinessProcesses/Services/Query/CallHistoryQuery/HelperProcess/ESI_Call_CallHistoryQuery.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="group">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element ref="pfx62:GetHistoryRequest"/>
                    <xsd:element name="TrackingId" type="xsd:string"/>
                    <xsd:element name="StartTimeStamp" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="CompleteFilter" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="AllServices" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="AllService" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="TobeExcluded" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="ExcludedServices" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="UsageType" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="UsgType" type="xsd:string"/>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>29</pd:startX>
    <pd:startY>186</pd:startY>
    <pd:returnBindings>
        <xsl:copy-of select="$NativeToCDM/root"/>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:choice minOccurs="0">
                    <xsd:element ref="ns25:GetCallHistoryOutput"/>
                    <xsd:element ref="ns24:ErrorResponse"/>
                </xsd:choice>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>1351</pd:endX>
    <pd:endY>188</pd:endY>
    <pd:errorSchemas>
        <ErrorSchema ref="ns24:ErrorResponse"/>
    </pd:errorSchemas>
    <pd:processVariables>
        <Variable0>
            <xsd:element name="count" type="xsd:string"/>
        </Variable0>
        <ExceptorOnly>
            <xsd:element name="root">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="QueryIn" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </ExceptorOnly>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1323154311057</pd:targetNamespace>
    <pd:activity name="LogIn">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>289</pd:x>
        <pd:y>190</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/CallHistoryQuery/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <ns6:TransactionID>
                        <xsl:value-of select="$Start/group/TrackingId"/>
                    </ns6:TransactionID>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="tib:render-xml($Start/group/pfx62:GetHistoryRequest)"/>
                    </ns6:Message>
                    <ns6:Transaction>
                        <xsl:value-of select="tib:render-xml($MapReq)"/>
                    </ns6:Transaction>
                </ns6:Header>
                <TimeDuration>
                    <xsl:value-of select="$Start/group/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_REQ_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log_Out">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>859</pd:x>
        <pd:y>192</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/CallHistoryQuery/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <ns6:TransactionID>
                        <xsl:value-of select="$Start/group/TrackingId"/>
                    </ns6:TransactionID>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="tib:render-xml($CallProcedureCallHistoryQuery/resultSet)"/>
                    </ns6:Message>
                </ns6:Header>
                <TimeDuration>
                    <xsl:value-of select="$Start/group/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_RES_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="NativeToCDM">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1114</pd:x>
        <pd:y>190</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:choice minOccurs="0">
                            <xsd:element ref="ns25:GetCallHistoryOutput"/>
                            <xsd:element ref="ns24:ErrorResponse"/>
                        </xsd:choice>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:choose>
                    <xsl:when test="exists($ParseQueryOutput/Resultsets/ResultSet1)">
                        <xsl:for-each select="$ParseQueryOutput/Resultsets/ResultSet1">
                            <ns25:GetCallHistoryOutput>
                                <ns25:Status>
                                    <xsl:value-of select="&quot;COMPLETED&quot;"/>
                                </ns25:Status>
                                <ns25:Records>
                                    <xsl:for-each select="Record1">
                                        <xsl:sort select="START_TIME" order="descending"/>
                                        <ns25:Record>
                                            <xsl:if test="A_PARTY">
                                                <ns25:Aparty>
                                                    <xsl:value-of select="A_PARTY"/>
                                                </ns25:Aparty>
                                            </xsl:if>
                                            <xsl:if test="B_PARTY">
                                                <ns25:BParty>
                                                    <xsl:value-of select="B_PARTY"/>
                                                </ns25:BParty>
                                            </xsl:if>
                                            <ns25:Duration>
                                                <xsl:value-of select="if(DURATION=&quot;&quot;) then 0 else&#xA;DURATION"/>
                                            </ns25:Duration>
                                            <xsl:if test="START_TIME">
                                                <ns25:DateTime>
                                                    <xsl:value-of select="substring-before(START_TIME,&quot;+&quot;)"/>
                                                </ns25:DateTime>
                                            </xsl:if>
                                            <xsl:if test="CALL_COST">
                                                <ns25:Amount>
                                                    <xsl:value-of select="CALL_COST"/>
                                                </ns25:Amount>
                                            </xsl:if>
                                            <xsl:choose>
                                                <xsl:when test="DECODETYPEHHOMEVVISITORIINTERNATIONAL='INTERNATIONAL'">
                                                    <ns25:Category>
                                                        <xsl:value-of select="&quot;O&quot;"/>
                                                    </ns25:Category>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:choose>
                                                        <xsl:when test="CALL_CATEGORY='ROAM_IN'">
                                                            <ns25:Category>
                                                                <xsl:value-of select="&quot;F&quot;"/>
                                                            </ns25:Category>
                                                        </xsl:when>
                                                        <xsl:when test="CALL_CATEGORY='VIDEO'">
                                                            <ns25:Category>
                                                                <xsl:value-of select="&quot;V&quot;"/>
                                                            </ns25:Category>
                                                        </xsl:when>
                                                        <xsl:when test="CALL_CATEGORY='SMSMO'">
                                                            <xsl:choose>
                                                                <xsl:when test="DECODETYPEHHOMEVVISITORIINTERNATIONAL=&quot;HOME&quot;">
                                                                    <ns25:Category>
                                                                        <xsl:value-of select="'S'"/>
                                                                    </ns25:Category>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <ns25:Category>
                                                                        <xsl:value-of select="'E'"/>
                                                                    </ns25:Category>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                        <xsl:when test="CALL_CATEGORY='GSM MMS'">
                                                            <xsl:choose>
                                                                <xsl:when test="DECODETYPEHHOMEVVISITORIINTERNATIONAL=&quot;HOME&quot;">
                                                                    <ns25:Category>
                                                                        <xsl:value-of select="'U'"/>
                                                                    </ns25:Category>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <ns25:Category>
                                                                        <xsl:value-of select="'U'"/>
                                                                    </ns25:Category>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                        <xsl:when test="CALL_CATEGORY='GSM Telephony'">
                                                            <xsl:choose>
                                                                <xsl:when test="DECODETYPEHHOMEVVISITORIINTERNATIONAL=&quot;HOME&quot;">
                                                                    <ns25:Category>
                                                                        <xsl:value-of select="'L'"/>
                                                                    </ns25:Category>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:choose>
                                                                        <xsl:when test="A_PARTY=$Start/group/pfx62:GetHistoryRequest/pfx62:Subno">
                                                                            <ns25:Category>
                                                                                <xsl:value-of select="'D'"/>
                                                                            </ns25:Category>
                                                                        </xsl:when>
                                                                        <xsl:otherwise>
                                                                            <ns25:Category>
                                                                                <xsl:value-of select="'D'"/>
                                                                            </ns25:Category>
                                                                        </xsl:otherwise>
                                                                    </xsl:choose>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                        <xsl:when test="CALL_CATEGORY='Data'">
                                                            <xsl:choose>
                                                                <xsl:when test="DECODETYPEHHOMEVVISITORIINTERNATIONAL=&quot;HOME&quot;">
                                                                    <xsl:choose>
                                                                        <xsl:when test="contains($Start/group/pfx62:GetHistoryRequest/pfx62:Filter/pfx62:Value,&quot;T&quot;)">
                                                                            <ns25:Category>
                                                                                <xsl:value-of select="'T'"/>
                                                                            </ns25:Category>
                                                                        </xsl:when>
                                                                        <xsl:otherwise>
                                                                            <ns25:Category>
                                                                                <xsl:value-of select="'P'"/>
                                                                            </ns25:Category>
                                                                        </xsl:otherwise>
                                                                    </xsl:choose>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <ns25:Category>
                                                                        <xsl:value-of select="'K'"/>
                                                                    </ns25:Category>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                        </xsl:when>
                                                    </xsl:choose>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </ns25:Record>
                                    </xsl:for-each>
                                </ns25:Records>
                            </ns25:GetCallHistoryOutput>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:when test="exists($CallProcedureCallHistoryQuery/resultSet/outputSet)">
                        <xsl:for-each select="$CallProcedureCallHistoryQuery/resultSet/outputSet">
                            <ns24:ErrorResponse>
                                <ns24:Error_SourceSystem>
                                    <xsl:value-of select="&quot;BSCS&quot;"/>
                                </ns24:Error_SourceSystem>
                                <xsl:if test="not((P_ERRORCODE_OUT/@xsi:nil=(&quot;true&quot;)) or (P_ERRORCODE_OUT/@xsi:nil=(&quot;1&quot;)))">
                                    <ns24:Error_SourceErrCode>
                                        <xsl:value-of select="P_ERRORCODE_OUT"/>
                                    </ns24:Error_SourceErrCode>
                                </xsl:if>
                                <xsl:if test="not((P_ERRORMSG_OUT/@xsi:nil=(&quot;true&quot;)) or (P_ERRORMSG_OUT/@xsi:nil=(&quot;1&quot;)))">
                                    <ns24:Error_SourceErrDesc>
                                        <xsl:value-of select="P_ERRORMSG_OUT"/>
                                    </ns24:Error_SourceErrDesc>
                                </xsl:if>
                            </ns24:ErrorResponse>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns24:ErrorResponse>
                            <ns24:Error_SourceSystem>
                                <xsl:value-of select="&quot;TIBCO&quot;"/>
                            </ns24:Error_SourceSystem>
                            <xsl:if test="$_error/ns8:ErrorReport/MsgCode">
                                <ns24:Error_SourceErrCode>
                                    <xsl:value-of select="$_error/ns8:ErrorReport/MsgCode"/>
                                </ns24:Error_SourceErrCode>
                            </xsl:if>
                            <xsl:if test="$_error/ns8:ErrorReport/Msg">
                                <ns24:Error_SourceErrDesc>
                                    <xsl:value-of select="$_error/ns8:ErrorReport/Msg"/>
                                </ns24:Error_SourceErrDesc>
                            </xsl:if>
                        </ns24:ErrorResponse>
                    </xsl:otherwise>
                </xsl:choose>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>374</pd:x>
        <pd:y>11</pd:y>
        <pd:width>389</pd:width>
        <pd:height>356</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>errorLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:indexSlot>iError</pd:indexSlot>
            <pd:errorCondition>$iError=$_globalVariables/pfx9:GlobalVariables/CommonProcesses/ErrorHandling/Retry/MaxRetryCount</pd:errorCondition>
            <pd:suspendAfterErrorRetry>false</pd:suspendAfterErrorRetry>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>CallProcedureCallHistoryQuery</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>ErrorCode_LookUp</pd:from>
            <pd:to>end</pd:to>
            <pd:xpathDescription>NoRetry</pd:xpathDescription>
            <pd:lineType>Multiple Bends</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null</pd:from>
            <pd:to>end</pd:to>
            <pd:xpathDescription>otherwise</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>CallProcedureCallHistoryQuery</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null</pd:from>
            <pd:to>Sleep</pd:to>
            <pd:xpathDescription>Timeout</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>string-length($_error_CallProcedureCallHistoryQuery/ActivityErrors/pfx57:JDBCTimedOutException/msgCode)&gt;0
or
string-length($_error_CallProcedureCallHistoryQuery/ActivityErrors/pfx57:LoginTimedOutException/msgCode)&gt;0</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>CallProcedureCallHistoryQuery</pd:from>
            <pd:to>Null</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>error</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Sleep</pd:from>
            <pd:to>GenerateTechnicalError</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>CallProcedureCallHistoryQuery</pd:from>
            <pd:to>ErrorCode_LookUp</pd:to>
            <pd:xpathDescription>RetryErr</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>exists($CallProcedureCallHistoryQuery/resultSet/outputSet/P_ERRORCODE_OUT)
and 
$CallProcedureCallHistoryQuery/resultSet/outputSet/P_ERRORCODE_OUT!=1
and 
$CallProcedureCallHistoryQuery/resultSet/outputSet/P_ERRORCODE_OUT !=9002</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>ErrorCode_LookUp</pd:from>
            <pd:to>Null</pd:to>
            <pd:xpathDescription>Retry</pd:xpathDescription>
            <pd:lineType>Multiple Bends</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>$ErrorCode_LookUp/root/errorGroup/RETRYFLAG='true'</pd:xpath>
        </pd:transition>
        <pd:activity name="Sleep">
            <pd:type>com.tibco.plugin.timer.SleepActivity</pd:type>
            <pd:resourceType>ae.activities.sleep</pd:resourceType>
            <pd:x>661</pd:x>
            <pd:y>275</pd:y>
            <config/>
            <pd:inputBindings>
                <ns02:SleepInputSchema>
                    <IntervalInMillisec>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/CommonSettings/JMSTimeOuts/Timeout_Regular_Wait"/>
                    </IntervalInMillisec>
                </ns02:SleepInputSchema>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Null">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>563</pd:x>
            <pd:y>195</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="GenerateTechnicalError">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>465</pd:x>
            <pd:y>273</pd:y>
            <config>
                <faultName>ErrorSchema</faultName>
            </config>
            <pd:inputBindings>
                <ns:ActivityInput>
                    <data>
                        <ns24:ErrorResponse>
                            <ns24:Error_SourceSystem>
                                <xsl:value-of select="&quot;TIBCO&quot;"/>
                            </ns24:Error_SourceSystem>
                            <ns24:Error_SourceErrCode>
                                <xsl:value-of select="$_error/ns8:ErrorReport/MsgCode"/>
                            </ns24:Error_SourceErrCode>
                            <ns24:Error_SourceErrDesc>
                                <xsl:value-of select="$_error/ns8:ErrorReport/Msg"/>
                            </ns24:Error_SourceErrDesc>
                        </ns24:ErrorResponse>
                    </data>
                </ns:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="CallProcedureCallHistoryQuery">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>564</pd:x>
            <pd:y>76</pd:y>
            <config>
                <timeout>%%BusinessProcesses/Services/BSCS/Query/CallHistoryQuery/JDBC_TimeOut%%</timeout>
                <maxRows>0</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/CommonResources/Connections/JDBC/External/BSCSDBConnection.sharedjdbc</jdbcSharedConfig>
                <schema/>
                <ProcedureName>ZAINKW_ESB_CALLHIST_QUERY_SP</ProcedureName>
                <catalog>BSCS_USAGE_QUERY_PKG</catalog>
                <oraObjects/>
                <oraTables/>
                <parameterTypes>
                    <parameter>
                        <colName>P_CUSTOMERID_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_MSISDN_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_CONTRACTID_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_FROMDT_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_TODT_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_CRITERIA_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_USAGE_TYPE_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_RESULT_OUT</colName>
                        <colType>3</colType>
                        <dataType>-10</dataType>
                        <typeName>REF CURSOR</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_ERRORCODE_OUT</colName>
                        <colType>4</colType>
                        <dataType>2</dataType>
                        <typeName>NUMBER</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_ERRORMSG_OUT</colName>
                        <colType>4</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <P_CUSTOMERID_IN>
                            <xsl:choose>
                                <xsl:when test="exists($MapReq/group/pfx64:GetCallHistoryInput/pfx64:ContractId)">
                                    <xsl:value-of select="$MapReq/group/pfx64:GetCallHistoryInput/pfx64:ContractId"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </P_CUSTOMERID_IN>
                        <P_MSISDN_IN>
                            <xsl:choose>
                                <xsl:when test="exists($MapReq/group/pfx64:GetCallHistoryInput/pfx64:Subno)">
                                    <xsl:value-of select="$MapReq/group/pfx64:GetCallHistoryInput/pfx64:Subno"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </P_MSISDN_IN>
                        <P_CONTRACTID_IN>
                            <xsl:value-of select="&quot;&quot;"/>
                        </P_CONTRACTID_IN>
                        <P_FROMDT_IN>
                            <xsl:choose>
                                <xsl:when test="exists($MapReq/group/pfx64:GetCallHistoryInput/pfx64:From)">
                                    <xsl:value-of select="$MapReq/group/pfx64:GetCallHistoryInput/pfx64:From"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </P_FROMDT_IN>
                        <P_TODT_IN>
                            <xsl:choose>
                                <xsl:when test="exists($MapReq/group/pfx64:GetCallHistoryInput/pfx64:To)">
                                    <xsl:value-of select="$MapReq/group/pfx64:GetCallHistoryInput/pfx64:To"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </P_TODT_IN>
                        <xsl:choose>
                            <xsl:when test="$Start/group/pfx62:GetHistoryRequest/pfx62:Filter/pfx62:Type='Only'">
                                <xsl:choose>
                                    <xsl:when test="string-length($MapReq/group/pfx64:GetCallHistoryInput/pfx64:Filter/pfx64:Value)>0">
                                        <P_CRITERIA_IN>
                                            <xsl:choose>
                                                <xsl:when test="exists($MapReq/group/pfx64:GetCallHistoryInput/pfx64:Filter/pfx64:Value)">
                                                    <xsl:value-of select="$MapReq/group/pfx64:GetCallHistoryInput/pfx64:Filter/pfx64:Value"/>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </P_CRITERIA_IN>
                                    </xsl:when>
                                    <xsl:otherwise>
                                        <P_CRITERIA_IN>
                                            <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/CallHistoryQuery/TotalValuesLOV"/>
                                        </P_CRITERIA_IN>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:when>
                            <xsl:otherwise>
                                <P_CRITERIA_IN>
                                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/CallHistoryQuery/TotalValuesLOV"/>
                                </P_CRITERIA_IN>
                            </xsl:otherwise>
                        </xsl:choose>
                        <P_USAGE_TYPE_IN xsi:nil="true"/>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="ErrorCode_LookUp">
            <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
            <pd:resourceType>ae.process.subprocess</pd:resourceType>
            <pd:x>453</pd:x>
            <pd:y>220</pd:y>
            <config>
                <processName>/CommonProcesses/ErrorHandlingProcess/ErrorCode_LookUp.process</processName>
            </config>
            <pd:inputBindings>
                <root>
                    <xsl:if test="not(($CallProcedureCallHistoryQuery/resultSet/outputSet/P_ERRORCODE_OUT/@xsi:nil=(&quot;true&quot;)) or ($CallProcedureCallHistoryQuery/resultSet/outputSet/P_ERRORCODE_OUT/@xsi:nil=(&quot;1&quot;)))">
                        <MsgCode>
                            <xsl:value-of select="$CallProcedureCallHistoryQuery/resultSet/outputSet/P_ERRORCODE_OUT"/>
                        </MsgCode>
                    </xsl:if>
                    <TargetSystem>
                        <xsl:value-of select="&quot;BSCS&quot;"/>
                    </TargetSystem>
                </root>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="GenerateTimeOutError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>570</pd:x>
        <pd:y>471</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <data>
                    <xsl:copy-of select="$_error_GenerateTechnicalError/ns24:ErrorResponse"/>
                </data>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseQueryOutput">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>972</pd:x>
        <pd:y>64</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>false</validateOutput>
            <term ref="pfx63:Resultsets"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$CallProcedureCallHistoryQuery/resultSet/UnresolvedResultsets"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>1141</pd:x>
        <pd:y>62</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <data>
                    <ns24:ErrorResponse>
                        <ns24:Error_SourceSystem>
                            <xsl:value-of select="&quot;ESB&quot;"/>
                        </ns24:Error_SourceSystem>
                        <ns24:Error_SourceErrCode>
                            <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonErrors/ParsingErrorCode"/>
                        </ns24:Error_SourceErrCode>
                        <ns24:Error_SourceErrDesc>
                            <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonErrors/ParsingErrorDesc"/>
                        </ns24:Error_SourceErrDesc>
                    </ns24:ErrorResponse>
                </data>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapReq">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>288</pd:x>
        <pd:y>323</pd:y>
        <config>
            <element>
                <xsd:element name="group">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element ref="pfx64:GetCallHistoryInput"/>
                            <xsd:element name="UsageType" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <group>
                <pfx64:GetCallHistoryInput>
                    <pfx64:ContractId>
                        <xsl:value-of select="$Start/group/pfx62:GetHistoryRequest/pfx62:ContractId"/>
                    </pfx64:ContractId>
                    <pfx64:Subno>
                        <xsl:value-of select="$Start/group/pfx62:GetHistoryRequest/pfx62:Subno"/>
                    </pfx64:Subno>
                    <pfx64:From>
                        <xsl:value-of select="tib:format-dateTime(&quot;dd-MM-YYYY'T'HH:mm:ss&quot;,$Start/group/pfx62:GetHistoryRequest/pfx62:From)"/>
                    </pfx64:From>
                    <pfx64:To>
                        <xsl:value-of select="tib:format-dateTime(&quot;dd-MM-YYYY'T'HH:mm:ss&quot;,($Start/group/pfx62:GetHistoryRequest/pfx62:To))"/>
                    </pfx64:To>
                    <pfx64:Filter>
                        <pfx64:Value>
                            <xsl:value-of select="tib:concat-sequence-format($MapExceptOnly/root/OnlyServices/OnlyServices,&quot;,&quot;)"/>
                        </pfx64:Value>
                    </pfx64:Filter>
                    <xsl:if test="$Start/group/pfx62:GetHistoryRequest/pfx62:PageLimit">
                        <pfx64:PageLimit>
                            <xsl:value-of select="$Start/group/pfx62:GetHistoryRequest/pfx62:PageLimit"/>
                        </pfx64:PageLimit>
                    </xsl:if>
                    <xsl:if test="$Start/group/pfx62:GetHistoryRequest/pfx62:PageNo">
                        <pfx64:PageNo>
                            <xsl:value-of select="$Start/group/pfx62:GetHistoryRequest/pfx62:PageNo"/>
                        </pfx64:PageNo>
                    </xsl:if>
                </pfx64:GetCallHistoryInput>
                <UsageType>
                    <xsl:value-of select="tib:concat-sequence-format($MapExceptOnly/root/OnlyUsageTypes/OnlyTypes,&quot;,&quot;)"/>
                </UsageType>
            </group>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapExceptOnly">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>111</pd:x>
        <pd:y>321</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="OnlyServices" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="OnlyServices" type="xsd:string"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="OnlyUsageTypes" minOccurs="0" maxOccurs="unbounded">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="OnlyTypes" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:choose>
                    <xsl:when test="upper-case($Start/group/pfx62:GetHistoryRequest/pfx62:Filter/pfx62:Type)='EXCEPT'">
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/group/AllServices[not(substring-before(AllService,&quot;-&quot;)=../TobeExcluded/ExcludedServices)]">
                            <OnlyServices>
                                <OnlyServices>
                                    <xsl:value-of select="substring-after(current()/AllService,&quot;-&quot;)"/>
                                </OnlyServices>
                            </OnlyServices>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Start/group/AllServices[(substring-before(AllService,&quot;-&quot;)=../TobeExcluded/ExcludedServices)]">
                            <OnlyServices>
                                <OnlyServices>
                                    <xsl:value-of select="substring-after(current()/AllService,&quot;-&quot;)"/>
                                </OnlyServices>
                            </OnlyServices>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                    <xsl:when test="upper-case($Start/group/pfx62:GetHistoryRequest/pfx62:Filter/pfx62:Type)='EXCEPT'">
                        <xsl:for-each select="$Start/group/UsageType[not(substring-before(UsgType,&quot;-&quot;)=../TobeExcluded/ExcludedServices)]">
                            <OnlyUsageTypes>
                                <OnlyTypes>
                                    <xsl:value-of select="substring-after(current()/UsgType,&quot;-&quot;)"/>
                                </OnlyTypes>
                            </OnlyUsageTypes>
                        </xsl:for-each>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:for-each select="$Start/group/UsageType[(substring-before(UsgType,&quot;-&quot;)=../TobeExcluded/ExcludedServices)]">
                            <OnlyUsageTypes>
                                <OnlyTypes>
                                    <xsl:value-of select="substring-after(current()/UsgType,&quot;-&quot;)"/>
                                </OnlyTypes>
                            </OnlyUsageTypes>
                        </xsl:for-each>
                    </xsl:otherwise>
                </xsl:choose>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>LogIn</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>Log_Out</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log_Out</pd:from>
        <pd:to>ParseQueryOutput</pd:to>
        <pd:xpathDescription>RecordExists</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$CallProcedureCallHistoryQuery/resultSet/outputSet/P_ERRORCODE_OUT=1</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>GenerateTimeOutError</pd:to>
        <pd:xpathDescription>TimeOutError</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65536</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseQueryOutput</pd:from>
        <pd:to>NativeToCDM</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseQueryOutput</pd:from>
        <pd:to>ParseError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-3407872</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log_Out</pd:from>
        <pd:to>NativeToCDM</pd:to>
        <pd:xpathDescription>NoRecord</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>MapExceptOnly</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapReq</pd:from>
        <pd:to>LogIn</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>NativeToCDM</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapExceptOnly</pd:from>
        <pd:to>MapReq</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>