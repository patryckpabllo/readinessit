<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx16="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetBonusRechargeHistory/GetBonusRechargeHistoryReq.xsd" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:pfx15="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd" xmlns:ns="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx14="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundRes.xsd" xmlns:pfx13="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundReq.xsd" xmlns:pfx12="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeReq.xsd" xmlns:pfx11="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" xmlns:pfx10="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:pfx5="http://xmlns.zain.jo.org/CDM/CustomerAndOrder" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" xmlns:pfx2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx9="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pfx8="http://www.siebel.com/xml/MOZ1%20Serv%20Account%20Creation%20Res" xmlns:pfx7="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryReq.xsd" xmlns:pfx6="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns9="http://www.ericsson.com/CDM/telecom/Response" xmlns:ns12="http://schemas.tibco.com/bw/plugins/xml/5.0/xmlExceptions" xmlns:ns5="http://www.ericsson.com/CDM/telecom/Header" xmlns:ns6="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeRes.xsd" xmlns:ns7="http://www.ericsson.com/CDM/telecom/Subscriber" xmlns:pfx="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns10="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetBonusRechargeHistory/GetBonusRechargeHistoryRes.xsd" xmlns:ns8="http://www.tibco.com/schemas/CommonProject/CommonResources/SharedVariable/Internal/ResponseCodes.xsd" xmlns:ns11="http://www.ericsson.com/CDM/telecom/FAF" xmlns:ns2="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:ns4="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns3="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:import namespace="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" schemaLocation="/CDM/customerAccount.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" schemaLocation="/CustomerAndOrder.xsd"/>
    <xsd:import namespace="http://xmlns.zain.jo.org/CDM/CustomerAndOrder"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" schemaLocation="/BusinessSchemas/Common/CLE/ExceptionRequest.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/CDM/telecom/canonicaldatamodel" schemaLocation="/CDM/CDM.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidRecharge/RechargeReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidRecharge/RechargeRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidChargeRefund/ChargeRefundReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidChargeRefund/ChargeRefundRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryReq.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetCallHistory/GetCallHistoryReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetBonusRechargeHistory/GetBonusRechargeHistoryRes.xsd" schemaLocation="/BusinessSchemas/Services/Phase1Schemas/GetBonusRechargeHistory/GetBonusRechargeHistoryRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetBonusRechargeHistory/GetBonusRechargeHistoryReq.xsd" schemaLocation="/BusinessSchemas/Services/Phase1Schemas/GetBonusRechargeHistory/GetBonusRechargeHistoryReq.xsd"/>
    <pd:name>BusinessProcesses/Services/BSCS/Query/GetBonusRechargeHistory/Implementation/BonusRechargeHistory.process</pd:name>
    <pd:startName>EMSReceive</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings/>
    <pd:starter name="EMSReceive">
        <pd:type>com.tibco.plugin.jms.JMSQueueEventSource</pd:type>
        <pd:resourceType>ae.activities.JMSQueueEventSource</pd:resourceType>
        <pd:x>110</pd:x>
        <pd:y>221</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>%%BusinessProcesses/CommonSettings/JMSReceiver/MaxSessions%%</maxSessions>
                <destination>%%BusinessProcesses/Services/BSCS/Query/GetBonusRechargeHistory/ESI_REQ_RECV_GET_BONUS_RECHG_HIST%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/CommonResources/Connections/JMS/Internal/EAI_EMSConnection.sharedjmscon</ConnectionReference>
            <ApplicationProperties>/CommonResources/Connections/JMS/Internal/EAI_EMSApplicationProperties.sharedjmsapp</ApplicationProperties>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>1044</pd:endX>
    <pd:endY>223</pd:endY>
    <pd:errorSchemas>
        <ErrorSchema ref="ns10:GetBonusRechargeHistoryRes"/>
    </pd:errorSchemas>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1323152787082</pd:targetNamespace>
    <pd:activity name="CallBSCSProcess">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>665</pd:x>
        <pd:y>224</pd:y>
        <config>
            <processName>/BusinessProcesses/Services/BSCS/Query/GetBonusRechargeHistory/HelperProcess/BonusRechargeHistory.process</processName>
        </config>
        <pd:inputBindings>
            <group>
                <xsl:copy-of select="$ParseReqXML/pfx16:GetBonusRechargeHistoryReq"/>
                <TrackingId>
                    <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                </TrackingId>
                <StartTimeStamp>
                    <xsl:value-of select="if(exists($EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp) and string-length($EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp) > 0)&#xA;then $EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp&#xA;else 0"/>
                </StartTimeStamp>
                <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/CorrelationId">
                    <CorrelationId>
                        <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/CorrelationId"/>
                    </CorrelationId>
                </xsl:if>
            </group>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>288</pd:x>
        <pd:y>367</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ErrorHandler">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>454</pd:x>
        <pd:y>371</pd:y>
        <config>
            <processName>/CommonProcesses/ErrorHandlingProcess/Exception_Message.process</processName>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$Catch/exceptiondata/*" element="ns10:GetBonusRechargeHistoryRes"/>
        </pd:coercions>
        <pd:inputBindings>
            <pfx4:ExceptionRequest>
                <pfx6:Header>
                    <pfx6:ApplicationID>
                        <xsl:value-of select="&quot;CRS&quot;"/>
                    </pfx6:ApplicationID>
                    <pfx6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/Deployment"/>
                    </pfx6:ComponentName>
                    <pfx6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </pfx6:Hostname>
                    <pfx6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx6:Timestamp>
                    <pfx6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </pfx6:TransactionDomain>
                    <pfx6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                    </pfx6:TransactionType>
                    <pfx6:TransactionID>
                        <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                    </pfx6:TransactionID>
                    <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/CorrelationId">
                        <pfx6:CorrelationID>
                            <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/CorrelationId"/>
                        </pfx6:CorrelationID>
                    </xsl:if>
                    <pfx6:Message>
                        <xsl:value-of select="tib:render-xml($Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes)"/>
                    </pfx6:Message>
                    <pfx6:DataEncoding>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/DataEncoding/STRING"/>
                    </pfx6:DataEncoding>
                </pfx6:Header>
                <ExceptionCode>
                    <xsl:value-of select="$Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseCode"/>
                </ExceptionCode>
                <xsl:if test="$Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseDescription">
                    <StackTrace>
                        <xsl:value-of select="$Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseDescription"/>
                    </StackTrace>
                </xsl:if>
            </pfx4:ExceptionRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="AuditErrLogOUT">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1047</pd:x>
        <pd:y>368</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
        </config>
        <pd:inputBindings>
            <ns2:LogRequest>
                <pfx6:Header>
                    <pfx6:ApplicationID>
                        <xsl:value-of select="&quot;CRS&quot;"/>
                    </pfx6:ApplicationID>
                    <pfx6:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/Deployment"/>
                    </pfx6:ComponentName>
                    <pfx6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </pfx6:Hostname>
                    <pfx6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </pfx6:Timestamp>
                    <pfx6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </pfx6:TransactionDomain>
                    <pfx6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns1:ProcessContext/ProcessId))"/>
                    </pfx6:TransactionType>
                    <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID">
                        <pfx6:TransactionID>
                            <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                        </pfx6:TransactionID>
                    </xsl:if>
                    <pfx6:CorrelationID>
                        <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/CorrelationId"/>
                    </pfx6:CorrelationID>
                    <pfx6:Message>
                        <xsl:value-of select="$ErrorHandler/pfx4:ExceptionRequest/pfx6:Header/pfx6:Message"/>
                    </pfx6:Message>
                    <pfx6:DataEncoding>
                        <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/DataEncoding/STRING"/>
                    </pfx6:DataEncoding>
                </pfx6:Header>
                <TimeDuration>
                    <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleError"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_RES_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/BusinessProcesses/Services/Audit"/>
                </Audit>
            </ns2:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="JMSReceiverError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>112</pd:x>
        <pd:y>35</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <pfx9:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                </message>
                <xsl:if test="$_error/ns1:ErrorReport/MsgCode">
                    <messageCode>
                        <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                    </messageCode>
                </xsl:if>
                <data>
                    <ns10:GetBonusRechargeHistoryRes>
                        <ns9:Response>
                            <ResponseCode>
                                <xsl:value-of select="$_globalVariables/ns4:GlobalVariables/CommonErrors/JMSErrorCode"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                            </ResponseDescription>
                        </ns9:Response>
                    </ns10:GetBonusRechargeHistoryRes>
                </data>
            </pfx9:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="CLE_To_CDM">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>611</pd:x>
        <pd:y>372</pd:y>
        <config>
            <element ref="ns10:GetBonusRechargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <ns10:GetBonusRechargeHistoryRes>
                <xsl:copy-of select="$ParseReqXML/pfx16:GetBonusRechargeHistoryReq/ns5:BusinessMessageHeader"/>
                <xsl:choose>
                    <xsl:when test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[CRS_CODE=$ErrorHandler/pfx4:ExceptionRequest/ExceptionCode]/COMMON_CODE!=''">
                        <ns9:Response>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[CRS_CODE=$ErrorHandler/pfx4:ExceptionRequest/ExceptionCode]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[CRS_CODE=$ErrorHandler/pfx4:ExceptionRequest/ExceptionCode]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[CRS_CODE=$ErrorHandler/pfx4:ExceptionRequest/ExceptionCode]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[CRS_CODE=$ErrorHandler/pfx4:ExceptionRequest/ExceptionCode]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns9:Response>
                    </xsl:when>
                    <xsl:when test="string-length($Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseCode)!=0">
                        <ns9:Response>
                            <ResponseCode>
                                <xsl:value-of select="$Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseCode"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="if (string-length($GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains($Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseCode,COMMON_CODE)]/COMMON_DESC)!=0)&#xA;then&#xA;$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains($Catch/exceptiondata/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseCode,COMMON_CODE)]/COMMON_DESC&#xA;else&#xA;$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_DESC"/>
                            </ResponseDescription>
                        </ns9:Response>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns9:Response>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns9:Response>
                    </xsl:otherwise>
                </xsl:choose>
            </ns10:GetBonusRechargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log">
        <pd:type>com.tibco.pe.core.WriteToLogActivity</pd:type>
        <pd:resourceType>ae.activities.log</pd:resourceType>
        <pd:x>856</pd:x>
        <pd:y>460</pd:y>
        <config>
            <role>User</role>
        </config>
        <pd:inputBindings>
            <ns3:ActivityInput>
                <message>
                    <xsl:value-of select="$_error/ns1:ErrorReport/StackTrace"/>
                </message>
                <xsl:if test="$_error/ns1:ErrorReport/MsgCode">
                    <msgCode>
                        <xsl:value-of select="$_error/ns1:ErrorReport/MsgCode"/>
                    </msgCode>
                </xsl:if>
            </ns3:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseReqXML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>385</pd:x>
        <pd:y>224</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx16:GetBonusRechargeHistoryReq"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/Body"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetResCodeVar">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>261</pd:x>
        <pd:y>223</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariables/Internal/ResponseCodes.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Reply to JMS Message">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>838</pd:x>
        <pd:y>234</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>NON_PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>EMSReceive</EventSource>
            </ConfigurableHeaders>
            <ApplicationProperties>/CommonResources/Connections/JMS/Internal/EAI_EMSApplicationProperties.sharedjmsapp</ApplicationProperties>
        </config>
        <pd:inputBindings>
            <pfx:ActivityInput>
                <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID">
                    <JMSCorrelationID>
                        <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                    </JMSCorrelationID>
                </xsl:if>
                <OtherProperties>
                    <TransactionID>
                        <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                    <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToEngineID">
                        <ReplyToEngineID>
                            <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToEngineID"/>
                        </ReplyToEngineID>
                    </xsl:if>
                    <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToDeploymentName">
                        <ReplyToDeploymentName>
                            <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToDeploymentName"/>
                        </ReplyToDeploymentName>
                    </xsl:if>
                    <StartTimeStamp>
                        <xsl:value-of select="if(exists($EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp) and string-length($EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp) > 0)&#xA;then $EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp&#xA;else 0"/>
                    </StartTimeStamp>
                </OtherProperties>
                <Body>
                    <xsl:value-of select="tib:render-xml($CallBSCSProcess/ns10:GetBonusRechargeHistoryRes)"/>
                </Body>
            </pfx:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Reply-to-JMS-Message-1">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>853</pd:x>
        <pd:y>372</pd:y>
        <config>
            <PermittedMessageType>Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>NON_PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>EMSReceive</EventSource>
            </ConfigurableHeaders>
            <ApplicationProperties>/CommonResources/Connections/JMS/Internal/EAI_EMSApplicationProperties.sharedjmsapp</ApplicationProperties>
        </config>
        <pd:inputBindings>
            <pfx:ActivityInput>
                <OtherProperties>
                    <TransactionID>
                        <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/TransactionID"/>
                    </TransactionID>
                    <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToEngineID">
                        <ReplyToEngineID>
                            <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToEngineID"/>
                        </ReplyToEngineID>
                    </xsl:if>
                    <xsl:if test="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToDeploymentName">
                        <ReplyToDeploymentName>
                            <xsl:value-of select="$EMSReceive/pfx:ActivityOutput/OtherProperties/ReplyToDeploymentName"/>
                        </ReplyToDeploymentName>
                    </xsl:if>
                    <StartTimeStamp>
                        <xsl:value-of select="if(exists($EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp) and string-length($EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp) > 0)&#xA;then $EMSReceive/pfx:ActivityOutput/OtherProperties/StartTimeStamp&#xA;else 0"/>
                    </StartTimeStamp>
                </OtherProperties>
                <Body>
                    <xsl:value-of select="tib:render-xml($CLE_To_CDM/ns10:GetBonusRechargeHistoryRes)"/>
                </Body>
            </pfx:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-1-2-1">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>266</pd:x>
        <pd:y>36</pd:y>
        <config>
            <element ref="ns10:GetBonusRechargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <ns10:GetBonusRechargeHistoryRes>
                <xsl:copy-of select="$ParseReqXML/pfx16:GetBonusRechargeHistoryReq/ns5:BusinessMessageHeader"/>
                <xsl:choose>
                    <xsl:when test="(string-length($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/ns7:Subscriber/ServiceNo)>11or&#xA;string-length($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/ns7:Subscriber/ServiceNo)&lt;7)">
                        <ns9:Response>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Msisdn string incorrect')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Msisdn string incorrect')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Msisdn string incorrect')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Msisdn string incorrect')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns9:Response>
                    </xsl:when>
                    <xsl:when test="compare($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:StartDate, $ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:EndDate)=1">
                        <ns9:Response>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Start date is more than End Date')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Start date is more than End Date')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Start date is more than End Date')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Start date is more than End Date')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns9:Response>
                    </xsl:when>
                    <xsl:when test="compare($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:EndDate, substring-before(current-date(),'+'))=1">
                        <ns9:Response>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Enddate is greater than today date')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Enddate is greater than today date')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Enddate is greater than today date')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Enddate is greater than today date')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns9:Response>
                    </xsl:when>
                    <xsl:when test="exists($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays) and string-length($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays) !=0 and( $ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays&lt;0 or $ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays=0)">
                        <ns9:Response>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Invalid Number of days')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Invalid Number of days')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Invalid Number of days')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC ,'Invalid Number of days')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns9:Response>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns9:Response>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns9:Response>
                    </xsl:otherwise>
                </xsl:choose>
            </ns10:GetBonusRechargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Generate-Error-2">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>480</pd:x>
        <pd:y>36</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <pfx9:ActivityInput>
                <message/>
                <data>
                    <ns10:GetBonusRechargeHistoryRes>
                        <xsl:copy-of select="$ParseReqXML/pfx16:GetBonusRechargeHistoryReq/ns5:BusinessMessageHeader"/>
                        <xsl:choose>
                            <xsl:when test="exists($Map-Data-1-2-1/ns10:GetBonusRechargeHistoryRes)">
                                <ns9:Response>
                                    <ResponseCode>
                                        <xsl:value-of select="$Map-Data-1-2-1/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseCode"/>
                                    </ResponseCode>
                                    <ResponseDescription>
                                        <xsl:value-of select="$Map-Data-1-2-1/ns10:GetBonusRechargeHistoryRes/ns9:Response/ResponseDescription"/>
                                    </ResponseDescription>
                                </ns9:Response>
                            </xsl:when>
                            <xsl:when test="exists($_error_ParseReqXML/ActivityErrors/ns12:XMLParseException)">
                                <ns9:Response>
                                    <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE">
                                        <ResponseCode>
                                            <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE"/>
                                        </ResponseCode>
                                    </xsl:if>
                                    <ResponseDescription>
                                        <xsl:value-of select="$_error_ParseReqXML/ActivityErrors/ns12:XMLParseException/msg"/>
                                    </ResponseDescription>
                                </ns9:Response>
                            </xsl:when>
                            <xsl:when test="exists($_error_ParseReqXML/ActivityErrors/ns12:UnsupportedEncodingException)">
                                <ns9:Response>
                                    <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE">
                                        <ResponseCode>
                                            <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE"/>
                                        </ResponseCode>
                                    </xsl:if>
                                    <ResponseDescription>
                                        <xsl:value-of select="$_error_ParseReqXML/ActivityErrors/ns12:UnsupportedEncodingException/msg"/>
                                    </ResponseDescription>
                                </ns9:Response>
                            </xsl:when>
                            <xsl:when test="exists($_error_ParseReqXML/ActivityErrors/ns12:MissingByteCountException)">
                                <ns9:Response>
                                    <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE">
                                        <ResponseCode>
                                            <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE"/>
                                        </ResponseCode>
                                    </xsl:if>
                                    <ResponseDescription>
                                        <xsl:value-of select="$_error_ParseReqXML/ActivityErrors/ns12:MissingByteCountException/msg"/>
                                    </ResponseDescription>
                                </ns9:Response>
                            </xsl:when>
                            <xsl:otherwise>
                                <ns9:Response>
                                    <xsl:if test="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE">
                                        <ResponseCode>
                                            <xsl:value-of select="$GetResCodeVar/ns8:ResCodeVar/ns8:paramGroup[contains(COMMON_DESC,'There is problem with the service.Please try after sometime or Call Support')]/COMMON_CODE"/>
                                        </ResponseCode>
                                    </xsl:if>
                                    <ResponseDescription>
                                        <xsl:value-of select="$_error_ParseReqXML/ActivityErrors/ns12:ValidationException/msg"/>
                                    </ResponseDescription>
                                </ns9:Response>
                            </xsl:otherwise>
                        </xsl:choose>
                    </ns10:GetBonusRechargeHistoryRes>
                </data>
            </pfx9:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>ErrorHandler</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>EMSReceive</pd:from>
        <pd:to>GetResCodeVar</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorHandler</pd:from>
        <pd:to>CLE_To_CDM</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditErrLogOUT</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>EMSReceive</pd:from>
        <pd:to>JMSReceiverError</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-3407668</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CLE_To_CDM</pd:from>
        <pd:to>Reply-to-JMS-Message-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CLE_To_CDM</pd:from>
        <pd:to>Log</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-3407668</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log</pd:from>
        <pd:to>AuditErrLogOUT</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-6750055</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>CallBSCSProcess</pd:from>
        <pd:to>Reply to JMS Message</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reply-to-JMS-Message-1</pd:from>
        <pd:to>AuditErrLogOUT</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reply-to-JMS-Message-1</pd:from>
        <pd:to>Log</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-3407668</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseReqXML</pd:from>
        <pd:to>Map-Data-1-2-1</pd:to>
        <pd:xpathDescription>ValidationErrors</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>(string-length($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/ns7:Subscriber/ServiceNo)&gt;11or
string-length($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/ns7:Subscriber/ServiceNo)&lt;7)
or
compare($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:StartDate, $ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:EndDate)=1
or
compare($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:EndDate, substring-before(current-date(),'+'))=1
or
exists($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays) and string-length($ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays) !=0 and( $ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays&lt;0 or $ParseReqXML/pfx16:GetBonusRechargeHistoryReq/pfx16:HistoryDuration/pfx16:LastNoOfDays=0)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetResCodeVar</pd:from>
        <pd:to>ParseReqXML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseReqXML</pd:from>
        <pd:to>Generate-Error-2</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-1-2-1</pd:from>
        <pd:to>Generate-Error-2</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseReqXML</pd:from>
        <pd:to>CallBSCSProcess</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reply to JMS Message</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>