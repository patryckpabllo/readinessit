<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx16="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx15="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetChargeHistory/SCHEMA_SP/GET_CHARGE_HISTORY_SP.xsd" xmlns:pfx14="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd" xmlns:ns="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pfx13="http://schemas.tibco.com/bw/plugins/jdbc/5.0/jdbcExceptions" xmlns:pfx12="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryReq.xsd" xmlns:pfx11="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundRes.xsd" xmlns:pfx10="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundReq.xsd" xmlns:ns101="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:pfx19="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd" xmlns:pfx18="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceRes.xsd" xmlns:pfx17="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceReq.xsd" xmlns:ns02="www.tibco.com/plugin/Sleep" xmlns:ns41="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/portfolio" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns16="http://www.ericsson.com/CDM/telecom/Subscriber" xmlns:ns17="http://www.ericsson.com/CDM/telecom/Header" xmlns:pfx51="http://xmlns.example.com/1323156482391/OperationImpl" xmlns:ns14="http://www.lhsgroup.com/ws_v3" xmlns:ns15="http://www.zain.com/schemas/CommonProject/BusinessSchemas/Common/CRM/ListOfValues.xsd" xmlns:ns18="http://www.ericsson.com/CDM/telecom/FAF" xmlns:ns19="http://www.ericsson.com/CDM/telecom/Response" xmlns:ns12="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:ns13="http://tibco.com/namespaces/tnt/plugins/soap" xmlns:pfx="http://www.lhsgroup.com/ws_v3_CBIO_2_1" xmlns:ns10="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:ns11="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns51="www.tibco.com/createcustomer" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns21="http://www.ericsson.com/CDM/telecom/Charge" xmlns:pfx81="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XML/AccountCreationReq_13Jan2012.xsd" xmlns:ns20="http://www.tibco.com/schemas/CommonProject/CommonResources/SharedVariable/Internal/ResponseCodes.xsd" xmlns:zainKW="java://com.ZainKW.CurrentNanoSecconds" xmlns:pfx5="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" xmlns:pfx4="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" xmlns:pfx2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx9="http://www.tibco.com/pe/DeployedVarsType" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/CDM/CDM.xsd" xmlns:pfx7="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" xmlns:pfx6="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns9="http://schemas.tibco.com/bw/plugins/http/5.0/httpExceptions" xmlns:ns5="http://xmlns.zain.jo.org/CDM/CustomerAndOrder" xmlns:ns6="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:pfx71="http://www.tibco.com/pe/SignalInActivitySchema" xmlns:ns7="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns8="http://www.tibco.com/pe/EngineTypes" xmlns:ns2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/billingAccount" xmlns:ns1="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customer" xmlns:ns4="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/contactPerson" xmlns:ns3="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/address" xmlns:ns0="http://xml.apache.org/axis/wsdd/providers/java" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx23="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountReq.xsd" xmlns:pfx20="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetChargeHistory/SCHEMA_SP/BalanceHistoryQueryResponse.xsd" xmlns:pfx26="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeReq.xsd" xmlns:pfx27="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeRes.xsd" xmlns:pfx24="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountRes.xsd" xmlns:pfx25="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/XSD/GenericRPCReq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" schemaLocation="/CDM/customerAccount.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" schemaLocation="/CustomerAndOrder.xsd"/>
    <xsd:import namespace="http://xmlns.zain.jo.org/CDM/CustomerAndOrder"/>
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" schemaLocation="/AccountCreationRes_22Jan2012.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" schemaLocation="/CDM/Zain_EAIV2.3.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" schemaLocation="/CDM/Zain_EAIV2.8.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" schemaLocation="/BusinessSchemas/Common/CLE/ExceptionRequest.xsd"/>
    <xsd:import namespace="http://www.lhsgroup.com/ws_v3_CBIO_2_1" schemaLocation="/BusinessSchemas/ESI/BSCS/Provisioning/WSDLs/CustomerCreate.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceReq.xsd" schemaLocation="/BusinessSchemas/Services/Modification/UpdateBalance/UpdateBalanceReq.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd" schemaLocation="/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/UpdateDedicatedAccount/UpdateDedicatedAccountReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/UpdateBalance/UpdateBalanceRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/UpdateDedicatedAccount/UpdateDedicatedAccountRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidRecharge/RechargeReq.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/XSD/GenericRPCReq.xsd" schemaLocation="/BusinessSchemas/ESI/SDP/XSD/GenericRPCReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidRecharge/RechargeRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidChargeRefund/ChargeRefundReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidChargeRefund/ChargeRefundRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryReq.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetChargeHistory/SCHEMA_SP/GET_CHARGE_HISTORY_SP.xsd" schemaLocation="/BusinessProcesses/Services/CRS/Query/GetChargeHistory/SCHEMA_SP/GET_CHARGE_HISTORY_SP.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetChargeHistory/SCHEMA_SP/BalanceHistoryQueryResponse.xsd" schemaLocation="/BusinessProcesses/Services/BSCS/Query/GetChargeHistory/SCHEMA_SP/BalanceHistoryQueryResponse.xsd"/>
    <wsdl:import namespace="http://www.lhsgroup.com/ws_v3_CBIO_2_1" location="/BusinessSchemas/ESI/BSCS/Provisioning/WSDLs/CustomerCreate.wsdl"/>
    <pd:name>BusinessProcesses/Services/BSCS/Query/GetChargeHistory/HelperProcess/GetChargeHistory.process</pd:name>
    <pd:startName>GetChargeHistoryReq</pd:startName>
    <pd:startType>
        <xsd:element name="group">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="ReqString" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="TrackingId" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="StartTimeStamp" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>126</pd:startX>
    <pd:startY>294</pd:startY>
    <pd:returnBindings>
        <xsl:choose>
            <xsl:when test="exists($NativeToCDM/pfx14:GetChargeHistoryRes/ns19:Response/ResponseCode)">
                <xsl:copy-of select="$NativeToCDM/pfx14:GetChargeHistoryRes"/>
            </xsl:when>
            <xsl:when test="exists($MapErrorData/pfx14:GetChargeHistoryRes/ns19:Response/ResponseCode)">
                <xsl:copy-of select="$MapErrorData/pfx14:GetChargeHistoryRes"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:copy-of select="$ErrorNativeToCDM/pfx14:GetChargeHistoryRes"/>
            </xsl:otherwise>
        </xsl:choose>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx14:GetChargeHistoryRes"/>
    <pd:endX>1848</pd:endX>
    <pd:endY>289</pd:endY>
    <pd:errorSchemas>
        <ErrorSchema ref="pfx4:ExceptionRequest"/>
    </pd:errorSchemas>
    <pd:processVariables>
        <Variable1>
            <xsd:element name="JDBCQuery" type="xsd:string"/>
        </Variable1>
        <Variable0>
            <xsd:element name="group">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="count" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                        <xsd:element name="BillflagCount" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </Variable0>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1323154311057</pd:targetNamespace>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>857</pd:x>
        <pd:y>125</pd:y>
        <pd:width>336</pd:width>
        <pd:height>321</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>errorLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:indexSlot>iError</pd:indexSlot>
            <pd:errorCondition>$iError=$_globalVariables/pfx9:GlobalVariables/CommonProcesses/ErrorHandling/Retry/MaxRetryCount</pd:errorCondition>
            <pd:suspendAfterErrorRetry>false</pd:suspendAfterErrorRetry>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>JDBC Call Procedure</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null</pd:from>
            <pd:to>end</pd:to>
            <pd:xpathDescription>otherwise</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16776961</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>JDBC Call Procedure</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Sleep</pd:from>
            <pd:to>GenerateRetriableError</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null</pd:from>
            <pd:to>Sleep</pd:to>
            <pd:xpathDescription>Retriable</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>exists($_error/ns8:ErrorReport/StackTrace)
or
exists($_error/ns8:ErrorReport/StackTrace)
or
exists($_error/ns8:ErrorReport/StackTrace)</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>JDBC Call Procedure</pd:from>
            <pd:to>Null</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:activity name="GenerateRetriableError">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>934</pd:x>
            <pd:y>384</pd:y>
            <config>
                <faultName>ErrorSchema</faultName>
            </config>
            <pd:inputBindings>
                <ns:ActivityInput>
                    <xsl:if test="$_error/ns8:ErrorReport/Data/*">
                        <message>
                            <xsl:value-of select="$_error/ns8:ErrorReport/Data/*"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="$_error/ns8:ErrorReport/MsgCode">
                        <messageCode>
                            <xsl:value-of select="$_error/ns8:ErrorReport/MsgCode"/>
                        </messageCode>
                    </xsl:if>
                    <data>
                        <pfx4:ExceptionRequest>
                            <ns6:Header>
                                <ns6:ApplicationID>
                                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/CRSApplicationID"/>
                                </ns6:ApplicationID>
                                <ns6:ComponentName>
                                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                                </ns6:ComponentName>
                                <ns6:Hostname>
                                    <xsl:value-of select="BW:getHostName()"/>
                                </ns6:Hostname>
                                <ns6:Timestamp>
                                    <xsl:value-of select="current-dateTime()"/>
                                </ns6:Timestamp>
                                <ns6:TransactionDomain>
                                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                                </ns6:TransactionDomain>
                                <ns6:TransactionType>
                                    <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                                </ns6:TransactionType>
                                <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/TransactionID">
                                    <ns6:TransactionID>
                                        <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/TransactionID"/>
                                    </ns6:TransactionID>
                                </xsl:if>
                                <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID">
                                    <ns6:CorrelationID>
                                        <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                                    </ns6:CorrelationID>
                                </xsl:if>
                            </ns6:Header>
                            <ExceptionCode>
                                <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonErrors/TimeOutErrorCodeOthers"/>
                            </ExceptionCode>
                        </pfx4:ExceptionRequest>
                    </data>
                </ns:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Sleep">
            <pd:type>com.tibco.plugin.timer.SleepActivity</pd:type>
            <pd:resourceType>ae.activities.sleep</pd:resourceType>
            <pd:x>1118</pd:x>
            <pd:y>381</pd:y>
            <config/>
            <pd:inputBindings>
                <ns02:SleepInputSchema>
                    <IntervalInMillisec>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Common/ErrorHandling/RetryInterval"/>
                    </IntervalInMillisec>
                </ns02:SleepInputSchema>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Null">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>1009</pd:x>
            <pd:y>290</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="JDBC Call Procedure">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>1005</pd:x>
            <pd:y>189</pd:y>
            <config>
                <timeout>10</timeout>
                <maxRows>100</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <catalog>BSCS_PREPAID_QUERY_PKG</catalog>
                <schema/>
                <jdbcSharedConfig>/CommonResources/Connections/JDBC/External/BSCSDBConnection.sharedjdbc</jdbcSharedConfig>
                <ProcedureName>ZAINKW_BALANCE_HIST_QUERY_SP</ProcedureName>
                <parameterTypes>
                    <parameter>
                        <colName>P_CUSTOMERID_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_CONTRACTID_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_MSISDN_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_FROMDT_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_TODT_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_RESULT_OUT</colName>
                        <colType>3</colType>
                        <dataType>-10</dataType>
                        <typeName>REF CURSOR</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_ERRORCODE_OUT</colName>
                        <colType>4</colType>
                        <dataType>2</dataType>
                        <typeName>NUMBER</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_ERRORMSG_OUT</colName>
                        <colType>4</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <P_CUSTOMERID_IN xsi:nil="true"/>
                        <P_CONTRACTID_IN xsi:nil="true"/>
                        <P_MSISDN_IN>
                            <xsl:value-of select="$Map-Data-2/root/MSISDN"/>
                        </P_MSISDN_IN>
                        <P_FROMDT_IN>
                            <xsl:value-of select="$Map-Data-2/root/StartDate"/>
                        </P_FROMDT_IN>
                        <P_TODT_IN>
                            <xsl:value-of select="$Map-Data-2/root/EndDate"/>
                        </P_TODT_IN>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="AuditLogERROR">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1825</pd:x>
        <pd:y>429</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/CRSApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/GetChargeHistory/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <xsl:if test="$GetChargeHistoryReq/group/TrackingId">
                        <ns6:TransactionID>
                            <xsl:value-of select="$GetChargeHistoryReq/group/TrackingId"/>
                        </ns6:TransactionID>
                    </xsl:if>
                    <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID">
                        <ns6:CorrelationID>
                            <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                        </ns6:CorrelationID>
                    </xsl:if>
                    <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo">
                        <ns6:InterfaceID>
                            <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                        </ns6:InterfaceID>
                    </xsl:if>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="concat(tib:render-xml($ParseNative/Resultsets),&quot;&#xA;&quot;,'---------',&quot;&#xA;&quot;,tib:render-xml($ErrorNativeToCDM/pfx14:GetChargeHistoryRes))"/>
                    </ns6:Message>
                    <ns6:DataEncoding>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/DataEncoding/STRING"/>
                    </ns6:DataEncoding>
                    <ns6:AltKey>
                        <ns6:AltKeyName>
                            <xsl:value-of select="'MSISDN'"/>
                        </ns6:AltKeyName>
                        <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo">
                            <ns6:AltKeyValue>
                                <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                            </ns6:AltKeyValue>
                        </xsl:if>
                    </ns6:AltKey>
                </ns6:Header>
                <xsl:if test="$GetChargeHistoryReq/group/StartTimeStamp">
                    <TimeDuration>
                        <xsl:value-of select="$GetChargeHistoryReq/group/StartTimeStamp"/>
                    </TimeDuration>
                </xsl:if>
                <Category>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleError"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_RES_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="1"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="AuditLogIN">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>556</pd:x>
        <pd:y>340</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/CRSApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/GetChargeHistory/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <xsl:if test="$GetChargeHistoryReq/group/TrackingId">
                        <ns6:TransactionID>
                            <xsl:value-of select="$GetChargeHistoryReq/group/TrackingId"/>
                        </ns6:TransactionID>
                    </xsl:if>
                    <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID">
                        <ns6:CorrelationID>
                            <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                        </ns6:CorrelationID>
                    </xsl:if>
                    <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo">
                        <ns6:InterfaceID>
                            <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                        </ns6:InterfaceID>
                    </xsl:if>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="tib:render-xml($Parse-XML/pfx12:GetChargeHistoryReq)"/>
                    </ns6:Message>
                    <ns6:AltKey>
                        <ns6:AltKeyName>
                            <xsl:value-of select="'MSISDN'"/>
                        </ns6:AltKeyName>
                        <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo">
                            <ns6:AltKeyValue>
                                <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                            </ns6:AltKeyValue>
                        </xsl:if>
                    </ns6:AltKey>
                </ns6:Header>
                <xsl:if test="$GetChargeHistoryReq/group/StartTimeStamp">
                    <TimeDuration>
                        <xsl:value-of select="$GetChargeHistoryReq/group/StartTimeStamp"/>
                    </TimeDuration>
                </xsl:if>
                <Category>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_REQ_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="1"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="AuditLogOUT">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1731</pd:x>
        <pd:y>290</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/CRSApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/GetChargeHistory/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <xsl:if test="$GetChargeHistoryReq/group/TrackingId">
                        <ns6:TransactionID>
                            <xsl:value-of select="$GetChargeHistoryReq/group/TrackingId"/>
                        </ns6:TransactionID>
                    </xsl:if>
                    <ns6:CorrelationID>
                        <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                    </ns6:CorrelationID>
                    <xsl:if test="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo">
                        <ns6:InterfaceID>
                            <xsl:value-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                        </ns6:InterfaceID>
                    </xsl:if>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="concat(tib:render-xml($ParseNative/Resultsets),&quot;&#xA;&quot;,'---------',&quot;&#xA;&quot;,tib:render-xml($NativeToCDM/pfx14:GetChargeHistoryRes), &quot;&#xA;&quot;,'---------',&quot;&#xA;&quot;,tib:render-xml($MapErrorData/pfx14:GetChargeHistoryRes))"/>
                    </ns6:Message>
                    <ns6:DataEncoding>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/DataEncoding/STRING"/>
                    </ns6:DataEncoding>
                </ns6:Header>
                <xsl:if test="$GetChargeHistoryReq/group/StartTimeStamp">
                    <TimeDuration>
                        <xsl:value-of select="$GetChargeHistoryReq/group/StartTimeStamp"/>
                    </TimeDuration>
                </xsl:if>
                <Category>
                    <xsl:value-of select="if(exists($MapErrorData/pfx14:GetChargeHistoryRes))then &#xA;$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleError&#xA;else&#xA;$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_RES_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="1"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>1485</pd:x>
        <pd:y>430</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ErrorNativeToCDM">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1655</pd:x>
        <pd:y>430</pd:y>
        <config>
            <element ref="pfx14:GetChargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <pfx14:GetChargeHistoryRes>
                <xsl:variable name="errcode" select="concat($_error_GenerateRetriableError/pfx4:ExceptionRequest/ExceptionCode,$_error_GenerateTimeOutError/pfx4:ExceptionRequest/ExceptionCode)"/>
                <xsl:copy-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader"/>
                <xsl:choose>
                    <xsl:when test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[CRS_CODE=$errcode]/COMMON_CODE!=''">
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[CRS_CODE=$errcode]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[CRS_CODE=$errcode]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCDriverLoadingException) or exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCConnectionNotFoundException) or exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:InvalidTimeZoneException)">
                        <xsl:variable name="var" select="'problem with the service'"/>
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCTimedOutException) or exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:LoginTimedOutException)">
                        <ns19:Response>
                            <xsl:variable name="var" select="'Response timeout'"/>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns19:Response>
                            <xsl:variable name="var" select="'problem with the service'"/>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx14:ListOfChargeTransaction/>
            </pfx14:GetChargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenerateTimeOutError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>922</pd:x>
        <pd:y>545</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <data>
                    <xsl:copy-of select="$_error_GenerateRetriableError/pfx4:ExceptionRequest"/>
                </data>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetResCodesVar">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>376</pd:x>
        <pd:y>294</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariable/Internal/ResponseCodes.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="NativeToCDM">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1517</pd:x>
        <pd:y>204</pd:y>
        <config>
            <element ref="pfx14:GetChargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <pfx14:GetChargeHistoryRes>
                <ns19:Response>
                    <ResponseCode>
                        <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'SUCCESSFUL')]/COMMON_CODE"/>
                    </ResponseCode>
                    <ResponseDescription>
                        <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'SUCCESSFUL')]/COMMON_DESC"/>
                    </ResponseDescription>
                </ns19:Response>
                <pfx14:ListOfChargeTransaction>
                    <xsl:for-each select="$ParseNative/Resultsets/ResultSet1/Record1">
                        <xsl:sort select="translate(substring-before(current()/REFILL_DATE,'+'),&quot;-T:&quot;,&quot;&quot;)" order="descending" data-type="number"/>
                        <pfx14:ChargeTransactionDetail>
                            <xsl:if test="current()/REFILL_DATE!=''">
                                <pfx14:TransactionTimestamp>
                                    <xsl:value-of select="current()/REFILL_DATE{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', Timestamp)--}"/>
                                </pfx14:TransactionTimestamp>
                            </xsl:if>
                            <pfx14:ChargeAmount>
                                <pfx14:Amount>
                                    <xsl:value-of select="if(current()/REFILL_AMOUNT!='') then current()/REFILL_AMOUNT else 0"/>
                                </pfx14:Amount>
                            </pfx14:ChargeAmount>
                            <pfx14:NewBalance>
                                <xsl:value-of select="current()/TOTAL_BALANCE"/>
                            </pfx14:NewBalance>
                            <xsl:if test="current()/REFILL_EXPIRY_DATE!=''">
                                <pfx14:NewExpiry>
                                    <xsl:value-of select="current()/REFILL_EXPIRY_DATE{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', NewExpiry)--}"/>
                                </pfx14:NewExpiry>
                            </xsl:if>
                            <pfx14:Purpose>
                                <xsl:value-of select="current()/REFILL_PURPOSE"/>
                            </pfx14:Purpose>
                        </pfx14:ChargeTransactionDetail>
                    </xsl:for-each>
                </pfx14:ListOfChargeTransaction>
            </pfx14:GetChargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null-1">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>455</pd:x>
        <pd:y>445</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>259</pd:x>
        <pd:y>295</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx12:GetChargeHistoryReq"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$GetChargeHistoryReq/group/ReqString"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseNative">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>1323</pd:x>
        <pd:y>209</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx20:Resultsets"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="tib:render-xml($JDBC-Call-Procedure/resultSet/UnresolvedResultsets)"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapErrorData">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>800</pd:x>
        <pd:y>699</pd:y>
        <config>
            <element ref="pfx14:GetChargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <pfx14:GetChargeHistoryRes>
                <xsl:copy-of select="$Parse-XML/pfx12:GetChargeHistoryReq/ns17:BusinessMessageHeader"/>
                <xsl:choose>
                    <xsl:when test="string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=11 and &#xA;string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=10 and &#xA;string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=8 and &#xA;string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=7">
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MSISDN STRING INCORRECT')]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MSISDN STRING INCORRECT')]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="$Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:StartDate!='' and$Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate!='' and&#xA;tib:compare-dateTime($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:StartDate, $Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate)=1">
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MORE THAN END DATE')]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MORE THAN END DATE')]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="$Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:StartDate!='' and $Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate!='' and tib:compare-dateTime($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate, concat(substring-before(current-date(),'+'),'T23:59:59') )=1">
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'GREATER THAN TODAY DATE')]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'GREATER THAN TODAY DATE')]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="$Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:LastNoOfDays &lt;= 0">
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID NUMBER OF DAYS')]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID NUMBER OF DAYS')]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID PARAMETER')]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID PARAMETER')]/COMMON_DESC"/>
                            </ResponseDescription>
                        </ns19:Response>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx14:ListOfChargeTransaction/>
            </pfx14:GetChargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>600</pd:x>
        <pd:y>186</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Statement" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <Statement>
                    <xsl:value-of select="concat(&quot;select /*+ parallel(a,8) */  Association_Key, Timestamp, Journal_Type_Id, Ma_Da, amount, New_Balance, exp_date, Purpose from ( Select /*+ parallel(api,8) parallel(acc,8) parallel(sje,8) parallel(ae,8) parallel(papi,8) */Api.Account_Event_Id Association_Key, Api.Local_Timestamp Timestamp,Sje.Journal_Type_Id Journal_Type_Id,Sje.Cash_Account_Id Ma_Da,case when (Sje.Journal_Type_Id = 7 and sje.amount> = 0) then 0 when (Sje.Journal_Type_Id = 19 and sje.amount > =  0)  then 0 else Sje.Amount end Amount,  acc.BALANCE_AFTER_EVENT New_Balance,decode(sje.cash_account_id,0,api.SUPERVISION_PERIOD_EXP_DT,sje.ACCOUNT_EXPIRY_DATE) exp_date,decode(Sje.Journal_Type_Id,13,'FnF Change Fee',NVL(ae.external_data_1,papi.EQUIP_ID)) Purpose   FROM Sdp_Account_Events_Api  Api,  Acc_Account_Balances  Acc,  Sdp_Journal_Entries  Sje,  (select /*+ parallel(pea,8) parallel(zei,8) */   air.account_event_id,  air.external_data_1 from air_account_events  air  where air.time_hour_id >= &quot;,$Map-Data-2/root/StartDate,&quot; and air.time_hour_id &quot;,&quot; &lt; &quot;,$Map-Data-2/root/EndDate,&quot;) ae,  (Select distinct pea.account_event_id account_event_id, nvl(zei.EQUIP_ID,-1) EQUIP_ID  from PAM_EVENTS_API pea, ZAIN_EQUIP_INFO zei  where pea.time_hour_id >= &quot;,$Map-Data-2/root/StartDate,&quot; and pea.time_hour_id &quot;,&quot; &lt; &quot;, $Map-Data-2/root/EndDate,&quot; and pea.pam_indicator = zei.EQUIP_PAM_ID (+)) papi  WHERE api.time_hour_id >= &quot;,$Map-Data-2/root/StartDate,&quot; and api.time_hour_id&quot; ,&quot; &lt; &quot;,$Map-Data-2/root/EndDate, &#xA;&quot; and api.SERVED_MSISDN = &quot;,$Map-Data-2/root/MSISDN, &#xA;&quot; and acc.time_hour_id >= &quot;,$Map-Data-2/root/StartDate,&quot; and acc.time_hour_id &quot;,&quot; &lt; &quot;, $Map-Data-2/root/EndDate, &#xA;&quot; and sje.time_hour_id >= &quot;,$Map-Data-2/root/StartDate,&quot; and sje.time_hour_id &quot;,&quot; &lt; &quot;, $Map-Data-2/root/EndDate, &#xA;&quot; and Sje.Amount &quot;,&quot; &lt; &quot;,&quot;> 0 and sje.cash_account_id in (0,5)  and api.account_event_id = acc.account_event_id  and api.account_event_id = sje.account_event_id  And Sje.Cash_Account_Id = Acc.Cash_Account_Id  And Api.Account_Event_Id = Ae.Account_Event_Id(+)  and api.Account_Event_Id = papi.Account_Event_Id (+)  And Not Exists  (Select /*+ parallel(aje,8) */  Null From Air_Journal_Entries  Aje  WHERE api.account_event_id = aje.account_event_id  And Api.Time_Hour_Id = Aje.Time_Hour_Id  AND AJE.AIR_JOURNAL_TYPE_ID IN (2, 11, 15, 16, 17))  union all  Select /*+ parallel(ue,8) parallel(uje,8) parallel(uab,8) parallel(cc,8) */  ue.usage_event_id Association_Key, ue.ORIGINAL_TIMESTAMP Timestamp, 9 Journal_Type_Id,  uje.cash_account_id Ma_Da, uje.Amount amount, uab.BALANCE_AFTER_EVENT New_Balance, NULL exp_date,  decode(ue.ch_category_id,6,(cc.CH_CATEGORY_NAME||'_'||ue.service_provider_id),nvl(cc.CH_CATEGORY_NAME,'Undefined')) Purpose     From  usage_events_1  ue, usage_journal_entries_1 uje, usg_account_balances_1 uab, CHARGING_CATEGORIES cc  where ue.Time_Hour_Id > = &quot;,$Map-Data-2/root/StartDate,&quot; And ue.Time_Hour_Id &quot;,&quot; &lt; &quot;,$Map-Data-2/root/EndDate,&#xA;&quot; and uje.Time_Hour_Id > = &quot;,$Map-Data-2/root/StartDate,&quot; And uje.Time_Hour_Id&quot; ,&quot; &lt; &quot;, $Map-Data-2/root/EndDate, &#xA;&quot; and uab.Time_Hour_Id > = &quot;,$Map-Data-2/root/StartDate,&quot; And uab.Time_Hour_Id&quot;,&quot; &lt; &quot;,$Map-Data-2/root/EndDate, &#xA;&quot; and uje.Amount > 0 and uje.cash_account_id in (0,5)  and ue.CH_CATEGORY_ID = cc.CH_CATEGORY_ID (+)  and ue.usage_event_id = uje.usage_event_id  and ue.usage_event_id = uab.usage_event_id  And Ue.Served_Msisdn = &quot;,$Map-Data-2/root/MSISDN, &#xA;&quot; and CH_CATEGORY_GROUP in ('DATA', 'VAS')) a  where amount&quot; ,&quot; &lt; &quot;,&quot;> 0 order by Timestamp desc&quot;)"/>
                </Statement>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map-Data-2">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>469</pd:x>
        <pd:y>186</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="StartDate" type="xsd:string"/>
                            <xsd:element name="EndDate" type="xsd:string"/>
                            <xsd:element name="MSISDN" type="xsd:string"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <StartDate>
                    <xsl:value-of select="if(exists($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:LastNoOfDays)&#xA;and&#xA;string-length($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:LastNoOfDays)>0)&#xA;then &#xA;concat(tib:format-date('yyyyMMdd',tib:add-to-date(current-date(), 0, 0,-$Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:LastNoOfDays)),'000')&#xA;else &#xA;concat(tib:format-date('yyyyMMdd',substring-before($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:StartDate,'T')),'000')"/>
                </StartDate>
                <EndDate>
                    <xsl:value-of select="if(exists($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:LastNoOfDays)&#xA;and&#xA;string-length($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:LastNoOfDays)>0)&#xA;then concat(tib:format-date('yyyyMMdd',current-date()),'591')&#xA;else&#xA;concat(tib:format-date('yyyyMMdd',substring-before($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate,'T')),'591')"/>
                </EndDate>
                <MSISDN>
                    <xsl:value-of select="concat(&quot;'&quot;,$Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo,&quot;'&quot;)"/>
                </MSISDN>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>GenerateTimeOutError</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65332</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>NativeToCDM</pd:from>
        <pd:to>AuditLogOUT</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetChargeHistoryReq</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseNative</pd:from>
        <pd:to>NativeToCDM</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>ErrorNativeToCDM</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorNativeToCDM</pd:from>
        <pd:to>AuditLogERROR</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>GetResCodesVar</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogIN</pd:from>
        <pd:to>Map-Data-2</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogOUT</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogERROR</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetResCodesVar</pd:from>
        <pd:to>Null-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>AuditLogIN</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetResCodesVar</pd:from>
        <pd:to>AuditLogIN</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogIN</pd:from>
        <pd:to>MapErrorData</pd:to>
        <pd:xpathDescription>DateCheck</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>(($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:StartDate!='')
and ($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate!='')
and
(tib:compare-dateTime($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:StartDate, $Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate)=1
or tib:compare-dateTime($Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:EndDate, concat(substring-before(current-date(),'+'),'T23:59:59') )=1)
)
or
(string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=11 and 
string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=10 and
string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=8 and
string-length($Parse-XML/pfx12:GetChargeHistoryReq/ns16:Subscriber/ServiceNo)!=7)
or
$Parse-XML/pfx12:GetChargeHistoryReq/pfx12:HistoryDuration/pfx12:LastNoOfDays&lt;=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>MapErrorData</pd:from>
        <pd:to>AuditLogOUT</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>ParseNative</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-2</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>