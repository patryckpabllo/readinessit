<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx16="http://www.tibco.com/pe/CheckpointSchema" xmlns:pfx15="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetChargeHistory/SCHEMA_SP/GET_CHARGE_HISTORY_SP.xsd" xmlns:pfx14="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd" xmlns:ns="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:pfx13="http://schemas.tibco.com/bw/plugins/jdbc/5.0/jdbcExceptions" xmlns:pfx12="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryReq.xsd" xmlns:pfx11="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundRes.xsd" xmlns:pfx10="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundReq.xsd" xmlns:ns101="http://www.tibco.com/namespaces/tnt/plugins/file" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:pfx19="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd" xmlns:pfx18="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceRes.xsd" xmlns:pfx17="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceReq.xsd" xmlns:ns02="www.tibco.com/plugin/Sleep" xmlns:ns41="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/portfolio" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns16="http://www.ericsson.com/CDM/telecom/Subscriber" xmlns:ns17="http://www.ericsson.com/CDM/telecom/Header" xmlns:pfx51="http://xmlns.example.com/1323156482391/OperationImpl" xmlns:ns14="http://www.lhsgroup.com/ws_v3" xmlns:ns15="http://www.zain.com/schemas/CommonProject/BusinessSchemas/Common/CRM/ListOfValues.xsd" xmlns:ns18="http://www.ericsson.com/CDM/telecom/FAF" xmlns:ns19="http://www.ericsson.com/CDM/telecom/Response" xmlns:ns12="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:ns13="http://tibco.com/namespaces/tnt/plugins/soap" xmlns:pfx="http://www.lhsgroup.com/ws_v3_CBIO_2_1" xmlns:ns10="http://schemas.tibco.com/bw/pe/plugin/5.0/exceptions" xmlns:ns11="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns51="www.tibco.com/createcustomer" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:ns21="http://www.ericsson.com/CDM/telecom/Charge" xmlns:pfx81="http://www.tibco.com/ns/no_namespace_schema_location/SharedResources/XML/AccountCreationReq_13Jan2012.xsd" xmlns:ns20="http://www.tibco.com/schemas/CommonProject/CommonResources/SharedVariable/Internal/ResponseCodes.xsd" xmlns:zainKW="java://com.ZainKW.CurrentNanoSecconds" xmlns:pfx5="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" xmlns:pfx4="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" xmlns:pfx2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" xmlns:pfx9="http://www.tibco.com/pe/DeployedVarsType" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/CDM/CDM.xsd" xmlns:pfx7="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" xmlns:pfx6="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pfx30="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/SCHEMA_SP/RefillHistoryQueryResponse.xsd" xmlns:ns9="http://schemas.tibco.com/bw/plugins/http/5.0/httpExceptions" xmlns:ns5="http://xmlns.zain.jo.org/CDM/CustomerAndOrder" xmlns:ns6="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:pfx71="http://www.tibco.com/pe/SignalInActivitySchema" xmlns:ns7="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:ns8="http://www.tibco.com/pe/EngineTypes" xmlns:ns2="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/billingAccount" xmlns:ns1="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customer" xmlns:ns4="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/contactPerson" xmlns:pfx28="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetRechargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd" xmlns:ns3="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/address" xmlns:pfx29="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd" xmlns:ns0="http://xml.apache.org/axis/wsdd/providers/java" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:pfx22="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetRehargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd" xmlns:pfx23="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountReq.xsd" xmlns:pfx20="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetRechargeHistory/GetRechargeHistoryRes.xsd" xmlns:pfx21="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetRechargeHistory/GetRechargeHistoryReq.xsd" xmlns:pfx26="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeReq.xsd" xmlns:pfx27="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeRes.xsd" xmlns:pfx24="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountRes.xsd" xmlns:pfx25="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/XSD/GenericRPCReq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://www.ericsson.com/EAI/SchemaDefinitions/CDM/customerAccount" schemaLocation="/CDM/customerAccount.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CustomerAndOrder.xsd" schemaLocation="/CustomerAndOrder.xsd"/>
    <xsd:import namespace="http://xmlns.zain.jo.org/CDM/CustomerAndOrder"/>
    <xsd:import namespace="http://www.siebel.com/xml/MOZ1%20Customer%20Creation%20Req" schemaLocation="/AccountCreationRes_22Jan2012.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.3.xsd" schemaLocation="/CDM/Zain_EAIV2.3.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/CDM/Zain_EAIV2.8.xsd" schemaLocation="/CDM/Zain_EAIV2.8.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/Public/Exception/ExceptionRequest.xsd" schemaLocation="/BusinessSchemas/Common/CLE/ExceptionRequest.xsd"/>
    <xsd:import namespace="http://www.lhsgroup.com/ws_v3_CBIO_2_1" schemaLocation="/BusinessSchemas/ESI/BSCS/Provisioning/WSDLs/CustomerCreate.wsdl"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceReq.xsd" schemaLocation="/BusinessSchemas/Services/Modification/UpdateBalance/UpdateBalanceReq.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd" schemaLocation="/BusinessSchemas/ESI/SDP/GenericRPCReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/UpdateDedicatedAccount/UpdateDedicatedAccountReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateBalanceRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/UpdateBalance/UpdateBalanceRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/Mozaic/BusinessSchemas/Modification/UpdateDedicatedAccountRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/UpdateDedicatedAccount/UpdateDedicatedAccountRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidRecharge/RechargeReq.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessSchemas/ESI/SDP/XSD/GenericRPCReq.xsd" schemaLocation="/BusinessSchemas/ESI/SDP/XSD/GenericRPCReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/RechargeRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidRecharge/RechargeRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundReq.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidChargeRefund/ChargeRefundReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/BusinessSchemas/Services/Transaction/ChargeRefundRes.xsd" schemaLocation="/BusinessSchemas/Services/Transaction/PrepaidChargeRefund/ChargeRefundRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryReq.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryReq.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd" schemaLocation="/BusinessSchemas/Services/Query/GetChargeHistory/GetChargeHistoryRes.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetChargeHistory/SCHEMA_SP/GET_CHARGE_HISTORY_SP.xsd" schemaLocation="/BusinessProcesses/Services/CRS/Query/GetChargeHistory/SCHEMA_SP/GET_CHARGE_HISTORY_SP.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetRehargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd" schemaLocation="/BusinessProcesses/Services/CRS/Query/GetRehargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/CRS/Query/GetRechargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd" schemaLocation="/BusinessProcesses/Services/CRS/Query/GetRechargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd" schemaLocation="/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/SCHEMA_SP/GET_RECHARGE_HISTORY_SP.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/SCHEMA_SP/RefillHistoryQueryResponse.xsd" schemaLocation="/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/SCHEMA_SP/RefillHistoryQueryResponse.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetRechargeHistory/GetRechargeHistoryRes.xsd" schemaLocation="/BusinessSchemas/Services/Phase1Schemas/GetRechargeHistory/GetRechargeHistoryRes.xsd"/>
    <xsd:import namespace="http://www.ericsson.com/ZainKW/CommonProject/BusinessSchemas/Services/Query/GetRechargeHistory/GetRechargeHistoryReq.xsd" schemaLocation="/BusinessSchemas/Services/Phase1Schemas/GetRechargeHistory/GetRechargeHistoryReq.xsd"/>
    <wsdl:import namespace="http://www.lhsgroup.com/ws_v3_CBIO_2_1" location="/BusinessSchemas/ESI/BSCS/Provisioning/WSDLs/CustomerCreate.wsdl"/>
    <pd:name>BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/HelperProcess/GetRechargeHistory.process</pd:name>
    <pd:startName>GetRechargeHistoryReq</pd:startName>
    <pd:startType>
        <xsd:element name="group">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="ReqString" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="TrackingId" type="xsd:string" minOccurs="0"/>
                    <xsd:element name="StartTimeStamp" type="xsd:string" minOccurs="0"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>126</pd:startX>
    <pd:startY>294</pd:startY>
    <pd:returnBindings>
        <xsl:choose>
            <xsl:when test="exists($Map-Data/pfx20:GetRechargeHistoryRes/ns19:Response/ResponseCode)">
                <xsl:copy-of select="$Map-Data/pfx20:GetRechargeHistoryRes"/>
            </xsl:when>
            <xsl:when test="exists($MapErrorDate/pfx20:GetRechargeHistoryRes/ns19:Response/ResponseCode)">
                <xsl:copy-of select="$MapErrorDate/pfx20:GetRechargeHistoryRes"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:copy-of select="$ErrorNativeToCDM/pfx20:GetRechargeHistoryRes"/>
            </xsl:otherwise>
        </xsl:choose>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx20:GetRechargeHistoryRes"/>
    <pd:endX>1849</pd:endX>
    <pd:endY>289</pd:endY>
    <pd:errorSchemas>
        <ErrorSchema ref="pfx4:ExceptionRequest"/>
    </pd:errorSchemas>
    <pd:processVariables>
        <Variable0>
            <xsd:element name="group">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="count" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                        <xsd:element name="BillflagCount" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </Variable0>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1323154311057</pd:targetNamespace>
    <pd:group name="Group">
        <pd:type>com.tibco.pe.core.LoopGroup</pd:type>
        <pd:resourceType>ae.process.group</pd:resourceType>
        <pd:x>667</pd:x>
        <pd:y>51</pd:y>
        <pd:width>444</pd:width>
        <pd:height>321</pd:height>
        <pd:collapsedWidth>57</pd:collapsedWidth>
        <pd:collapsedHeight>70</pd:collapsedHeight>
        <pd:groupVariables/>
        <pd:joinToggle>inherit</pd:joinToggle>
        <config>
            <pd:groupType>errorLoop</pd:groupType>
            <pd:serializable>false</pd:serializable>
            <pd:indexSlot>iError</pd:indexSlot>
            <pd:errorCondition>$iError=$_globalVariables/pfx9:GlobalVariables/CommonProcesses/ErrorHandling/Retry/MaxRetryCount</pd:errorCondition>
            <pd:suspendAfterErrorRetry>false</pd:suspendAfterErrorRetry>
        </config>
        <pd:inputBindings/>
        <pd:expanded>true</pd:expanded>
        <pd:transition>
            <pd:from>start</pd:from>
            <pd:to>JDBC Call Procedure</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null</pd:from>
            <pd:to>end</pd:to>
            <pd:xpathDescription>otherwise</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16776961</pd:lineColor>
            <pd:conditionType>otherwise</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>JDBC Call Procedure</pd:from>
            <pd:to>end</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Sleep</pd:from>
            <pd:to>GenerateRetriableError</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>always</pd:conditionType>
        </pd:transition>
        <pd:transition>
            <pd:from>Null</pd:from>
            <pd:to>Sleep</pd:to>
            <pd:xpathDescription>Retriable</pd:xpathDescription>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-65536</pd:lineColor>
            <pd:conditionType>xpath</pd:conditionType>
            <pd:xpath>exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCTimedOutException)
or
exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:LoginTimedOutException)
or
exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCConnectionNotFoundException)</pd:xpath>
        </pd:transition>
        <pd:transition>
            <pd:from>JDBC Call Procedure</pd:from>
            <pd:to>Null</pd:to>
            <pd:lineType>Default</pd:lineType>
            <pd:lineColor>-16777216</pd:lineColor>
            <pd:conditionType>error</pd:conditionType>
        </pd:transition>
        <pd:activity name="GenerateRetriableError">
            <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
            <pd:resourceType>ae.activities.throw</pd:resourceType>
            <pd:x>853</pd:x>
            <pd:y>310</pd:y>
            <config>
                <faultName>ErrorSchema</faultName>
            </config>
            <pd:inputBindings>
                <ns:ActivityInput>
                    <xsl:if test="$_error/ns8:ErrorReport/Data/*">
                        <message>
                            <xsl:value-of select="$_error/ns8:ErrorReport/Data/*"/>
                        </message>
                    </xsl:if>
                    <xsl:if test="$_error/ns8:ErrorReport/MsgCode">
                        <messageCode>
                            <xsl:value-of select="$_error/ns8:ErrorReport/MsgCode"/>
                        </messageCode>
                    </xsl:if>
                    <data>
                        <pfx4:ExceptionRequest>
                            <ns6:Header>
                                <ns6:ApplicationID>
                                    <xsl:value-of select="&quot;CRS&quot;"/>
                                </ns6:ApplicationID>
                                <ns6:ComponentName>
                                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                                </ns6:ComponentName>
                                <ns6:Hostname>
                                    <xsl:value-of select="BW:getHostName()"/>
                                </ns6:Hostname>
                                <ns6:Timestamp>
                                    <xsl:value-of select="current-dateTime()"/>
                                </ns6:Timestamp>
                                <ns6:TransactionDomain>
                                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                                </ns6:TransactionDomain>
                                <ns6:TransactionType>
                                    <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                                </ns6:TransactionType>
                                <xsl:if test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/TransactionID">
                                    <ns6:TransactionID>
                                        <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/TransactionID"/>
                                    </ns6:TransactionID>
                                </xsl:if>
                                <xsl:if test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID">
                                    <ns6:CorrelationID>
                                        <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                                    </ns6:CorrelationID>
                                </xsl:if>
                            </ns6:Header>
                            <ExceptionCode>
                                <xsl:value-of select="&quot;1008&quot;"/>
                            </ExceptionCode>
                        </pfx4:ExceptionRequest>
                    </data>
                </ns:ActivityInput>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Sleep">
            <pd:type>com.tibco.plugin.timer.SleepActivity</pd:type>
            <pd:resourceType>ae.activities.sleep</pd:resourceType>
            <pd:x>1048</pd:x>
            <pd:y>301</pd:y>
            <config/>
            <pd:inputBindings>
                <ns02:SleepInputSchema>
                    <IntervalInMillisec>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Common/ErrorHandling/RetryInterval"/>
                    </IntervalInMillisec>
                </ns02:SleepInputSchema>
            </pd:inputBindings>
        </pd:activity>
        <pd:activity name="Null">
            <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
            <pd:resourceType>ae.activities.null</pd:resourceType>
            <pd:x>876</pd:x>
            <pd:y>223</pd:y>
            <config/>
            <pd:inputBindings/>
        </pd:activity>
        <pd:activity name="JDBC Call Procedure">
            <pd:type>com.tibco.plugin.jdbc.JDBCCallActivity</pd:type>
            <pd:resourceType>ae.activities.JDBCCallActivity</pd:resourceType>
            <pd:x>878</pd:x>
            <pd:y>124</pd:y>
            <config>
                <timeout>%%BusinessProcesses/Services/BSCS/TimeOut%%</timeout>
                <maxRows>%%BusinessProcesses/Services/BSCS/MaxNoOfRows%%</maxRows>
                <emptyStrAsNil>false</emptyStrAsNil>
                <jdbcSharedConfig>/CommonResources/Connections/JDBC/External/BSCSDBConnection.sharedjdbc</jdbcSharedConfig>
                <schema/>
                <catalog>BSCS_PREPAID_QUERY_PKG</catalog>
                <ProcedureName>ZAINKW_REFILL_HISTORY_QUERY_SP</ProcedureName>
                <useSchema>true</useSchema>
                <commit>false</commit>
                <oraObjects/>
                <oraTables/>
                <ConfigurationError>output schema is null</ConfigurationError>
                <parameterTypes>
                    <parameter>
                        <colName>P_CUSTOMERID_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_CONTRACTID_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_MSISDN_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_FROMDT_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_TODT_IN</colName>
                        <colType>1</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_RESULT_OUT</colName>
                        <colType>3</colType>
                        <dataType>-10</dataType>
                        <typeName>REF CURSOR</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_ERRORCODE_OUT</colName>
                        <colType>4</colType>
                        <dataType>2</dataType>
                        <typeName>NUMBER</typeName>
                    </parameter>
                    <parameter>
                        <colName>P_ERRORMSG_OUT</colName>
                        <colType>4</colType>
                        <dataType>12</dataType>
                        <typeName>VARCHAR2</typeName>
                    </parameter>
                </parameterTypes>
            </config>
            <pd:inputBindings>
                <inputs>
                    <inputSet>
                        <P_CUSTOMERID_IN xsi:nil="true"/>
                        <P_CONTRACTID_IN xsi:nil="true"/>
                        <P_MSISDN_IN>
                            <xsl:choose>
                                <xsl:when test="exists($Map-Data-1/root/MSISDN)">
                                    <xsl:value-of select="$Map-Data-1/root/MSISDN"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </P_MSISDN_IN>
                        <P_FROMDT_IN>
                            <xsl:choose>
                                <xsl:when test="exists($Map-Data-1/root/StartDate)">
                                    <xsl:value-of select="$Map-Data-1/root/StartDate"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </P_FROMDT_IN>
                        <P_TODT_IN>
                            <xsl:choose>
                                <xsl:when test="exists($Map-Data-1/root/EndDate)">
                                    <xsl:value-of select="$Map-Data-1/root/EndDate"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:attribute name="xsi:nil">true</xsl:attribute>
                                </xsl:otherwise>
                            </xsl:choose>
                        </P_TODT_IN>
                    </inputSet>
                </inputs>
            </pd:inputBindings>
        </pd:activity>
    </pd:group>
    <pd:activity name="AuditLogERROR">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1825</pd:x>
        <pd:y>430</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="&quot;CRS&quot;"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <xsl:if test="$GetRechargeHistoryReq/group/TrackingId">
                        <ns6:TransactionID>
                            <xsl:value-of select="$GetRechargeHistoryReq/group/TrackingId"/>
                        </ns6:TransactionID>
                    </xsl:if>
                    <xsl:if test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID">
                        <ns6:CorrelationID>
                            <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                        </ns6:CorrelationID>
                    </xsl:if>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="concat(tib:render-xml($ParseNative/Resultsets),&quot;&#xA;&quot;,'---------',&quot;&#xA;&quot;,tib:render-xml($ErrorNativeToCDM/pfx20:GetRechargeHistoryRes))"/>
                    </ns6:Message>
                    <ns6:DataEncoding>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/DataEncoding/STRING"/>
                    </ns6:DataEncoding>
                    <ns6:AltKey>
                        <ns6:AltKeyName>
                            <xsl:value-of select="'MSISDN'"/>
                        </ns6:AltKeyName>
                        <xsl:if test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo">
                            <ns6:AltKeyValue>
                                <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                            </ns6:AltKeyValue>
                        </xsl:if>
                    </ns6:AltKey>
                </ns6:Header>
                <xsl:if test="$GetRechargeHistoryReq/group/StartTimeStamp">
                    <TimeDuration>
                        <xsl:value-of select="$GetRechargeHistoryReq/group/StartTimeStamp"/>
                    </TimeDuration>
                </xsl:if>
                <Category>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleError"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_RES_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="AuditLogIN">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>531</pd:x>
        <pd:y>293</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <xsl:if test="$GetRechargeHistoryReq/group/TrackingId">
                        <ns6:TransactionID>
                            <xsl:value-of select="$GetRechargeHistoryReq/group/TrackingId"/>
                        </ns6:TransactionID>
                    </xsl:if>
                    <ns6:CorrelationID>
                        <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                    </ns6:CorrelationID>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="tib:render-xml($Map-Data-1/root)"/>
                    </ns6:Message>
                    <ns6:AltKey>
                        <ns6:AltKeyName>
                            <xsl:value-of select="'MSISDN'"/>
                        </ns6:AltKeyName>
                        <xsl:if test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo">
                            <ns6:AltKeyValue>
                                <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                            </ns6:AltKeyValue>
                        </xsl:if>
                    </ns6:AltKey>
                </ns6:Header>
                <xsl:if test="$GetRechargeHistoryReq/group/StartTimeStamp">
                    <TimeDuration>
                        <xsl:value-of select="$GetRechargeHistoryReq/group/StartTimeStamp"/>
                    </TimeDuration>
                </xsl:if>
                <Category>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_REQ_SENT"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="AuditLogOUT">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>1675</pd:x>
        <pd:y>289</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
            <spawn>false</spawn>
        </config>
        <pd:inputBindings>
            <ns11:LogRequest>
                <ns6:Header>
                    <ns6:ApplicationID>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns6:ApplicationID>
                    <ns6:ComponentName>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/Query/GetRechargeHistory/ComponentName"/>
                    </ns6:ComponentName>
                    <ns6:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns6:Hostname>
                    <ns6:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns6:Timestamp>
                    <ns6:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns6:TransactionDomain>
                    <ns6:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                    </ns6:TransactionType>
                    <xsl:if test="$GetRechargeHistoryReq/group/TrackingId">
                        <ns6:TransactionID>
                            <xsl:value-of select="$GetRechargeHistoryReq/group/TrackingId"/>
                        </ns6:TransactionID>
                    </xsl:if>
                    <ns6:CorrelationID>
                        <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/ExternalTransactionID"/>
                    </ns6:CorrelationID>
                    <ns6:Filename>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                    </ns6:Filename>
                    <ns6:Message>
                        <xsl:value-of select="concat(tib:render-xml($ParseNative/Resultsets),&quot;&#xA;&quot;,'---------',&quot;&#xA;&quot;,tib:render-xml($Map-Data/pfx20:GetRechargeHistoryRes),&quot;&#xA;&quot;,'---------',&quot;&#xA;&quot;,tib:render-xml($MapErrorDate/pfx20:GetRechargeHistoryRes))"/>
                    </ns6:Message>
                    <ns6:DataEncoding>
                        <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/DataEncoding/STRING"/>
                    </ns6:DataEncoding>
                </ns6:Header>
                <xsl:if test="$GetRechargeHistoryReq/group/StartTimeStamp">
                    <TimeDuration>
                        <xsl:value-of select="$GetRechargeHistoryReq/group/StartTimeStamp"/>
                    </TimeDuration>
                </xsl:if>
                <Category>
                    <xsl:value-of select="if(exists($MapErrorDate/pfx20:GetRechargeHistoryRes))&#xA;then&#xA;$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleError&#xA;else&#xA;$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Status/ESI/ESI_RES_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns11:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>1485</pd:x>
        <pd:y>430</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="ErrorNativeToCDM">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1656</pd:x>
        <pd:y>429</pd:y>
        <config>
            <element ref="pfx20:GetRechargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <pfx20:GetRechargeHistoryRes>
                <xsl:variable name="errcode" select="concat($_error_GenerateCommunicationException/pfx4:ExceptionRequest/ExceptionCode,$_error_GenerateTimeOutError/pfx4:ExceptionRequest/ExceptionCode)"/>
                <xsl:copy-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader"/>
                <xsl:choose>
                    <xsl:when test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[CRS_CODE=$errcode]/COMMON_CODE!=''">
                        <ns19:Response>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[CRS_CODE=$errcode]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[CRS_CODE=$errcode]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCDriverLoadingException) or exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCConnectionNotFoundException) or exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:InvalidTimeZoneException)">
                        <ns19:Response>
                            <xsl:variable name="var" select="'problem with the service'"/>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCTimedOutException) or exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:LoginTimedOutException)">
                        <ns19:Response>
                            <xsl:variable name="var" select="'Response timeout'"/>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns19:Response>
                            <xsl:variable name="var" select="'problem with the service'"/>
                            <ResponseCode>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_CODE"/>
                            </ResponseCode>
                            <ResponseDescription>
                                <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(COMMON_DESC,$var)]/COMMON_DESC"/>
                            </ResponseDescription>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'CRS'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx20:ListOfRechargeTransaction/>
            </pfx20:GetRechargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenerateCommunicationException">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>1186</pd:x>
        <pd:y>365</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <data>
                    <pfx4:ExceptionRequest>
                        <ns6:Header>
                            <ns6:ApplicationID>
                                <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                            </ns6:ApplicationID>
                            <ns6:ComponentName>
                                <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/Deployment"/>
                            </ns6:ComponentName>
                            <ns6:Hostname>
                                <xsl:value-of select="BW:getHostName()"/>
                            </ns6:Hostname>
                            <ns6:Timestamp>
                                <xsl:value-of select="current-dateTime()"/>
                            </ns6:Timestamp>
                            <ns6:TransactionDomain>
                                <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                            </ns6:TransactionDomain>
                            <ns6:TransactionType>
                                <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                            </ns6:TransactionType>
                            <ns6:TransactionID>
                                <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns8:ProcessContext/ProcessId))"/>
                            </ns6:TransactionID>
                            <xsl:if test="$GetRechargeHistoryReq/group/TrackingId">
                                <ns6:CorrelationID>
                                    <xsl:value-of select="$GetRechargeHistoryReq/group/TrackingId"/>
                                </ns6:CorrelationID>
                            </xsl:if>
                            <xsl:if test="$_error/ns8:ErrorReport/StackTrace">
                                <ns6:Message>
                                    <xsl:value-of select="$_error/ns8:ErrorReport/StackTrace"/>
                                </ns6:Message>
                            </xsl:if>
                            <ns6:DataEncoding>
                                <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/CommonProcesses/Constants/CLE/DataEncoding/STRING"/>
                            </ns6:DataEncoding>
                        </ns6:Header>
                        <ExceptionCode>
                            <xsl:value-of select="$_globalVariables/pfx9:GlobalVariables/BusinessProcesses/Services/BSCS/MiscErrorCode"/>
                        </ExceptionCode>
                    </pfx4:ExceptionRequest>
                </data>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GenerateTimeOutError">
        <pd:type>com.tibco.pe.core.GenerateErrorActivity</pd:type>
        <pd:resourceType>ae.activities.throw</pd:resourceType>
        <pd:x>917</pd:x>
        <pd:y>436</pd:y>
        <config>
            <faultName>ErrorSchema</faultName>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <data>
                    <xsl:copy-of select="$_error_GenerateRetriableError/pfx4:ExceptionRequest"/>
                </data>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>259</pd:x>
        <pd:y>294</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx21:GetRechargeHistoryReq"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$GetRechargeHistoryReq/group/ReqString"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapErrorDate">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>807</pd:x>
        <pd:y>615</pd:y>
        <config>
            <element ref="pfx20:GetRechargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <pfx20:GetRechargeHistoryRes>
                <xsl:copy-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader"/>
                <xsl:choose>
                    <xsl:when test="string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=11 and string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=10 and string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=8 and string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=7">
                        <ns19:Response>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MSISDN STRING INCORRECT')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MSISDN STRING INCORRECT')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MSISDN STRING INCORRECT')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MSISDN STRING INCORRECT')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="$Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:StartDate!='' and $Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate!='' and tib:compare-dateTime($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:StartDate, $Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate)=1">
                        <ns19:Response>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MORE THAN END DATE')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MORE THAN END DATE')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MORE THAN END DATE')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'MORE THAN END DATE')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="$Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:StartDate!='' and $Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate!='' and tib:compare-dateTime($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate, concat(substring-before(current-date(),'+'),'T23:59:59') )=1">
                        <ns19:Response>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'GREATER THAN TODAY DATE')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'GREATER THAN TODAY DATE')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'GREATER THAN TODAY DATE')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'GREATER THAN TODAY DATE')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:when test="$Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:LastNoOfDays &lt;=0">
                        <ns19:Response>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID NUMBER OF DAYS')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID NUMBER OF DAYS')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID NUMBER OF DAYS')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID NUMBER OF DAYS')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                            <ResponseReference>
                                <Reference>
                                    <Name>
                                        <xsl:value-of select="'Source'"/>
                                    </Name>
                                    <Value>
                                        <xsl:value-of select="'TIBCO'"/>
                                    </Value>
                                </Reference>
                            </ResponseReference>
                        </ns19:Response>
                    </xsl:when>
                    <xsl:otherwise>
                        <ns19:Response>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID PARAMETER')]/COMMON_CODE">
                                <ResponseCode>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID PARAMETER')]/COMMON_CODE"/>
                                </ResponseCode>
                            </xsl:if>
                            <xsl:if test="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID PARAMETER')]/COMMON_DESC">
                                <ResponseDescription>
                                    <xsl:value-of select="$GetResCodesVar/ns20:ResCodeVar/ns20:paramGroup[contains(upper-case(COMMON_DESC),'INVALID PARAMETER')]/COMMON_DESC"/>
                                </ResponseDescription>
                            </xsl:if>
                        </ns19:Response>
                    </xsl:otherwise>
                </xsl:choose>
                <pfx20:ListOfRechargeTransaction/>
            </pfx20:GetRechargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="ParseNative">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>1364</pd:x>
        <pd:y>80</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx30:Resultsets"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$JDBC-Call-Procedure/resultSet/UnresolvedResultsets"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Map Data">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>1541</pd:x>
        <pd:y>201</pd:y>
        <config>
            <element ref="pfx20:GetRechargeHistoryRes"/>
        </config>
        <pd:inputBindings>
            <pfx20:GetRechargeHistoryRes>
                <xsl:copy-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader"/>
                <ns19:Response>
                    <ResponseCode>
                        <xsl:value-of select="if(contains($JDBC-Call-Procedure/resultSet/outputSet/P_ERRORMSG_OUT,'NO ROW') or $JDBC-Call-Procedure/resultSet/outputSet/P_ERRORCODE_OUT='1')&#xA;then&#xA;'1'&#xA;else &#xA;substring-after($JDBC-Call-Procedure/resultSet/outputSet/P_ERRORCODE_OUT,'-')"/>
                    </ResponseCode>
                    <xsl:if test="not(($JDBC-Call-Procedure/resultSet/outputSet/P_ERRORMSG_OUT/@xsi:nil=(&quot;true&quot;)) or ($JDBC-Call-Procedure/resultSet/outputSet/P_ERRORMSG_OUT/@xsi:nil=(&quot;1&quot;)))">
                        <ResponseDescription>
                            <xsl:value-of select="$JDBC-Call-Procedure/resultSet/outputSet/P_ERRORMSG_OUT"/>
                        </ResponseDescription>
                    </xsl:if>
                </ns19:Response>
                <pfx20:ListOfRechargeTransaction>
                    <xsl:choose>
                        <xsl:when test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/TransactionType='VoucherlessRechargeHistory'">
                            <xsl:for-each select="$ParseNative/Resultsets/ResultSet1/Record1[RECHARGE_TYPE='Voucherless']">
                                <xsl:sort select="translate(substring-before(current()/REFILL_DATE,'+'),&quot;-T:&quot;,&quot;&quot;)" order="descending" data-type="number"/>
                                <pfx20:RechargeTransactionDetail>
                                    <xsl:if test="current()/REFILL_DATE!=''">
                                        <pfx20:TransactionTimestamp>
                                            <xsl:value-of select="current()/REFILL_DATE&#xA;{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', TIMESTAMP) --}"/>
                                        </pfx20:TransactionTimestamp>
                                    </xsl:if>
                                    <pfx20:RechargeType>
                                        <xsl:value-of select="current()/RECHARGE_TYPE"/>
                                    </pfx20:RechargeType>
                                    <pfx20:RechargeStatus>
                                        <xsl:value-of select="'SUCCESS'"/>
                                    </pfx20:RechargeStatus>
                                    <xsl:if test="current()/RECHARGE_VOUCHER_NO">
                                        <pfx20:VoucherSerialNo>
                                            <xsl:value-of select="current()/RECHARGE_VOUCHER_NO"/>
                                        </pfx20:VoucherSerialNo>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_AMOUNT!=''">
                                        <pfx20:CreditedAmount>
                                            <pfx20:Amount>
                                                <xsl:value-of select="current()/REFILL_AMOUNT"/>
                                            </pfx20:Amount>
                                        </pfx20:CreditedAmount>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_AMOUNT!=''">
                                        <pfx20:Amount>
                                            <pfx20:Amount>
                                                <xsl:value-of select="current()/REFILL_AMOUNT"/>
                                            </pfx20:Amount>
                                        </pfx20:Amount>
                                    </xsl:if>
                                    <xsl:if test="current()/TOTAL_BALANCE!=''">
                                        <pfx20:NewBalance>
                                            <xsl:value-of select="current()/TOTAL_BALANCE"/>
                                        </pfx20:NewBalance>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_EXPIRY_DATE!=''">
                                        <pfx20:NewExpiry>
                                            <xsl:value-of select="concat(substring-before(current()/REFILL_EXPIRY_DATE, 'T'),'T23:59:59+',substring-after(current()/REFILL_EXPIRY_DATE, '+'))&#xA;{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', NEWEXPIRY)--}"/>
                                        </pfx20:NewExpiry>
                                    </xsl:if>
                                    <pfx20:Purpose>
                                        <xsl:value-of select="current()/REFILL_PURPOSE"/>
                                    </pfx20:Purpose>
                                </pfx20:RechargeTransactionDetail>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:when test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns17:BusinessMessageHeader/TransactionType='VoucherRechargeHistory'">
                            <xsl:for-each select="$ParseNative/Resultsets/ResultSet1/Record1[RECHARGE_TYPE='Voucher Based']">
                                <xsl:sort select="translate(substring-before(current()/REFILL_DATE,'+'),&quot;-T:&quot;,&quot;&quot;)" order="descending" data-type="number"/>
                                <pfx20:RechargeTransactionDetail>
                                    <xsl:if test="current()/REFILL_DATE!=''">
                                        <pfx20:TransactionTimestamp>
                                            <xsl:value-of select="current()/REFILL_DATE&#xA;{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', TIMESTAMP) --}"/>
                                        </pfx20:TransactionTimestamp>
                                    </xsl:if>
                                    <pfx20:RechargeType>
                                        <xsl:value-of select="current()/RECHARGE_TYPE"/>
                                    </pfx20:RechargeType>
                                    <pfx20:RechargeStatus>
                                        <xsl:value-of select="'SUCCESS'"/>
                                    </pfx20:RechargeStatus>
                                    <xsl:if test="current()/RECHARGE_VOUCHER_NO">
                                        <pfx20:VoucherSerialNo>
                                            <xsl:value-of select="current()/RECHARGE_VOUCHER_NO"/>
                                        </pfx20:VoucherSerialNo>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_AMOUNT!=''">
                                        <pfx20:CreditedAmount>
                                            <pfx20:Amount>
                                                <xsl:value-of select="current()/REFILL_AMOUNT"/>
                                            </pfx20:Amount>
                                        </pfx20:CreditedAmount>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_AMOUNT!=''">
                                        <pfx20:Amount>
                                            <pfx20:Amount>
                                                <xsl:value-of select="current()/REFILL_AMOUNT"/>
                                            </pfx20:Amount>
                                        </pfx20:Amount>
                                    </xsl:if>
                                    <xsl:if test="current()/TOTAL_BALANCE!=''">
                                        <pfx20:NewBalance>
                                            <xsl:value-of select="current()/TOTAL_BALANCE"/>
                                        </pfx20:NewBalance>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_EXPIRY_DATE!=''">
                                        <pfx20:NewExpiry>
                                            <xsl:value-of select="concat(substring-before(current()/REFILL_EXPIRY_DATE, 'T'),'T23:59:59+',substring-after(current()/REFILL_EXPIRY_DATE, '+'))&#xA;{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', NEWEXPIRY)--}"/>
                                        </pfx20:NewExpiry>
                                    </xsl:if>
                                    <pfx20:Purpose>
                                        <xsl:value-of select="current()/REFILL_PURPOSE"/>
                                    </pfx20:Purpose>
                                </pfx20:RechargeTransactionDetail>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:for-each select="$ParseNative/Resultsets/ResultSet1/Record1">
                                <xsl:sort select="translate(substring-before(current()/REFILL_DATE,'+'),&quot;-T:&quot;,&quot;&quot;)" order="descending" data-type="number"/>
                                <pfx20:RechargeTransactionDetail>
                                    <xsl:if test="current()/REFILL_DATE!=''">
                                        <pfx20:TransactionTimestamp>
                                            <xsl:value-of select="current()/REFILL_DATE&#xA;{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', TIMESTAMP) --}"/>
                                        </pfx20:TransactionTimestamp>
                                    </xsl:if>
                                    <pfx20:RechargeType>
                                        <xsl:value-of select="current()/RECHARGE_TYPE"/>
                                    </pfx20:RechargeType>
                                    <pfx20:RechargeStatus>
                                        <xsl:value-of select="'SUCCESS'"/>
                                    </pfx20:RechargeStatus>
                                    <xsl:if test="current()/RECHARGE_VOUCHER_NO">
                                        <pfx20:VoucherSerialNo>
                                            <xsl:value-of select="current()/RECHARGE_VOUCHER_NO"/>
                                        </pfx20:VoucherSerialNo>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_AMOUNT!=''">
                                        <pfx20:CreditedAmount>
                                            <pfx20:Amount>
                                                <xsl:value-of select="current()/REFILL_AMOUNT"/>
                                            </pfx20:Amount>
                                        </pfx20:CreditedAmount>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_AMOUNT!=''">
                                        <pfx20:Amount>
                                            <pfx20:Amount>
                                                <xsl:value-of select="current()/REFILL_AMOUNT"/>
                                            </pfx20:Amount>
                                        </pfx20:Amount>
                                    </xsl:if>
                                    <xsl:if test="current()/TOTAL_BALANCE!=''">
                                        <pfx20:NewBalance>
                                            <xsl:value-of select="current()/TOTAL_BALANCE"/>
                                        </pfx20:NewBalance>
                                    </xsl:if>
                                    <xsl:if test="current()/REFILL_EXPIRY_DATE!=''">
                                        <pfx20:NewExpiry>
                                            <xsl:value-of select="concat(substring-before(current()/REFILL_EXPIRY_DATE, 'T'),'T23:59:59+',substring-after(current()/REFILL_EXPIRY_DATE, '+'))&#xA;{--tib:parse-dateTime('dd-MMM-yyyy HH:mm:ss', NEWEXPIRY)--}"/>
                                        </pfx20:NewExpiry>
                                    </xsl:if>
                                    <pfx20:Purpose>
                                        <xsl:value-of select="current()/REFILL_PURPOSE"/>
                                    </pfx20:Purpose>
                                </pfx20:RechargeTransactionDetail>
                            </xsl:for-each>
                        </xsl:otherwise>
                    </xsl:choose>
                </pfx20:ListOfRechargeTransaction>
            </pfx20:GetRechargeHistoryRes>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetResCodesVar">
        <pd:type>com.tibco.pe.core.GetSharedVariableActivity</pd:type>
        <pd:resourceType>ae.activities.getSharedVariable</pd:resourceType>
        <pd:x>388</pd:x>
        <pd:y>294</pd:y>
        <config>
            <variableConfig>/CommonResources/SharedVariables/Internal/ResponseCodes.sharedvariable</variableConfig>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Map-Data-1">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>335</pd:x>
        <pd:y>194</pd:y>
        <config>
            <element>
                <xsd:element name="root">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="MSISDN" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="StartDate" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="EndDate" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </element>
        </config>
        <pd:inputBindings>
            <root>
                <xsl:if test="$Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo">
                    <MSISDN>
                        <xsl:value-of select="$Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo"/>
                    </MSISDN>
                </xsl:if>
                <StartDate>
                    <xsl:value-of select="if(exists($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:LastNoOfDays)&#xA;and&#xA;string-length($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:LastNoOfDays)>0)&#xA;then &#xA;tib:format-date('dd-MM-yyyy',tib:add-to-date(current-date(), 0, 0,-$Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:LastNoOfDays))&#xA;else &#xA;(substring-before(tib:format-dateTime('dd-MM-yyyy HH:mm:ss',$Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:StartDate),' '))"/>
                </StartDate>
                <EndDate>
                    <xsl:value-of select="if(exists($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:LastNoOfDays)&#xA;and&#xA;string-length($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:LastNoOfDays)>0)&#xA;then tib:format-date('dd-MM-yyyy',current-date())&#xA;else&#xA;(substring-before(tib:format-dateTime('dd-MM-yyyy HH:mm:ss',$Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate),' '))"/>
                </EndDate>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Null-1">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>1284</pd:x>
        <pd:y>199</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>GenerateTimeOutError</pd:to>
        <pd:xpathDescription>Error</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65332</pd:lineColor>
        <pd:conditionType>error</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>GenerateCommunicationException</pd:to>
        <pd:xpathDescription>Communication Exception</pd:xpathDescription>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-65485</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCDriverLoadingException)
or
exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:InvalidTimeZoneException)
or
exists($_error_JDBC-Call-Procedure/ActivityErrors/pfx13:JDBCSQLException)</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>GetRechargeHistoryReq</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>ErrorNativeToCDM</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ErrorNativeToCDM</pd:from>
        <pd:to>AuditLogERROR</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>Map-Data-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogIN</pd:from>
        <pd:to>Group</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogOUT</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogERROR</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>AuditLogIN</pd:from>
        <pd:to>MapErrorDate</pd:to>
        <pd:xpathDescription>DateCheck</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>(($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:StartDate!='')
and ($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate!='')
and
(tib:compare-dateTime($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:StartDate, $Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate)=1
or tib:compare-dateTime($Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:EndDate, concat(substring-before(current-date(),'+'),'T23:59:59') )=1)
)
or
(string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=11 and 
string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=10 and
string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=8 and
string-length($Parse-XML/pfx21:GetRechargeHistoryReq/ns16:Subscriber/ServiceNo)!=7)
or
$Parse-XML/pfx21:GetRechargeHistoryReq/pfx21:HistoryDuration/pfx21:LastNoOfDays&lt;=0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>MapErrorDate</pd:from>
        <pd:to>AuditLogOUT</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Group</pd:from>
        <pd:to>Null-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>ParseNative</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map Data</pd:from>
        <pd:to>AuditLogOUT</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetResCodesVar</pd:from>
        <pd:to>AuditLogIN</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Map-Data-1</pd:from>
        <pd:to>GetResCodesVar</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>ParseNative</pd:to>
        <pd:xpathDescription>OutputExists</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>$JDBC-Call-Procedure/resultSet/outputSet/P_ERRORCODE_OUT=1</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Null-1</pd:from>
        <pd:to>Map Data</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-3407872</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>