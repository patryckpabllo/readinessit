<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pfx6="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/AppleiWatchSESEligibilityCheck/ESIMOperationEligibilityCheckReqSchema.xsd" xmlns:pfx7="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/AppleiWatchSESGetEntitlement/getEntitlementResSchema.xsd" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/AppleiWatchSESGetEntitlement/getEntitlementReqSchema.xsd" xmlns:pfx="http://www.tibco.com/schemas/GW_AppleiWatch2/Services/SESEntServer/Resources/XSD/OutboundSubsActDeacforeSIMDeviceResSchema.xsd" xmlns:pfx9="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/QueryPurchasablePlans/QueryPurchasablePlans.xsd" xmlns:pfx2="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/OutboundSubsActDeacforeSIMDeviceReqSchema.xsd" xmlns:ns="http://www.huawei.com/CDM/ES/" xmlns:zainesbcustom="java://com.commonresources.utilities.CustomFunctions" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/OutboundSubsActDeacforeSIMDeviceResSchema.xsd" xmlns:pfx4="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/ESIMOperationEligibilityCheckReqSchema.xsd" xmlns:pfx5="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/ESIMOperationEligibilityCheckResSchema.xsd" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns2="http://www.tibco.com/pe/EngineTypes" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:ns1="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns4="http://www.zainKW.com/SESEntServer/TremblantEligibilityCheckReq" xmlns:ns3="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:BW="java://com.tibco.pe.core.JavaCustomXPATHFunctions" xmlns:ns12="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:ns22="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd">
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/OutboundSubsActDeacforeSIMDeviceReqSchema.xsd" schemaLocation="/Services/SESEntServer/Resources/XSD/OutboundSubsActDeacforeSIMDeviceReqSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/OutboundSubsActDeacforeSIMDeviceResSchema.xsd" schemaLocation="/Services/SESEntServer/Resources/XSD/OutboundSubsActDeacforeSIMDeviceResSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/ESIMOperationEligibilityCheckReqSchema.xsd" schemaLocation="/Services/SESEntServer/Resources/XSD/ESIMOperationEligibilityCheckReqSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/ESIMOperationEligibilityCheckResSchema.xsd" schemaLocation="/Services/SESEntServer/Resources/XSD/ESIMOperationEligibilityCheckResSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/AppleiWatchSESEligibilityCheck/ESIMOperationEligibilityCheckReqSchema.xsd" schemaLocation="/Services/SESEntServer/Resources/XSD/AppleiWatchSESEligibilityCheck/ESIMOperationEligibilityCheckReqSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/AppleiWatchSESGetEntitlement/getEntitlementReqSchema.xsd" schemaLocation="/Services/SESEntServer/Resources/XSD/AppleiWatchSESGetEntitlement/getEntitlementReqSchema.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/Services/SESEntServer/Resources/XSD/AppleiWatchSESGetEntitlement/getEntitlementResSchema.xsd" schemaLocation="/Services/SESEntServer/Resources/XSD/AppleiWatchSESGetEntitlement/getEntitlementResSchema.xsd"/>
    <pd:name>Services/SESEntServer/QueryPurchasablePlans/Implementation/QueryPurchasablePlansImpl.process</pd:name>
    <pd:description>QueryPurchasablePlansImpl</pd:description>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="xmlIn" type="xsd:string"/>
                    <xsd:element name="NameValuePairs" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="NameValue" minOccurs="0" maxOccurs="unbounded">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="Name" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="Value" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="TransactionID" type="xsd:string"/>
                    <xsd:element name="StartTimeStamp" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>52</pd:startX>
    <pd:startY>86</pd:startY>
    <pd:returnBindings>
        <root>
            <xmlOut>
                <xsl:value-of select="tib:render-xml($MapRes/root)"/>
            </xmlOut>
            <NameValuePairs>
                <xsl:copy-of select="$Start/root/NameValuePairs/NameValue"/>
                <NameValue>
                    <Name>
                        <xsl:value-of select="&quot;SKIPJSON&quot;"/>
                    </Name>
                    <xsl:if test="$XML_JSON/javaCodeActivityOutput/jsonOut">
                        <Value>
                            <xsl:value-of select="$XML_JSON/javaCodeActivityOutput/jsonOut"/>
                        </Value>
                    </xsl:if>
                </NameValue>
            </NameValuePairs>
            <TransactionID>
                <xsl:value-of select="$Start/root/TransactionID"/>
            </TransactionID>
            <StartTimeStamp>
                <xsl:value-of select="$Start/root/StartTimeStamp"/>
            </StartTimeStamp>
        </root>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="xmlOut" type="xsd:string"/>
                    <xsd:element name="NameValuePairs" minOccurs="0">
                        <xsd:complexType>
                            <xsd:sequence>
                                <xsd:element name="NameValue" minOccurs="0" maxOccurs="unbounded">
                                    <xsd:complexType>
                                        <xsd:sequence>
                                            <xsd:element name="Name" type="xsd:string" minOccurs="0"/>
                                            <xsd:element name="Value" type="xsd:string" minOccurs="0"/>
                                        </xsd:sequence>
                                    </xsd:complexType>
                                </xsd:element>
                            </xsd:sequence>
                        </xsd:complexType>
                    </xsd:element>
                    <xsd:element name="TransactionID" type="xsd:string"/>
                    <xsd:element name="StartTimeStamp" type="xsd:string"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:endType>
    <pd:endX>930</pd:endX>
    <pd:endY>86</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1594286379235</pd:targetNamespace>
    <pd:activity name="Log_Msg-In">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>167</pd:x>
        <pd:y>86</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
        </config>
        <pd:inputBindings>
            <ns12:LogRequest>
                <ns22:Header>
                    <ns22:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns22:ApplicationID>
                    <ns22:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/BusinessProcesses/Services/SES/QueryPurchasablePlans/ComponentName"/>
                    </ns22:ComponentName>
                    <ns22:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns22:Hostname>
                    <ns22:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns22:Timestamp>
                    <ns22:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns22:TransactionDomain>
                    <ns22:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns2:ProcessContext/ProcessId))"/>
                    </ns22:TransactionType>
                    <ns22:TransactionID>
                        <xsl:value-of select="$Start/root/TransactionID"/>
                    </ns22:TransactionID>
                    <ns22:Filename>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Deployment"/>
                    </ns22:Filename>
                    <ns22:Message>
                        <xsl:value-of select="tib:render-xml($Start/root/xmlIn)"/>
                    </ns22:Message>
                </ns22:Header>
                <TimeDuration>
                    <xsl:value-of select="$Start/root/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_REQ_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns12:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Log_Msg-Out">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>806</pd:x>
        <pd:y>86</pd:y>
        <config>
            <processName>/CommonProcesses/LoggingProcess/Logging_Message.process</processName>
        </config>
        <pd:inputBindings>
            <ns12:LogRequest>
                <ns22:Header>
                    <ns22:ApplicationID>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/ApplicationID"/>
                    </ns22:ApplicationID>
                    <ns22:ComponentName>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/BusinessProcesses/Services/SES/QueryPurchasablePlans/ComponentName"/>
                    </ns22:ComponentName>
                    <ns22:Hostname>
                        <xsl:value-of select="BW:getHostName()"/>
                    </ns22:Hostname>
                    <ns22:Timestamp>
                        <xsl:value-of select="current-dateTime()"/>
                    </ns22:Timestamp>
                    <ns22:TransactionDomain>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Header/TransactionDomain/QUERY"/>
                    </ns22:TransactionDomain>
                    <ns22:TransactionType>
                        <xsl:value-of select="zainesbcustom:getTransactionType(BW:getCurrentProcessName($_processContext/ns2:ProcessContext/ProcessId))"/>
                    </ns22:TransactionType>
                    <ns22:TransactionID>
                        <xsl:value-of select="$Start/root/TransactionID"/>
                    </ns22:TransactionID>
                    <ns22:Filename>
                        <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/Deployment"/>
                    </ns22:Filename>
                    <ns22:Message>
                        <xsl:value-of select="tib:render-xml($QueryPurchasablePlans/group/root)"/>
                    </ns22:Message>
                    <ns22:Transaction>
                        <xsl:value-of select="concat(tib:render-xml($QueryPurchasablePlans/group/root),'*****************',tib:render-xml($MapRes),'*****************',tib:render-xml($XML_JSON))"/>
                    </ns22:Transaction>
                </ns22:Header>
                <TimeDuration>
                    <xsl:value-of select="$Start/root/StartTimeStamp"/>
                </TimeDuration>
                <Category>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Category/LogRoleInfo"/>
                </Category>
                <Status>
                    <xsl:value-of select="$_globalVariables/ns1:GlobalVariables/CommonProcesses/Constants/CLE/Status/GW/GW_RES_RECV"/>
                </Status>
                <Audit>
                    <xsl:value-of select="0"/>
                </Audit>
            </ns12:LogRequest>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="MapRes">
        <pd:type>com.tibco.plugin.mapper.MapperActivity</pd:type>
        <pd:resourceType>ae.activities.MapperActivity</pd:resourceType>
        <pd:x>487</pd:x>
        <pd:y>86</pd:y>
        <config>
            <element ref="pfx9:root"/>
        </config>
        <pd:inputBindings>
            <xsl:choose>
                <xsl:when test="exists($Start/root/NameValuePairs/NameValue[Name=&quot;planid&quot;]/Value)&#xA;and &#xA;string-length($Start/root/NameValuePairs/NameValue[Name=&quot;planid&quot;]/Value)>0">
                    <root>
                        <xsl:for-each select="{-- Repeating to remove to make it array --}$QueryPurchasablePlans/group/root/plans-list[plan-group-options/plan-id=$Start/root/NameValuePairs/NameValue[Name=&quot;planid&quot;]/Value]">
                            <plans-list>
                                <xsl:for-each select="plan-group-options">
                                    <plan-group-options>
                                        <xsl:if test="plan-id">
                                            <plan-id>
                                                <xsl:value-of select="plan-id"/>
                                            </plan-id>
                                        </xsl:if>
                                        <xsl:if test="plan-label">
                                            <plan-label>
                                                <xsl:value-of select="plan-label"/>
                                            </plan-label>
                                        </xsl:if>
                                        <xsl:if test="plan-currency">
                                            <plan-currency>
                                                <xsl:value-of select="plan-currency"/>
                                            </plan-currency>
                                        </xsl:if>
                                        <plan-value>
                                            <xsl:value-of select="concat(&quot; &quot;,plan-value)"/>
                                        </plan-value>
                                        <xsl:if test="plan-description">
                                            <plan-description>
                                                <xsl:value-of select="plan-description"/>
                                            </plan-description>
                                        </xsl:if>
                                        <plan-billing-cycle>
                                            <xsl:value-of select="plan-billing-cycle"/>
                                        </plan-billing-cycle>
                                    </plan-group-options>
                                </xsl:for-each>
                            </plans-list>
                        </xsl:for-each>
                        <xsl:for-each select="$QueryPurchasablePlans/group/root/plans-list[plan-group-options/plan-id=$Start/root/NameValuePairs/NameValue[Name=&quot;planid&quot;]/Value]">
                            <plans-list>
                                <xsl:for-each select="plan-group-options">
                                    <plan-group-options>
                                        <xsl:if test="plan-id">
                                            <plan-id>
                                                <xsl:value-of select="plan-id"/>
                                            </plan-id>
                                        </xsl:if>
                                        <xsl:if test="plan-label">
                                            <plan-label>
                                                <xsl:value-of select="plan-label"/>
                                            </plan-label>
                                        </xsl:if>
                                        <xsl:if test="plan-currency">
                                            <plan-currency>
                                                <xsl:value-of select="plan-currency"/>
                                            </plan-currency>
                                        </xsl:if>
                                        <plan-value>
                                            <xsl:value-of select="concat(&quot; &quot;,plan-value)"/>
                                        </plan-value>
                                        <xsl:if test="plan-description">
                                            <plan-description>
                                                <xsl:value-of select="plan-description"/>
                                            </plan-description>
                                        </xsl:if>
                                        <plan-billing-cycle>
                                            <xsl:value-of select="plan-billing-cycle"/>
                                        </plan-billing-cycle>
                                    </plan-group-options>
                                </xsl:for-each>
                            </plans-list>
                        </xsl:for-each>
                    </root>
                </xsl:when>
                <xsl:otherwise>
                    <root>
                        <xsl:for-each select="{-- Repeating to remove to make it array --}$QueryPurchasablePlans/group/root/plans-list">
                            <plans-list>
                                <xsl:for-each select="plan-group-options">
                                    <plan-group-options>
                                        <xsl:if test="plan-id">
                                            <plan-id>
                                                <xsl:value-of select="plan-id"/>
                                            </plan-id>
                                        </xsl:if>
                                        <xsl:if test="plan-label">
                                            <plan-label>
                                                <xsl:value-of select="plan-label"/>
                                            </plan-label>
                                        </xsl:if>
                                        <xsl:if test="plan-currency">
                                            <plan-currency>
                                                <xsl:value-of select="plan-currency"/>
                                            </plan-currency>
                                        </xsl:if>
                                        <plan-value>
                                            <xsl:value-of select="concat(&quot; &quot;,plan-value)"/>
                                        </plan-value>
                                        <xsl:if test="plan-description">
                                            <plan-description>
                                                <xsl:value-of select="plan-description"/>
                                            </plan-description>
                                        </xsl:if>
                                        <plan-billing-cycle>
                                            <xsl:value-of select="plan-billing-cycle"/>
                                        </plan-billing-cycle>
                                    </plan-group-options>
                                </xsl:for-each>
                            </plans-list>
                        </xsl:for-each>
                        <xsl:for-each select="$QueryPurchasablePlans/group/root/plans-list">
                            <plans-list>
                                <xsl:for-each select="plan-group-options">
                                    <plan-group-options>
                                        <xsl:if test="plan-id">
                                            <plan-id>
                                                <xsl:value-of select="plan-id"/>
                                            </plan-id>
                                        </xsl:if>
                                        <xsl:if test="plan-label">
                                            <plan-label>
                                                <xsl:value-of select="plan-label"/>
                                            </plan-label>
                                        </xsl:if>
                                        <xsl:if test="plan-currency">
                                            <plan-currency>
                                                <xsl:value-of select="plan-currency"/>
                                            </plan-currency>
                                        </xsl:if>
                                        <plan-value>
                                            <xsl:value-of select="concat(&quot; &quot;,plan-value)"/>
                                        </plan-value>
                                        <xsl:if test="plan-description">
                                            <plan-description>
                                                <xsl:value-of select="plan-description"/>
                                            </plan-description>
                                        </xsl:if>
                                        <plan-billing-cycle>
                                            <xsl:value-of select="plan-billing-cycle"/>
                                        </plan-billing-cycle>
                                    </plan-group-options>
                                </xsl:for-each>
                            </plans-list>
                        </xsl:for-each>
                    </root>
                </xsl:otherwise>
            </xsl:choose>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="QueryPurchasablePlans">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>320</pd:x>
        <pd:y>84</pd:y>
        <config>
            <processName>/Services/SESEntServer/QueryPurchasablePlans/HelperProcess/QueryPurchasablePlans.process</processName>
        </config>
        <pd:inputBindings>
            <group>
                <TrackingId>
                    <xsl:value-of select="$Start/root/TransactionID"/>
                </TrackingId>
                <StartTimeStamp>
                    <xsl:value-of select="$Start/root/StartTimeStamp"/>
                </StartTimeStamp>
                <OperationName>
                    <xsl:value-of select="'GlobalProdList'"/>
                </OperationName>
                <xsl:if test="string-length($Start/root/NameValuePairs/NameValue[Name='msisdn']/Value)>3">
                    <Msisdn>
                        <xsl:value-of select="$Start/root/NameValuePairs/NameValue[Name='msisdn']/Value"/>
                    </Msisdn>
                </xsl:if>
            </group>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="XML_JSON">
        <pd:type>com.tibco.plugin.java.JavaActivity</pd:type>
        <pd:resourceType>ae.javapalette.javaActivity</pd:resourceType>
        <pd:x>643</pd:x>
        <pd:y>86</pd:y>
        <config>
            <fileName>QueryPurchasablePlansImplXML_JSON</fileName>
            <packageName>Services.SESEntServer.QueryPurchasablePlans.Implementation.QueryPurchasablePlansImpl</packageName>
            <fullsource>package Services.SESEntServer.QueryPurchasablePlans.Implementation.QueryPurchasablePlansImpl;
import java.util.*;
import java.io.*;
import org.json.JSONObject;
import org.json.XML;
import org.json.JSONArray;

public class QueryPurchasablePlansImplXML_JSON{
/****** START SET/GET METHOD, DO NOT MODIFY *****/
	protected String jsonIn = "";
	protected String xmlIn = "";
	protected String xmlOut = "";
	protected String jsonOut = "";
	public String getjsonIn() {
		return jsonIn;
	}
	public void setjsonIn(String val) {
		jsonIn = val;
	}
	public String getxmlIn() {
		return xmlIn;
	}
	public void setxmlIn(String val) {
		xmlIn = val;
	}
	public String getxmlOut() {
		return xmlOut;
	}
	public void setxmlOut(String val) {
		xmlOut = val;
	}
	public String getjsonOut() {
		return jsonOut;
	}
	public void setjsonOut(String val) {
		jsonOut = val;
	}
/****** END SET/GET METHOD, DO NOT MODIFY *****/
	public QueryPurchasablePlansImplXML_JSON() {
	}
	public void invoke() throws Exception {
	String xmlOt="";
	String jsonOt="";
	if(getjsonIn()!=null &amp; getjsonIn()!="")
	{
		JSONObject jObj = new JSONObject(getjsonIn());
		xmlOt=XML.toString(jObj);
		setxmlOut(xmlOt);
	}

	if(getxmlIn()!=null &amp; getxmlIn()!="")
	{
		
		JSONObject jObj1 = XML.toJSONObject(getxmlIn());
    try{
                   if(jObj1.getJSONArray("plans-list").length()&gt;0){
     	        	//jObj1.getJSONArray("plans-list").remove(0);
                        JSONArray Jr1 =jObj1.getJSONArray("plans-list");
                                   Jr1.remove(0);
                        //////////
                        JSONObject jsonObject = Jr1.optJSONObject(0);
                        JSONArray jsonArray1 = jsonObject.getJSONArray("plan-group-options");
                        jsonArray1.remove(0);}
                        ///////////
	setjsonOut((jObj1.toString()).replaceAll(" ",""));
       }
catch(Exception e){
setjsonOut((jObj1.toString()));
                  }
	}
/* Available Variables: DO NOT MODIFY
	In  : String jsonIn
	In  : String xmlIn
	Out : String xmlOut
	Out : String jsonOut
* Available Variables: DO NOT MODIFY *****/

}
}
</fullsource>
            <inputData>
                <row>
                    <fieldName>jsonIn</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
                <row>
                    <fieldName>xmlIn</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
            </inputData>
            <outputData>
                <row>
                    <fieldName>xmlOut</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
                <row>
                    <fieldName>jsonOut</fieldName>
                    <fieldType>string</fieldType>
                    <fieldRequired>optional</fieldRequired>
                </row>
            </outputData>
            <byteCode>
                <class>
                    <name>QueryPurchasablePlansImplXML_JSON</name>
                    <byteCode>yv66vgAAADQAZQkAGQA3CQAZADgJABkAOQkAGQA6CgAaADsIADwKABkAPQcAPgoACAA/CgBAAEEKABkAQgoAGQBDCgBAAEQIAEUKAAgARgoARwBICgBHAEkKAEcASggASwoACABMCABNCgBOAE8KABkAUAcAUQcAUgcAUwEABmpzb25JbgEAEkxqYXZhL2xhbmcvU3RyaW5nOwEABXhtbEluAQAGeG1sT3V0AQAHanNvbk91dAEACWdldGpzb25JbgEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACXNldGpzb25JbgEAFShMamF2YS9sYW5nL1N0cmluZzspVgEACGdldHhtbEluAQAIc2V0eG1sSW4BAAlnZXR4bWxPdXQBAAlzZXR4bWxPdXQBAApnZXRqc29uT3V0AQAKc2V0anNvbk91dAEABjxpbml0PgEAAygpVgEABmludm9rZQEADVN0YWNrTWFwVGFibGUHAFQHAFIHAD4HAFEBAApFeGNlcHRpb25zAQAKU291cmNlRmlsZQEAJlF1ZXJ5UHVyY2hhc2FibGVQbGFuc0ltcGxYTUxfSlNPTi5qYXZhDAAbABwMAB0AHAwAHgAcDAAfABwMACwALQEAAAwAIAAhAQATb3JnL2pzb24vSlNPTk9iamVjdAwALAAlBwBVDABWAFcMACkAJQwAJgAhDABYAFkBAApwbGFucy1saXN0DABaAFsHAFwMAF0AXgwAXwBgDABhAGIBABJwbGFuLWdyb3VwLW9wdGlvbnMMAFYAIQEAAsKgBwBUDABjAGQMACsAJQEAE2phdmEvbGFuZy9FeGNlcHRpb24BAHZTZXJ2aWNlcy9TRVNFbnRTZXJ2ZXIvUXVlcnlQdXJjaGFzYWJsZVBsYW5zL0ltcGxlbWVudGF0aW9uL1F1ZXJ5UHVyY2hhc2FibGVQbGFuc0ltcGwvUXVlcnlQdXJjaGFzYWJsZVBsYW5zSW1wbFhNTF9KU09OAQAQamF2YS9sYW5nL09iamVjdAEAEGphdmEvbGFuZy9TdHJpbmcBAAxvcmcvanNvbi9YTUwBAAh0b1N0cmluZwEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9TdHJpbmc7AQAMdG9KU09OT2JqZWN0AQApKExqYXZhL2xhbmcvU3RyaW5nOylMb3JnL2pzb24vSlNPTk9iamVjdDsBAAxnZXRKU09OQXJyYXkBACgoTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvanNvbi9KU09OQXJyYXk7AQASb3JnL2pzb24vSlNPTkFycmF5AQAGbGVuZ3RoAQADKClJAQAGcmVtb3ZlAQAVKEkpTGphdmEvbGFuZy9PYmplY3Q7AQANb3B0SlNPTk9iamVjdAEAGChJKUxvcmcvanNvbi9KU09OT2JqZWN0OwEACnJlcGxhY2VBbGwBADgoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nOwAhABkAGgAAAAQABAAbABwAAAAEAB0AHAAAAAQAHgAcAAAABAAfABwAAAAKAAEAIAAhAAEAIgAAAB0AAQABAAAABSq0AAGwAAAAAQAjAAAABgABAAAADwABACQAJQABACIAAAAiAAIAAgAAAAYqK7UAAbEAAAABACMAAAAKAAIAAAASAAUAEwABACYAIQABACIAAAAdAAEAAQAAAAUqtAACsAAAAAEAIwAAAAYAAQAAABUAAQAnACUAAQAiAAAAIgACAAIAAAAGKiu1AAKxAAAAAQAjAAAACgACAAAAGAAFABkAAQAoACEAAQAiAAAAHQABAAEAAAAFKrQAA7AAAAABACMAAAAGAAEAAAAbAAEAKQAlAAEAIgAAACIAAgACAAAABiortQADsQAAAAEAIwAAAAoAAgAAAB4ABQAfAAEAKgAhAAEAIgAAAB0AAQABAAAABSq0AASwAAAAAQAjAAAABgABAAAAIQABACsAJQABACIAAAAiAAIAAgAAAAYqK7UABLEAAAABACMAAAAKAAIAAAAkAAUAJQABACwALQABACIAAABJAAIAAQAAAB0qtwAFKhIGtQABKhIGtQACKhIGtQADKhIGtQAEsQAAAAEAIwAAABoABgAAACcABAAKAAoACwAQAAwAFgANABwAKAABAC4ALQACACIAAAFkAAQABwAAALASBkwSBk0qtgAHxgAHBKcABAMqtgAHEgalAAcEpwAEA36ZABm7AAhZKrYAB7cACU4tuAAKTCortgALKrYADMYABwSnAAQDKrYADBIGpQAHBKcABAN+mQBaKrYADLgADU4tEg62AA+2ABCeACotEg62AA86BBkEA7YAEVcZBAO2ABI6BRkFEhO2AA86BhkGA7YAEVcqLbYAFBIVEga2ABa2ABenAA06BCottgAUtgAXsQABAGAAogClABgAAgAjAAAATgATAAAAKgADACsABgAsACQALgAwAC8ANQAwADoAMwBYADYAYAA4AGwAOgB0ADsAewA9AIMAPgCMAD8AkwBBAKIARQClAEMApwBEAK8ATgAvAAAARgAM/QARBwAwBwAwQAFMAf8AAAADBwAxBwAwBwAwAAIBARkKQAFMAf8AAAADBwAxBwAwBwAwAAIBAfwAPgcAMlEHADP6AAkANAAAAAQAAQAYAAEANQAAAAIANg==</byteCode>
                </class>
            </byteCode>
        </config>
        <pd:inputBindings>
            <javaCodeActivityInput>
                <xmlIn>
                    <xsl:value-of select="substring-before(substring-after(tib:render-xml(($MapRes/root)), &quot;&lt;root>&quot;), &quot;&lt;/root>&quot;)"/>
                </xmlIn>
            </javaCodeActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>Log_Msg-In</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>QueryPurchasablePlans</pd:from>
        <pd:to>MapRes</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>MapRes</pd:from>
        <pd:to>XML_JSON</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log_Msg-Out</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log_Msg-In</pd:from>
        <pd:to>QueryPurchasablePlans</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>XML_JSON</pd:from>
        <pd:to>Log_Msg-Out</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>