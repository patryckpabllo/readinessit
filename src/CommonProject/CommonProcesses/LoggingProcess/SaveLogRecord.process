<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:pfx13="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:pfx12="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" xmlns:pfx11="http://www.tibco.com/CommonLE2/namespace/private/Common" xmlns:pfx10="http://www.tibco.com/CommonLE2/Public/Common/Dummy" xmlns:pfx5="http://www.tibco.com/CommonLE2/namespace/Exception" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx4="http://www.tibco.com/CommonLE/namespace/Common" xmlns:pfx3="http://www.tibco.com/CommonLE/namespace/Reporting/LogRequest" xmlns:pfx2="http://www.tibco.com/unique/default/namespace/CommonLE" xmlns:pfx9="http://schemas.tibco.com/bw/plugins/jdbc/5.0/jdbcExceptions" xmlns:pfx8="http://www.tibco.com/CommonLE2/namespace/Public/Logging" xmlns:pfx7="http://www.tibco.com/CommonLE2/namespace/Log" xmlns:pfx6="http://www.tibco.com/CommonLE/namespace/LogListResponse" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns9="http://www.tibco.com/CommonLE2/namespace/Public/Common/RequestHeader.xsd" xmlns:ns5="http://www.tibco.com/CommonLE2/namespace/Common" xmlns:ns6="http://www.tibco.com/CommonLE2/namespace/Private/Logging" xmlns:pfx="http://www.tibco.com/unique/default/namespace/Log" xmlns:ns7="http://www.tibco.com/CommonLE2/Private/Common" xmlns:ns8="http://www.tibco.com/CommonLE2/namespace/Public/Common" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns2="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns1="http://www.tibco.com/pe/EngineTypes" xmlns:ns4="http://www.tibco.com/CommonLE/namespace/Custom" xmlns:ns3="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <xsd:import namespace="http://www.tibco.com/CommonLE/namespace/Reporting/LogRequest" schemaLocation="/Shared Resources/Schema Definitions/Reporting/LogRequest.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE/namespace/Common" schemaLocation="/Shared Resources/Schema Definitions/Common/LogRequest.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE/namespace/LogListResponse" schemaLocation="/SharedResources/SchemaDefinitions/Public/Pluggable/GUI/Log/LogList.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/Public/Common/Dummy" schemaLocation="/SharedResources/SchemaDefinitions/Public/Pluggable/GUI/Common/DummyReturnMessage.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/private/Common" schemaLocation="/SharedResources/SchemaDefinitions/Private/Common/LocalExceptions.xsd"/>
    <xsd:import namespace="http://www.tibco.com/CommonLE2/namespace/Public/Logging/LogRequest.xsd" schemaLocation="/BusinessSchemas/Services/Common/CLE/LogRequest.xsd"/>
    <pd:name>CommonProcesses/LoggingProcess/SaveLogRecord.process</pd:name>
    <pd:description>This function is used to save the log into the database. If the application ID or render ID in a log request are not defined, the database
throws data integrity exception. The exception is used to detected unqualified log requests. Unqulified log requests
are persisted into another table which has no application ID integrity check. These type of logs can only be viewed, and 
are not used for exception correlation. </pd:description>
    <pd:startName>JMS Queue Receiver</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings>
        <pfx10:Dummy>
            <pfx10:StatusMessage>
                <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/ReservedIDs/DummyID"/>
            </pfx10:StatusMessage>
        </pfx10:Dummy>
    </pd:returnBindings>
    <pd:starter name="JMS Queue Receiver">
        <pd:type>com.tibco.plugin.jms.JMSQueueEventSource</pd:type>
        <pd:resourceType>ae.activities.JMSQueueEventSource</pd:resourceType>
        <pd:x>68</pd:x>
        <pd:y>140</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%CommonProcesses/Logging/Logging_Message/LoggingQueue%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/CommonResources/Connections/JMS/Internal/EAI_EMSConnection.sharedjmscon</ConnectionReference>
            <ApplicationProperties/>
            <OutDataxsdString ref="pfx12:LogRequest"/>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>899</pd:endX>
    <pd:endY>130</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1284170259890</pd:targetNamespace>
    <pd:activity name="Null">
        <pd:type>com.tibco.plugin.timer.NullActivity</pd:type>
        <pd:resourceType>ae.activities.null</pd:resourceType>
        <pd:x>567</pd:x>
        <pd:y>193</pd:y>
        <config/>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Insert Alt Keys">
        <pd:type>com.tibco.plugin.jdbc.JDBCUpdateActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCUpdateActivity</pd:resourceType>
        <pd:x>567</pd:x>
        <pd:y>69</pd:y>
        <config>
            <timeout>%%CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection/LoginTimeout%%</timeout>
            <commit>false</commit>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection.sharedjdbc</jdbcSharedConfig>
            <statement>INSERT INTO LOGALTKEY (logid, altkeyname, altkeyvalue) VALUES (?,?,?)</statement>
            <batchUpdate>true</batchUpdate>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>LOGID</parameterName>
                    <dataType>NUMERIC</dataType>
                </parameter>
                <parameter>
                    <parameterName>ALT_KEY_NAME</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>ALT_KEY_VALUE</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
            </Prepared_Param_DataType>
        </config>
        <pd:inputBindings>
            <jdbcUpdateActivityInput>
                <xsl:for-each xmlns:xsl="http://www.w3.org/1999/XSL/Transform" select="$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:AltKey">
                    <Record>
                        <LOGID>
                            <xsl:value-of select="number($SQL-Direct/jdbcGeneralActivityOutput/unknownResultset[1]/row[1]/column[1]/value)"/>
                        </LOGID>
                        <ALT_KEY_NAME>
                            <xsl:value-of select="ns9:AltKeyName"/>
                        </ALT_KEY_NAME>
                        <ALT_KEY_VALUE>
                            <xsl:value-of select="ns9:AltKeyValue"/>
                        </ALT_KEY_VALUE>
                    </Record>
                </xsl:for-each>
            </jdbcUpdateActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Insert Log">
        <pd:type>com.tibco.plugin.jdbc.JDBCUpdateActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCUpdateActivity</pd:resourceType>
        <pd:x>430</pd:x>
        <pd:y>142</pd:y>
        <config>
            <timeout>%%CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection/LoginTimeout%%</timeout>
            <commit>false</commit>
            <emptyStrAsNil>false</emptyStrAsNil>
            <jdbcSharedConfig>/CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection.sharedjdbc</jdbcSharedConfig>
            <statement>insert into LOG (LogID, ApplicationID, ComponentName,Hostname, TransactionDomain, 
TransactionID,TransactionType,Time_Stamp, TimeDuration, Category,Status, Transaction, Filename,
Dataencoding,CorrelationID, Message, RenderID, TransactionSize, InterfaceID, LogAudit) 
values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?, ?, ?)</statement>
            <Prepared_Param_DataType>
                <parameter>
                    <parameterName>LogID</parameterName>
                    <dataType>NUMERIC</dataType>
                </parameter>
                <parameter>
                    <parameterName>ApplicationID</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>ComponentName</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>Hostname</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>TransactionDomain</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>TransactionID</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>TransactionType</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>TimeStamp</parameterName>
                    <dataType>TIMESTAMP</dataType>
                </parameter>
                <parameter>
                    <parameterName>TimeDuration</parameterName>
                    <dataType>DOUBLE</dataType>
                </parameter>
                <parameter>
                    <parameterName>Category</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>Status</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>Transaction</parameterName>
                    <dataType>CLOB</dataType>
                </parameter>
                <parameter>
                    <parameterName>Filename</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>Dataencoding</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>CorelationID</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>Message</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>RenderID</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>TransactionSize</parameterName>
                    <dataType>INTEGER</dataType>
                </parameter>
                <parameter>
                    <parameterName>InterfaceID</parameterName>
                    <dataType>VARCHAR</dataType>
                </parameter>
                <parameter>
                    <parameterName>LogAudit</parameterName>
                    <dataType>TINYINT</dataType>
                </parameter>
            </Prepared_Param_DataType>
        </config>
        <pd:inputBindings>
            <jdbcUpdateActivityInput>
                <LogID>
                    <xsl:value-of select="number($SQL-Direct/jdbcGeneralActivityOutput/unknownResultset[1]/row[1]/column[1]/value)"/>
                </LogID>
                <ApplicationID>
                    <xsl:value-of select="if(string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:ApplicationID))&#xA;then&#xA;$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:ApplicationID&#xA;else&#xA;&quot;TIBCO&quot;"/>
                </ApplicationID>
                <ComponentName>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:ComponentName)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:ComponentName)">
                            <xsl:value-of select="if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:ComponentName)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:ComponentName"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </ComponentName>
                <Hostname>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Hostname)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Hostname)">
                            <xsl:value-of select="if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Hostname)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Hostname"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </Hostname>
                <TransactionDomain>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionDomain)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionDomain)">
                            <xsl:value-of select="if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionDomain)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionDomain"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </TransactionDomain>
                <TransactionID>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionID)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionID)">
                            <xsl:value-of select="if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionID)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionID"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </TransactionID>
                <TransactionType>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length( $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionType)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionType)">
                            <xsl:value-of select="if (string-length( $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionType)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:TransactionType"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </TransactionType>
                <TimeStamp>
                    <xsl:value-of select="$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Timestamp"/>
                </TimeStamp>
                <TimeDuration>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-XML/pfx12:LogRequest/TimeDuration)">
                            <xsl:value-of select="$Parse-XML/pfx12:LogRequest/TimeDuration"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </TimeDuration>
                <Category>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length( $Parse-XML/pfx12:LogRequest/Category)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/Category)">
                            <xsl:value-of select="if (string-length( $Parse-XML/pfx12:LogRequest/Category)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/Category"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </Category>
                <Status>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-XML/pfx12:LogRequest/Status)">
                            <xsl:value-of select="$Parse-XML/pfx12:LogRequest/Status"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </Status>
                <Transaction>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Transaction)">
                            <xsl:value-of select="$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Transaction"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </Transaction>
                <Filename>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Filename)">
                            <xsl:value-of select="$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Filename"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </Filename>
                <Dataencoding>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:DataEncoding)">
                            <xsl:value-of select="$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:DataEncoding"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </Dataencoding>
                <CorelationID>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:CorrelationID)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:CorrelationID)">
                            <xsl:value-of select="if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:CorrelationID)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:CorrelationID"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </CorelationID>
                <Message>
                    <xsl:choose>
                        <xsl:when test="exists(if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Message)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Message)">
                            <xsl:value-of select="if (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Message)=0) then &quot; &quot;&#xA;else $Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Message"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </Message>
                <RenderID>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:RenderID)">
                            <xsl:value-of select="$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:RenderID"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </RenderID>
                <TransactionSize>
                    <xsl:value-of select="if ($Parse-XML/pfx12:LogRequest/Audit = &quot;true&quot;) then &#xA;   (if  (string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Filename) > 0 and $Parse-XML/pfx12:LogRequest/FileSize>0) &#xA;         then $Parse-XML/pfx12:LogRequest/FileSize&#xA;    else string-length($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:Transaction)) &#xA;else 0"/>
                </TransactionSize>
                <InterfaceID>
                    <xsl:choose>
                        <xsl:when test="exists($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:InterfaceID)">
                            <xsl:value-of select="$Parse-XML/pfx12:LogRequest/ns9:Header/ns9:InterfaceID"/>
                        </xsl:when>
                        <xsl:otherwise>
                            <xsl:attribute name="xsi:nil">true</xsl:attribute>
                        </xsl:otherwise>
                    </xsl:choose>
                </InterfaceID>
                <LogAudit>
                    <xsl:value-of select="if ($Parse-XML/pfx12:LogRequest/Audit='true') then 1 else 0"/>
                </LogAudit>
                <timeout>
                    <xsl:value-of select="$_globalVariables/ns2:GlobalVariables/CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection/LoginTimeout"/>
                </timeout>
            </jdbcUpdateActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>175</pd:x>
        <pd:y>139</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term ref="pfx12:LogRequest"/>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="tib:render-xml($JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx12:LogRequest)"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Confirm">
        <pd:type>com.tibco.pe.core.ConfirmActivity</pd:type>
        <pd:resourceType>activity.confirm</pd:resourceType>
        <pd:x>761</pd:x>
        <pd:y>132</pd:y>
        <config>
            <ConfirmEvent>JMS Queue Receiver</ConfirmEvent>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="SQL Direct">
        <pd:type>com.tibco.plugin.jdbc.JDBCGeneralActivity</pd:type>
        <pd:resourceType>ae.activities.JDBCGeneralActivity</pd:resourceType>
        <pd:x>316</pd:x>
        <pd:y>140</pd:y>
        <config>
            <timeout>%%CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection/LoginTimeout%%</timeout>
            <commit>false</commit>
            <maxRows>%%CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection/Maxrows%%</maxRows>
            <jdbcSharedConfig>/CommonResources/Connections/JDBC/Internal/LocalTIBDBServerConnection.sharedjdbc</jdbcSharedConfig>
        </config>
        <pd:inputBindings>
            <jdbcGeneralActivityInput>
                <statement>
                    <xsl:value-of select="&quot;SELECT LOGID.nextval from dual&quot;"/>
                </statement>
            </jdbcGeneralActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>503</pd:x>
        <pd:y>266</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Log">
        <pd:type>com.tibco.pe.core.WriteToLogActivity</pd:type>
        <pd:resourceType>ae.activities.log</pd:resourceType>
        <pd:x>735</pd:x>
        <pd:y>264</pd:y>
        <config>
            <role>User</role>
        </config>
        <pd:inputBindings>
            <pfx13:ActivityInput>
                <message>
                    <xsl:value-of select="$Catch/exceptiondata/*"/>
                </message>
                <msgCode>
                    <xsl:value-of select="$Catch/exceptiondata/*"/>
                </msgCode>
            </pfx13:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>Insert Log</pd:from>
        <pd:to>Null</pd:to>
        <pd:xpathDescription>No Alt Key</pd:xpathDescription>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>xpath</pd:conditionType>
        <pd:xpath>count($Parse-XML/pfx12:LogRequest/ns9:Header/ns9:AltKey) = 0</pd:xpath>
    </pd:transition>
    <pd:transition>
        <pd:from>Insert Log</pd:from>
        <pd:to>Insert Alt Keys</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>otherwise</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>JMS Queue Receiver</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Confirm</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SQL Direct</pd:from>
        <pd:to>Insert Log</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>SQL Direct</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Insert Alt Keys</pd:from>
        <pd:to>Confirm</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Null</pd:from>
        <pd:to>Confirm</pd:to>
        <pd:lineType>Multiple Bends</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Log</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Log</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>One Bend</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>